#include "bgt_compat.nvgt"
#include"includes/audioutils.nvgt"
#include"sound_pool.nvgt"
file temp;
sound@ progress_sound;
string[] contents;
string filename;
string decryption_key;
string end;
pack pfile;
void main()
{
filename=input_box("pack extracter", "enter the name of the file you wish to extract");
if (filename=="")
{
alert("error!","you may not extract an empty file!");
exit();
}
decryption_key=input_box("pack extracter", "please enter the decryption key.");
if (get_last_error()==-12)
{
alert("error","an error has caused the program to fail the extraction. exiting");
exit();
}
end=input_box("pack extracter", "Enter anything you want added to the end of the filenames, such as .ogg or .wav.");
if (get_last_error()==-12)
{
exit();
}
pfile.open(filename);
contents=pfile.list_files();
alert("get ready",contents.length()+" files are about to be extracted!");
if (!directory_exists("packs"))
{
directory_create("packs");
}
if (!directory_exists("packs/"+filename))
{
directory_create("packs/"+filename);
}
if (!directory_exists("packs/"+filename+"/decrypted"))
{
directory_create("packs/"+filename+"/decrypted");
}
string output;
double temp=-1;
show_game_window("working");
for (double i=0; i<contents.length(); i++)
{
double percent=(i+1)/contents.length()*100.0;
percent=round(percent,0);
if(percent!=temp)
{
beep_percentage(percent);
temp=percent;
}
output+=contents[i]+"\r\n";
pfile.extract_file(contents[i], "packs/"+filename+"/"+string2file(contents[i])+end);
if(decryption_key!="") 
{
string_file_decrypt("packs/"+filename+"/"+string2file(contents[i]), "packs/"+filename+"/decrypted/"+string2file(contents[i])+end, decryption_key);
file_copy("packs/"+filename+"/decrypted/"+string2file(contents[i])+end, "packs/"+filename+"/"+string2file(contents[i])+end, true);
file_delete("packs/"+filename+"/decrypted/"+string2file(contents[i]));
}
}
directory_delete("packs/"+filename+"/decrypted");
clipboard_copy_text(output);
alert("success",filename+" has been extracted. stats: "+contents.length()+" files are now in packs/"+filename);
}
bool string_file_decrypt(const string& input_file, const string& output_file, const string& encryption_key)
{
file input;
if (!input.open(input_file, "rb"))
return false;
string encrypted_content = input.read();
input.close();
string decrypted_content = string_decrypt(encrypted_content, encryption_key);
file output;
if (!output.open(output_file, "wb"))
return false;
output.write(decrypted_content);
output.close();
return true;
}
string string2file(string thing)
{
thing=string_replace(thing,"\\","/",true);
thing=string_replace(thing,"/"," ",true);
return thing;
}
void beep_percentage(double val)
{
if(val<0 && val!=val)
{
return;
}
val=round(val,0);
val=clamp(val,0,100);
uint freq=uint(110*pow(2,val/25));
float dur=40;
float amp=0.4;
uint sr=44100;
float[]@ samples=triangle_wave(freq,dur,amp,sr);
samples=adsr_envelope(samples,5,0,1,5,sr);
@progress_sound=push_audio(samples,sr);
progress_sound.play();
}
