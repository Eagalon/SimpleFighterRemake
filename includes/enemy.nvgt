enemie@[]enemies(0);
class enemie
{
bool fireable, moveable, moveable2;
int emsound, defsound, hurtsound, tilesound, wepsound;
int enemiecard;
int enehealth;
double emlevel;
double emxp;
double enemiehealth;
double enemiemaxhealth;
int emx;
int emy;
int enerange;
int enerange2;
int enerange3;
int enerange4;
int damage;
int enemietime;
int firetime;
string enemietype;
timer enemietimer, firetimer;
enemie(int ex,int ey,int enrange,int enrange2,int enrange3,int enrange4,double hp,double maxhp,int ec,int dm,int ft,int sp,double emlv,double exp,string et,bool emf,bool emt,bool emt2)
{
this.enehealth=hp;
emx=ex;
emy=ey;
enerange=enrange;
enerange2=enrange2;
enerange3=enrange3;
enerange4=enrange4;
enemiehealth=hp;
enemiemaxhealth=maxhp;
enemiecard=ec;
damage=dm;
firetime=ft;
enemietime=sp;
emlevel=emlv;
emxp=exp;
enemietype=et;
fireable=emf;
moveable=emt;
moveable2=emt2;
string[] emsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemietype+"/*taunt*");
if(emsfx.length()!=0) emsound=enemiepool.play_extended_2d("sounds/"+soundpack+"/npc/enemies/"+enemietype+"/"+emsfx[random(0,emsfx.length()-1)],me.x,me.y,emx,emy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void eneloop()
{
for(uint i=0; i<enemies.length(); i++)
{
if(enemies[i].enemietimer.elapsed>=enemies[i].enemietime)
{
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange3 or absolute(me.y-enemies[i].emy)<=enemies[i].enerange4)
{
string[] tilers=find_files("sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/*step*");
if(enemies[i].moveable==true and paused==0 and tilers.length()!=0) tilesound=p.play_extended_2d("sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/"+tilers[random(0,tilers.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
enemiepool.update_sound_2d(enemies[i].emsound,enemies[i].emx,enemies[i].emy);
enemies[i].enemietimer.restart();
if(enemies[i].emx<me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx++;
}
if(enemies[i].emx>me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx--;
}
if(enemies[i].emy<me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy++;
}
if(enemies[i].emy>me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy--;
}
}
}
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=enemies[i].damage*enemies[i].emlevel-shielddefence;
enemies[i].firetimer.restart();
}
else if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*hit*");
if(hitsfx.length()!=0) enemies[i].wepsound=enemiepool.play_stationary_extended("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=enemies[i].damage*enemies[i].emlevel-defence;
enemies[i].firetimer.restart();
}
if(enemies[i].enemiehealth<=0)
{
if(enemies[i].enemiecard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*life*");
if(lifesfx.length()!=0) enemiepool.play_2d("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,false);
enemies[i].enemiehealth=enemies[i].enehealth;
enemies[i].enemiecard-=1;
}
else if(enemies[i].enemiecard<=1 and paused==0)
{
enemiepool.destroy_sound(enemies[i].hurtsound);
enemiepool.destroy_sound(enemies[i].emsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*death*");
if(defsfx.length()!=0) enemies[i].defsound=enemiepool.play_extended_2d("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=enemies[i].emxp*enemies[i].emlevel*xpmod;
kills+=1;
spawn_bodyfall(enemies[i].emx, enemies[i].emy, random(500,1000));
enemies.remove_at(i);
return;
}
}
}
}
void spawn_enemie(int x,int y,int enemrange,int enemrange2,int enemrange3,int enemrange4,double hp,double maxhp,int ec,int dm,int firetime,int enemietime,double emlevel,double xp,string enemietype,bool fireable,bool moveable,bool moveable2)
{
enemie en1(x,y,enemrange,enemrange2,enemrange3,enemrange4,hp,maxhp,ec,dm,firetime,enemietime,emlevel,xp,enemietype,fireable,moveable,moveable2);
enemies.insert_last(en1);
}
void destroy_all_enemies()
{
for(uint i=0; i<enemies.length(); i++)
{
enemiepool.destroy_sound(enemies[i].emsound);
}
enemies.resize(0);
}
