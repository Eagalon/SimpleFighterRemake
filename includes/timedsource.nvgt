timedsource@[]timedsources(0);
class timedsource
{
int sorcesound;
double minx, maxx, miny, maxy;
double volume;
double pitch;
int sourcetime;
string sourcetype;
timer sourcetimer;
timedsource(double mx,double mx2,double my,double my2,double vol,double semitone,int sp,string srt)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
volume=vol;
pitch=semitone;
sourcetime=sp;
sourcetype=srt;
}
}
void timedsrcloop()
{
for(uint i=0; i<timedsources.length(); i++)
{
if(timedsources[i].sourcetimer.elapsed>=timedsources[i].sourcetime)
{
sourcepool.destroy_sound(timedsources[i].sorcesound);
string[] srcfilesfx=find_files("sounds/"+soundpack+"/objects/sources/"+timedsources[i].sourcetype+"/*loop*");
if(srcfilesfx.length()!=0) timedsources[i].sorcesound=sourcepool.play_extended_2d("sounds/"+soundpack+"/objects/sources/"+timedsources[i].sourcetype+"/"+srcfilesfx[random(0,srcfilesfx.length()-1)],me.x,me.y,timedsources[i].minx,timedsources[i].miny,0,0,0,0,false,0,0,volume,pitch,false);
sourcepool.update_sound_2d(timedsources[i].sorcesound,timedsources[i].minx,timedsources[i].miny);
sourcepool.update_sound_range_2d(timedsources[i].sorcesound, 0, timedsources[i].maxx-timedsources[i].minx, 0, timedsources[i].maxy-timedsources[i].miny);
timedsources[i].sourcetimer.restart();
}
}
}
void spawn_timedsource(double x1,double x2,double y1,double y2,double soundvol,double soundpitch,int sourcetime,string sourcetype)
{
timedsource ts1(x1,x2,y1,y2,soundvol,soundpitch,sourcetime,sourcetype);
timedsources.insert_last(ts1);
}
void destroy_all_timedsources()
{
for(uint i=0; i<timedsources.length(); i++)
{
sourcepool.destroy_sound(timedsources[i].sorcesound);
}
timedsources.resize(0);
}
