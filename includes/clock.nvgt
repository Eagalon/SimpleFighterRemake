clock@[]clocks(0);
class clock
{
bool destroyable;
int hurtsound, clocksound, pressound;
int clockx;
int clocky;
string cktext;
string clocktype;
clock(int clx,int cly,string cltext,string cltype,bool dbl)
{
clockx=clx;
clocky=cly;
cktext=cltext;
clocktype=cltype;
destroyable=dbl;
string[] clocksfx=find_files("sounds/objects/clocks/"+clocktype+"/*loop*");
if(clocksfx.length()!=0) clocksound=clockpool.play_2d("sounds/objects/clocks/"+clocktype+"/"+clocksfx[random(0,clocksfx.length()-1)],me.x,me.y,clockx,clocky,true);
}
}
void clockcheck()
{
for(uint i=0; i<clocks.length(); i++)
{
if(me.x==clocks[i].clockx and me.y==clocks[i].clocky and key_pressed(KEY_RETURN))
{
string[] pressfx=find_files("sounds/objects/clocks/"+clocks[i].clocktype+"/*pres*");
if(pressfx.length()!=0) clocks[i].pressound=clockpool.play_stationary("sounds/objects/clocks/"+clocks[i].clocktype+"/"+pressfx[random(0,pressfx.length()-1)],false);
speak(clocks[i].cktext+get_time(true, false));
}
}
}
void spawn_clock(int x,int y,string text,string clocktype,bool destroyable)
{
clock ck1(x,y,text,clocktype,destroyable);
clocks.insert_last(ck1);
}
void destroy_all_clocks()
{
for(uint i=0; i<clocks.length(); i++)
{
clockpool.destroy_sound(clocks[i].clocksound);
}
clocks.resize(0);
}
