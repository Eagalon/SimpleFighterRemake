string seconds;
string included;
string included2;
string time;
string date;
string ampm;
int hour2;
string get_date(bool include_weekday=false, bool numerical=true)
{
date="";
if (numerical==true)
{
if (include_weekday==true)
{
date+=DATE_WEEKDAY_NAME+", "+DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
else
{
date+=DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
}
else
{
if (include_weekday==true)
{
date=DATE_WEEKDAY_NAME+", "+DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
else
{
date=DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
}
return date;
}
string get_time(bool twelvehour=true, bool include_seconds=true)
{
time="";
if (TIME_SECOND<10)
{
included2="0";
}
else
{
included2="";
}
if (TIME_MINUTE<=9)
{
included="0";
}
else
{
included="";
}
if (TIME_HOUR<12)
{
ampm="AM";
}
if (TIME_HOUR>=12)
{
hour2=TIME_HOUR-12;
ampm="PM";
}
if (TIME_HOUR==0)
{
hour2=12;
}
if (TIME_HOUR>0 and TIME_HOUR<=12)
{
hour2=TIME_HOUR;
}
seconds=TIME_SECOND;
if (twelvehour==true)
{
if (include_seconds==true)
{
time=hour2+":"+included+TIME_MINUTE+":"+included2+seconds+" "+ampm;
}
else
{
time=hour2+":"+included+TIME_MINUTE+" "+ampm;
}
}
else
{
if (include_seconds==true)
{
time=TIME_HOUR+":"+included+TIME_MINUTE+":"+included2+seconds;
}
else
{
time=TIME_HOUR+":"+included+TIME_MINUTE;
}
}
return time;
}

clock@[]clocks(0);
class clock
{
bool destroyable;
int hurtsound, clocksound, pressound;
int clockx;
int clocky;
string cktext;
string clocktype;
clock(int clx,int cly,string cltext,string cltype,bool dbl)
{
clockx=clx;
clocky=cly;
cktext=cltext;
clocktype=cltype;
destroyable=dbl;
string[] clocksfx=find_files("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*loop*");
if(clocksfx.length()!=0) clocksound=clockpool.play_2d("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+clocksfx[random(0,clocksfx.length()-1)],me.x,me.y,clockx,clocky,true);
}
}
void clockcheck()
{
for(uint i=0; i<clocks.length(); i++)
{
if(me.x==clocks[i].clockx and me.y==clocks[i].clocky and key_repeating(KEY_RETURN))
{
string[] pressfx=find_files("data/sounds/"+soundpack+"/objects/clocks/"+clocks[i].clocktype+"/*pres*");
if(pressfx.length()!=0) clocks[i].pressound=clockpool.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocks[i].clocktype+"/"+pressfx[random(0,pressfx.length()-1)],false);
speak(clocks[i].cktext+get_time(true, false));
}
}
}
void spawn_clock(int x,int y,string text,string clocktype,bool destroyable)
{
clock ck1(x,y,text,clocktype,destroyable);
clocks.insert_last(ck1);
}
void destroy_all_clocks()
{
for(uint i=0; i<clocks.length(); i++)
{
clockpool.destroy_sound(clocks[i].clocksound);
}
clocks.resize(0);
}
