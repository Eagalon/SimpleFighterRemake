bool int_to_bool(int i)
{
return i==1? true:false;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
int get_distance(int a, int b)
{
return absolute(a - b);
}
double percent(double n1, double n2)
{
return (n1/n2)*100;
}
double average(double[] vals, int roundval=2)
{
double res=0;
for(uint i=0; i<vals.length(); i++)
{
res=res+vals[i];
}
res=res/vals.length();
res=round(res,roundval);
return res;
}
string string2file(string thing)
{
thing=string_replace(thing,"\\","/",true);
thing=string_replace(thing,"/"," ",true);
return thing;
}
string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/",true);
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}
string string_join(const string[]& in arr, const string& in delimiter)
{
string result="";
for (uint i=0; i<arr.length(); i++)
{
if(i>0)
result += delimiter;
result += arr[i];
}
return result;
}
string script_get_path()
{
string scriptpath;
if(SCRIPT_COMPILED==false)
{
scriptpath=SCRIPT_CURRENT_FILE;
}
else
{
scriptpath=SCRIPT_EXECUTABLE;
}
return scriptpath;
}
string script_get_folder()
{
string path=script_get_path();
string[] spl=string_split(path, "\\", true);
spl.resize(spl.length()-1);
string folder;
for(uint i=0; i<spl.length(); i++)
{
folder+=spl[i];
if(i<spl.length()-1) folder+="\\";
}
return folder;
}
