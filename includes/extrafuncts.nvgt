double percent(double n1, double n2)
{
return (n1/n2)*100;
}
double average(double[] vals, int roundval=2)
{
double res=0;
for(uint i=0; i<vals.length(); i++)
{
res=res+vals[i];
}
res=res/vals.length();
res=round(res,roundval);
return res;
}
bool int_to_bool(int i)
{
return i==1? true:false;
}
bool string_to_bool(string str)
{
return str.trim_whitespace().lower()=="true"? true:false;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
int get_distance(int a, int b)
{
return absolute(a - b);
}
string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/",true);
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}
string join_string_array(string[] arr, uint start, uint end)
{
string result = "";
for(uint i = start; i < end; i++)
{
if(i>start) result+=" ";
result+=arr[i];
}
return result;
}
string string_join(const string[]& in arr, const string& in delimiter)
{
string result="";
for (uint i=0; i<arr.length(); i++)
{
if(i>0)
result += delimiter;
result += arr[i];
}
return result;
}
string string_trim_sides(const string& in str)
{
string result=str;
while (result.length()>0 && (result[0]==" "||result[0]=="\t"||result[0]=="\r"||result[0]=="\n"))
{
result=string_trim_left(result,1);
}
while (result.length()>0 && (result[result.length()-1]==" "||result[result.length()-1]=="\t"||result[result.length()-1]=="\r"||result[result.length()-1]=="\n"))
{
result=string_trim_right(result,1);
}
return result;
}
string measure_file_size(int64 bytes)
{
if(bytes<1024)
{
return bytes+"bytes";
}
else if(bytes<1024*1024)
{
return round(double(bytes)/1024,2)+"KB";
}
else if(bytes<1024*1024*1024)
{
return round(double(bytes)/(1024*1024),2)+"MB";
}
else 
{
return round(double(bytes)/(1024*1024*1024),2)+"GB";
}
}
string measure_time_units(int64 milliseconds)
{
int64 seconds = milliseconds / 1000;
if(seconds < 1)
{
return milliseconds + " ms";
}
else if(seconds < 60)
{
int whole_seconds = int(seconds);
int ms = int(milliseconds % 1000);
return whole_seconds + " seconds, " + ms + " ms";
}
else if(seconds < 3600)
{
int minutes = int(seconds / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
else
{
int hours = int(seconds / 3600);
int minutes = int((seconds % 3600) / 60);
int remaining_seconds = int(seconds % 60);
int ms = int(milliseconds % 1000);
return hours + " hours, " + minutes + " minutes, " + remaining_seconds + " seconds, " + ms + " ms";
}
}
string script_get_path()
{
string scriptpath;
if(SCRIPT_COMPILED==false)
{
scriptpath=SCRIPT_CURRENT_FILE;
}
else
{
scriptpath=SCRIPT_EXECUTABLE;
}
return scriptpath;
}
string script_get_folder()
{
string path=script_get_path();
string[] spl=string_split(path, "\\", true);
spl.resize(spl.length()-1);
string folder;
for(uint i=0; i<spl.length(); i++)
{
folder+=spl[i];
if(i<spl.length()-1) folder+="\\";
}
return folder;
}
string string2file(string thing)
{
thing=string_replace(thing,"\\","/",true);
thing=string_replace(thing,"/"," ",true);
return thing;
}
string get_key_echo_description(int mode)
{
if (mode==textflag_none)
return "echo off";
else if (mode==textflag_characters)
return "echo characters";
else if (mode==textflag_words)
return "echo words";
else if (mode==textflag_characters_words)
return "echo both characters and words";
return "";
}
void key_echocheck(audio_form@ form)
{
if (key_pressed(KEY_F2))
{
echomode++;
if (echomode>3)
echomode=0;
form.set_default_keyboard_echo(echomode);
speak(get_key_echo_description(echomode));
}
}
