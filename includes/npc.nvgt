animal@[]animals(0);
class animal
{
bool dropitem, fireable, moveable, moveable2, spotted;
int amsound, defsound, hurtsound, spawnsound, stepsound, tilesound, wepsound;
int animalcard;
int anihealth;
double amlevel;
double amxp;
double animalhealth;
double animalmaxhealth;
int amx;
int amy;
int anirange;
int anirange2;
int anirange3;
int anirange4;
int damage;
int animaltime;
int firetime;
string animaltype;
timer animaltimer, firetimer;
animal(int ax,int ay,int anrange,int anrange2,int anrange3,int anrange4,double hp,double maxhp,int ac,int dm,int ft,int sp,double amlv,double axp,string at,bool amf,bool amt,bool amt2,bool dpm)
{
this.anihealth=hp;
amx=ax;
amy=ay;
anirange=anrange;
anirange2=anrange2;
anirange3=anrange3;
anirange4=anrange4;
animalhealth=hp;
animalmaxhealth=maxhp;
animalcard=ac;
damage=dm;
firetime=ft;
animaltime=sp;
amlevel=amlv;
amxp=axp;
animaltype=at;
fireable=amf;
moveable=amt;
moveable2=amt2;
dropitem=dpm;
spotted=false;
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*spawn*");
if(spawnsfx.length()!=0) spawnsound=animalpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],me.x,me.y,amx,amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
string[] amsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*taunt*");
if(amsfx.length()!=0) amsound=animalpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+amsfx[random(0,amsfx.length()-1)],me.x,me.y,amx,amy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void animalloop()
{
for(uint i=0; i<animals.length(); i++)
{
if(animals[i].animaltimer.elapsed>=animals[i].animaltime)
{
if(absolute(me.x-animals[i].amx)<=animals[i].anirange3 and absolute(me.y-animals[i].amy)<=animals[i].anirange4)
{
animals[i].spotted=true;
}
if(animals[i].spotted)
{
string[] amsteps=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/*step*");
if(animals[i].moveable==true and animals[i].stepsound==1 and paused==0 and amsteps.length()!=0) animals[i].tilesound=animalpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/"+amsteps[random(0,amsteps.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
animalpool.update_sound_2d(animals[i].amsound,animals[i].amx,animals[i].amy);
animals[i].animaltimer.restart();
if(animals[i].amx<me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx++;
animals[i].stepsound=1;
}
if(animals[i].amx>me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx--;
animals[i].stepsound=1;
}
if(animals[i].amy<me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy++;
animals[i].stepsound=1;
}
if(animals[i].amy>me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy--;
animals[i].stepsound=1;
}
}
}
if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
animals[i].stepsound=0;
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=animals[i].damage*animals[i].amlevel-shielddefence;
animals[i].firetimer.restart();
}
else if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==0 and paused==0)
{
animals[i].stepsound=0;
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/*hit*");
if(hitsfx.length()!=0) animals[i].wepsound=animalpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=animals[i].damage*animals[i].amlevel-defence;
hearttime-=animals[i].damage*animals[i].amlevel-defence;
animals[i].firetimer.restart();
}
if(animals[i].animalhealth<=0)
{
if(animals[i].animalcard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/*life*");
if(lifesfx.length()!=0) animalpool.play_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,false);
animals[i].animalhealth=animals[i].anihealth;
animals[i].animalcard-=1;
}
else if(animals[i].animalcard<=1 and paused==0)
{
animalpool.destroy_sound(animals[i].hurtsound);
animalpool.destroy_sound(animals[i].amsound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/*death*");
if(defsfx.length()!=0) animals[i].defsound=animalpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i].animaltype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=animals[i].amxp*animals[i].amlevel*xpmod;
kills+=1;
spawn_bodyfall(animals[i].amx, animals[i].amy, random(500,1000));
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and animals[i].dropitem==true) spawn_obj(animals[i].amx, animals[i].amy, 500, "health", healtype[random(0,healtype.length()-1)], true);
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
animals.remove_at(i);
return;
}
}
}
}
void spawn_animal(int x,int y,int animrange,int animrange2,int animrange3,int animrange4,double hp,double maxhp,int ac,int dm,int firetime,int animaltime,double amlevel,double xp,string animaltype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
animal an1(x,y,animrange,animrange2,animrange3,animrange4,hp,maxhp,ac,dm,firetime,animaltime,amlevel,xp,animaltype,fireable,moveable,moveable2,dropitem);
animals.insert_last(an1);
}
void destroy_all_animals()
{
for(uint i=0; i<animals.length(); i++)
{
animalpool.destroy_sound(animals[i].amsound);
}
animals.resize(0);
}

animalzone@[]animalzones(0);
class animalzone
{
double minx, maxx;
int amy;
int spawntime;
string animaltype;
timer spawntimer;
animalzone(double mx,double mx2,int ay,int sp,string at)
{
minx=mx;
maxx=mx2;
amy=ay;
spawntime=sp;
animaltype=at;
}
}
void animalzoneloop()
{
for(uint i=0; i<animalzones.length(); i++)
{
if(animalzones[i].minx<=me.x and animalzones[i].maxx>=me.x and animalzones[i].amy==me.y and animalzones[i].spawntimer.elapsed>=animalzones[i].spawntime)
{
string[] animaltype=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
string amtype = animalzones[i].animaltype;
if(amtype=="random" && animaltype.length()>0)
{
amtype=animaltype[random(0,animaltype.length()-1)];
}
spawn_animal(random(animalzones[i].minx, animalzones[i].maxx), animalzones[i].amy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, amtype, true, true, random_bool(), random_bool());
animalzones[i].spawntimer.restart();
}
}
}
void spawn_animalzone(double x1,double x2,int y,int sp,string type)
{
animalzone az1(x1,x2,y,sp,type);
animalzones.insert_last(az1);
}
void destroy_all_animalzones()
{
animalzones.resize(0);
}

boss@[]bosses(0);
class boss
{
bool dropitem, fireable, moveable, moveable2, regenhp, spotted, telleble, telleble2;
int bossesound, healsound, defsound, firesound, hurtsound, spawnsound, stepsound, tilesound, telsound, wepsound;
int bosscard;
int bossehealth;
double bosslevel;
double bossxp;
double bosshealth;
double bossmaxhealth;
int bossx;
int bossy;
int boserange;
int boserange2;
int boserange3;
int boserange4;
int damage;
int bosstime;
int firetime;
int healtime;
int launchtime;
int teltime;
string bosstype;
string bosstype2;
string bosstype3;
timer bosstimer, firetimer, healtimer, launchtimer, teltimer;
boss(int bx,int by,int bsrange,int bsrange2,int bsrange3,int bsrange4,double hp,double maxhp,int bc,int dm,int ft,int lt,int sp,int tlt,int hlt,double blv,double bxp,string bt,string bs,string bs2,bool bf,bool bm,bool bm2,bool tb,bool tb2,bool rgp,bool dpm)
{
this.bossehealth=hp;
bossx=bx;
bossy=by;
boserange=bsrange;
boserange2=bsrange2;
boserange3=bsrange3;
boserange4=bsrange4;
bosshealth=hp;
bossmaxhealth=maxhp;
bosscard=bc;
damage=dm;
firetime=ft;
launchtime=lt;
bosstime=sp;
teltime=tlt;
healtime=hlt;
bosslevel=blv;
bossxp=bxp;
bosstype=bt;
bosstype2=bs;
bosstype3=bs2;
fireable=bf;
moveable=bm;
moveable2=bm2;
telleble=tb;
telleble2=tb2;
regenhp=rgp;
dropitem=dpm;
spotted=false;
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*spawn*");
if(spawnsfx.length()!=0) spawnsound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,painvolume,painpitch,false);
string[] bosesfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*taunt*");
if(bosesfx.length()!=0) bossesound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+bosesfx[random(0,bosesfx.length()-1)],me.x,me.y,bossx,bossy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
void regenerate_bosshp(double hp)
{
string[] healsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*heal*");
if(healsfx.length()!=0) healsound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+healsfx[random(0,healsfx.length()-1)],me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bosshealth+=hp;
bossmaxhealth+=hp;
}
void spawn_boss_obj(int objnum)
{
if(objnum==1)
{
if(bosstype2=="animal" and facing=="left") spawn_animal(bossx-1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
if(bosstype2=="animal" and facing=="right") spawn_animal(bossx+1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
}
if(objnum==2)
{
if(bosstype2=="enemie" and facing=="left") spawn_enemie(bossx-1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
if(bosstype2=="enemie" and facing=="right") spawn_enemie(bossx+1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
}
if(objnum==3)
{
if(bosstype2=="projectile" and facing=="left") spawn_projectile(bossx-1, bossy, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), bosslevel, 1*level, bosstype3, true, true);
if(bosstype2=="projectile" and facing=="right") spawn_projectile(bossx+1, bossy, 1, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), bosslevel, 1*level, bosstype3, true, true);
}
if(objnum==4)
{
if(bosstype2=="robot" and facing=="left") spawn_robot(bossx-1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
if(bosstype2=="robot" and facing=="right") spawn_robot(bossx+1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
}
if(objnum==5)
{
if(bosstype2=="turret" and facing=="left") spawn_turret(bossx-1, bossy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), launchtime, random(100, 1000), bosslevel, 1*level, bosstype, bosstype2, bosstype3, true, true, random_bool());
if(bosstype2=="turret" and facing=="right") spawn_turret(bossx+1, bossy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), launchtime, random(100, 1000), bosslevel, 1*level, bosstype, bosstype2, bosstype3, true, true, random_bool());
}
if(objnum==6)
{
if(bosstype2=="zombie" and facing=="left") spawn_zombie(bossx-1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
if(bosstype2=="zombie" and facing=="right") spawn_zombie(bossx+1, bossy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), bosslevel, 1*level, bosstype3, true, true, random_bool(), random_bool());
}
}
void teleport_boss(int bx,int by)
{
string[] telsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*tel*");
if(telsfx.length()!=0) telsound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+telsfx[random(0,telsfx.length()-1)],me.x,me.y,bossx,bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bossx=bx;
bossy=by;
}
}
void bossloop()
{
for(uint i=0; i<bosses.length(); i++)
{
if(bosses[i].healtimer.elapsed>=bosses[i].healtime)
{
if(bosses[i].regenhp==true) bosses[i].regenerate_bosshp(random(bosses[i].bossmaxhealth/60, bosses[i].bossmaxhealth/30));
bosses[i].healtimer.restart();
}
if(bosses[i].launchtimer.elapsed>=bosses[i].launchtime)
{
string[] launchsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*launch*");
if(launchsfx.length()!=0 and facing=="left" or facing=="right") bosses[i].firesound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+launchsfx[random(0,launchsfx.length()-1)],me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
bosses[i].spawn_boss_obj(random(1,6));
bosses[i].launchtimer.restart();
}
if(bosses[i].teltimer.elapsed>=bosses[i].teltime)
{
string[] telsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*tel*");
if(telsfx.length()!=0) bosses[i].telsound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+telsfx[random(0,telsfx.length()-1)],me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(bosses[i].telleble==true) bosses[i].teleport_boss(random(0, maxx), bosses[i].bossy);
if(bosses[i].telleble2==true) bosses[i].teleport_boss(random(0, maxx), random(0, maxy));
bosspool.update_sound_2d(bosses[i].bossesound,bosses[i].bossx,bosses[i].bossy);
bosspool.update_sound_2d(bosses[i].telsound,bosses[i].bossx,bosses[i].bossy);
bosses[i].teltimer.restart();
}
if(bosses[i].bosstimer.elapsed>=bosses[i].bosstime)
{
if(absolute(me.x-bosses[i].bossx)<=bosses[i].boserange3 and absolute(me.y-bosses[i].bossy)<=bosses[i].boserange4)
{
bosses[i].spotted=true;
}
if(bosses[i].spotted)
{
string[] bossesteps=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*step*");
if(bosses[i].moveable==true and bosses[i].stepsound==1 and paused==0 and bossesteps.length()!=0) bosses[i].tilesound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+bossesteps[random(0,bossesteps.length()-1)],me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
bosspool.update_sound_2d(bosses[i].bossesound,bosses[i].bossx,bosses[i].bossy);
bosspool.update_sound_2d(bosses[i].telsound,bosses[i].bossx,bosses[i].bossy);
bosses[i].bosstimer.restart();
if(bosses[i].bossx<me.x and bosses[i].moveable==true and paused==0)
{
bosses[i].bossx++;
bosses[i].stepsound=1;
}
if(bosses[i].bossx>me.x and bosses[i].moveable==true and paused==0)
{
bosses[i].bossx--;
bosses[i].stepsound=1;
}
if(bosses[i].bossy<me.y and bosses[i].moveable2==true and paused==0)
{
bosses[i].bossy++;
bosses[i].stepsound=1;
}
if(bosses[i].bossy>me.y and bosses[i].moveable2==true and paused==0)
{
bosses[i].bossy--;
bosses[i].stepsound=1;
}
}
}
if(absolute(me.x-bosses[i].bossx)<=bosses[i].boserange and absolute(me.y-bosses[i].bossy)<=bosses[i].boserange2 and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
bosses[i].stepsound=0;
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=bosses[i].damage*bosses[i].bosslevel-shielddefence;
bosses[i].firetimer.restart();
}
else if(absolute(me.x-bosses[i].bossx)<=bosses[i].boserange and absolute(me.y-bosses[i].bossy)<=bosses[i].boserange2 and bosses[i].firetimer.elapsed>=bosses[i].firetime and bosses[i].fireable==true and shieldon==0 and paused==0)
{
bosses[i].stepsound=0;
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*hit*");
if(hitsfx.length()!=0) bosses[i].wepsound=bosspool.play_stationary_extended("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=bosses[i].damage*bosses[i].bosslevel-defence;
hearttime-=bosses[i].damage*bosses[i].bosslevel-defence;
bosses[i].firetimer.restart();
}
if(bosses[i].bosshealth<=0)
{
if(bosses[i].bosscard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*life*");
if(lifesfx.length()!=0) bosspool.play_2d("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,bosses[i].bossx,bosses[i].bossy,false);
bosses[i].bosshealth=bosses[i].bossehealth;
bosses[i].bosscard-=1;
}
else if(bosses[i].bosscard<=1 and paused==0)
{
bosspool.destroy_sound(bosses[i].hurtsound);
bosspool.destroy_sound(bosses[i].bossesound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/*death*");
if(defsfx.length()!=0) bosses[i].defsound=bosspool.play_extended_2d("data/sounds/"+soundpack+"/npc/boss/"+bosses[i].bosstype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,bosses[i].bossx,bosses[i].bossy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=bosses[i].bossxp*bosses[i].bosslevel*xpmod;
kills+=1;
spawn_bodyfall(bosses[i].bossx, bosses[i].bossy, random(500,1000));
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and bosses[i].dropitem==true) spawn_obj(bosses[i].bossx, bosses[i].bossy, 500, "health", healtype[random(0,healtype.length()-1)], true);
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
bosses.remove_at(i);
return;
}
}
}
}
void spawn_boss(int x,int y,int bossrange,int bossrange2,int bossrange3,int bossrange4,double hp,double maxhp,int bc,int dm,int firetime,int launchtime,int bosstime,int teltime,int healtime,double bosslevel,double xp,string bosstype,string bosstype2,string bosstype3,bool fireable,bool moveable,bool moveable2,bool telleble,bool telleble2,bool regenhp,bool dropitem)
{
boss bs1(x,y,bossrange,bossrange2,bossrange3,bossrange4,hp,maxhp,bc,dm,firetime,launchtime,bosstime,teltime,healtime,bosslevel,xp,bosstype,bosstype2,bosstype3,fireable,moveable,moveable2,telleble,telleble2,regenhp,dropitem);
bosses.insert_last(bs1);
}
void destroy_all_bosses()
{
for(uint i=0; i<bosses.length(); i++)
{
bosspool.destroy_sound(bosses[i].bossesound);
}
bosses.resize(0);
}

enemie@[]enemies(0);
class enemie
{
bool dropitem, fireable, moveable, moveable2, spotted;
int emsound, defsound, hurtsound, spawnsound, stepsound, tilesound, wepsound;
int enemiecard;
int enehealth;
double emlevel;
double emxp;
double enemiehealth;
double enemiemaxhealth;
int emx;
int emy;
int enerange;
int enerange2;
int enerange3;
int enerange4;
int damage;
int enemietime;
int firetime;
string enemietype;
timer enemietimer, firetimer;
enemie(int ex,int ey,int enrange,int enrange2,int enrange3,int enrange4,double hp,double maxhp,int ec,int dm,int ft,int sp,double emlv,double exp,string et,bool emf,bool emt,bool emt2,bool dpm)
{
this.enehealth=hp;
emx=ex;
emy=ey;
enerange=enrange;
enerange2=enrange2;
enerange3=enrange3;
enerange4=enrange4;
enemiehealth=hp;
enemiemaxhealth=maxhp;
enemiecard=ec;
damage=dm;
firetime=ft;
enemietime=sp;
emlevel=emlv;
emxp=exp;
enemietype=et;
fireable=emf;
moveable=emt;
moveable2=emt2;
dropitem=dpm;
spotted=false;
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemietype+"/*spawn*");
if(spawnsfx.length()!=0) spawnsound=enemiepool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemietype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],me.x,me.y,emx,emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
string[] emsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemietype+"/*taunt*");
if(emsfx.length()!=0) emsound=enemiepool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemietype+"/"+emsfx[random(0,emsfx.length()-1)],me.x,me.y,emx,emy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void eneloop()
{
for(uint i=0; i<enemies.length(); i++)
{
if(enemies[i].enemietimer.elapsed>=enemies[i].enemietime)
{
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange3 and absolute(me.y-enemies[i].emy)<=enemies[i].enerange4)
{
enemies[i].spotted=true;
}
if(enemies[i].spotted)
{
string[] tilers=find_sound("data/sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/*step*");
if(enemies[i].moveable==true and enemies[i].stepsound==1 and paused==0 and tilers.length()!=0) tilesound=p.play_extended_2d("data/sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/"+tilers[random(0,tilers.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
enemiepool.update_sound_2d(enemies[i].emsound,enemies[i].emx,enemies[i].emy);
enemies[i].enemietimer.restart();
if(enemies[i].emx<me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx++;
enemies[i].stepsound=1;
}
if(enemies[i].emx>me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx--;
enemies[i].stepsound=1;
}
if(enemies[i].emy<me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy++;
enemies[i].stepsound=1;
}
if(enemies[i].emy>me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy--;
enemies[i].stepsound=1;
}
}
}
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
enemies[i].stepsound=0;
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=enemies[i].damage*enemies[i].emlevel-shielddefence;
enemies[i].firetimer.restart();
}
else if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==0 and paused==0)
{
enemies[i].stepsound=0;
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/*hit*");
if(hitsfx.length()!=0) enemies[i].wepsound=enemiepool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=enemies[i].damage*enemies[i].emlevel-defence;
hearttime-=enemies[i].damage*enemies[i].emlevel-defence;
enemies[i].firetimer.restart();
}
if(enemies[i].enemiehealth<=0)
{
if(enemies[i].enemiecard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/*life*");
if(lifesfx.length()!=0) enemiepool.play_2d("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,false);
enemies[i].enemiehealth=enemies[i].enehealth;
enemies[i].enemiecard-=1;
}
else if(enemies[i].enemiecard<=1 and paused==0)
{
enemiepool.destroy_sound(enemies[i].hurtsound);
enemiepool.destroy_sound(enemies[i].emsound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/*death*");
if(defsfx.length()!=0) enemies[i].defsound=enemiepool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i].enemietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=enemies[i].emxp*enemies[i].emlevel*xpmod;
kills+=1;
spawn_bodyfall(enemies[i].emx, enemies[i].emy, random(500,1000));
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and enemies[i].dropitem==true) spawn_obj(enemies[i].emx, enemies[i].emy, 500, "health", healtype[random(0,healtype.length()-1)], true);
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
enemies.remove_at(i);
return;
}
}
}
}
void spawn_enemie(int x,int y,int enemrange,int enemrange2,int enemrange3,int enemrange4,double hp,double maxhp,int ec,int dm,int firetime,int enemietime,double emlevel,double xp,string enemietype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
enemie en1(x,y,enemrange,enemrange2,enemrange3,enemrange4,hp,maxhp,ec,dm,firetime,enemietime,emlevel,xp,enemietype,fireable,moveable,moveable2,dropitem);
enemies.insert_last(en1);
}
void destroy_all_enemies()
{
for(uint i=0; i<enemies.length(); i++)
{
enemiepool.destroy_sound(enemies[i].emsound);
}
enemies.resize(0);
}

enemiezone@[]enemiezones(0);
class enemiezone
{
double minx, maxx;
int emy;
int spawntime;
string enemietype;
timer spawntimer;
enemiezone(double mx,double mx2,int ey,int sp,string et)
{
minx=mx;
maxx=mx2;
emy=ey;
spawntime=sp;
enemietype=et;
}
}
void enemiezoneloop()
{
for(uint i=0; i<enemiezones.length(); i++)
{
if(enemiezones[i].minx<=me.x and enemiezones[i].maxx>=me.x and enemiezones[i].emy==me.y and enemiezones[i].spawntimer.elapsed>=enemiezones[i].spawntime)
{
string[] enemietype=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
string emtype = enemiezones[i].enemietype;
if(emtype=="random" && enemietype.length()>0)
{
emtype=enemietype[random(0,enemietype.length()-1)];
}
spawn_enemie(random(enemiezones[i].minx, enemiezones[i].maxx), enemiezones[i].emy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, emtype, true, true, random_bool(), random_bool());
enemiezones[i].spawntimer.restart();
}
}
}
void spawn_enemiezone(double x1,double x2,int y,int sp,string type)
{
enemiezone ez1(x1,x2,y,sp,type);
enemiezones.insert_last(ez1);
}
void destroy_all_enemiezones()
{
enemiezones.resize(0);
}

projectile@[]projectiles(0);
class projectile
{
bool fireable, moveable;
int defsound, hurtsound, projsound, wepsound;
double projlevel;
double poxp;
int projcard;
int projehealth;
double projhealth;
double projmaxhealth;
int prox;
int proy;
int projdir;
int damage;
int firetime=projtime;
int projtime;
string projtype;
timer firetimer, projtimer;
projectile(int px,int py,int dir,double hp,double maxhp,int pc,int dm,int sp,double plv,double pxp,string pt,bool pf,bool pm)
{
this.projehealth=hp;
prox=px;
proy=py;
projdir=dir;
projhealth=hp;
projmaxhealth=maxhp;
projcard=pc;
damage=dm;
projtime=sp;
projlevel=plv;
poxp=pxp;
projtype=pt;
fireable=pf;
moveable=pm;
string[] prosfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*loop*");
if(prosfx.length()!=0) projsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+prosfx[random(0,prosfx.length()-1)],me.x,me.y,prox,proy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void projloop()
{
for(uint i=0; i<projectiles.length(); i++)
{
if(projectiles[i].projtimer.elapsed>=projectiles[i].projtime)
{
projpool.update_sound_2d(projectiles[i].projsound,projectiles[i].prox,projectiles[i].proy);
projectiles[i].projtimer.restart();
if (projectiles[i].prox<=maxx and projectiles[i].projtimer.elapsed>=projectiles[i].projtime and projectiles[i].projdir==1 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox++;
projectiles[i].projtimer.restart();
}
else if (projectiles[i].prox>=0 and projectiles[i].projtimer.elapsed>=projectiles[i].projtime and projectiles[i].projdir==0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox--;
projectiles[i].projtimer.restart();
}
if (projectiles[i].projdir==1 and projectiles[i].prox>maxx and projectiles[i].moveable==true and paused==0)
{
projectiles[i].projdir=0;
}
else if (projectiles[i].projdir==0 and projectiles[i].prox<=0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].projdir=1;
}
if(projectiles[i].projdir==1 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox++;
}
else if (projectiles[i].projdir==0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox--;
}
if(me.x==projectiles[i].prox and me.y==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0) projectiles[i].wepsound=projpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
shieldstrength-=projectiles[i].damage*projectiles[i].projlevel-shielddefence;
projectiles[i].firetimer.restart();
}
else if(me.x==projectiles[i].prox and me.y==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0) projectiles[i].wepsound=projpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=projectiles[i].damage*projectiles[i].projlevel-defence;
hearttime-=projectiles[i].damage*projectiles[i].projlevel-defence;
projectiles[i].firetimer.restart();
}
for(uint i1=0; i1<animals.length(); i1++)
{
if(animals[i1].amx==projectiles[i].prox and animals[i1].amy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i1].animaltype+"/*hurt*");
if(hurtsfx.length()!=0) animals[i1].hurtsound=animalpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/animals/"+animals[i1].animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,animals[i1].amx,animals[i1].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
animals[i1].animalhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i2=0; i2<enemies.length(); i2++)
{
if(enemies[i2].emx==projectiles[i].prox and enemies[i2].emy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i2].enemietype+"/*hurt*");
if(hurtsfx.length()!=0) enemies[i2].hurtsound=enemiepool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemies[i2].enemietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,enemies[i2].emx,enemies[i2].emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
enemies[i2].enemiehealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i3=0; i3<robots.length(); i3++)
{
if(robots[i3].robx==projectiles[i].prox and robots[i3].roby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i3].robottype+"/*hurt*");
if(hurtsfx.length()!=0) robots[i3].hurtsound=robpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i3].robottype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,robots[i3].robx,robots[i3].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
robots[i3].robothealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i4=0; i4<zombies.length(); i4++)
{
if(zombies[i4].zombx==projectiles[i].prox and zombies[i4].zomby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i4].zombietype+"/*hurt*");
if(hurtsfx.length()!=0) zombies[i4].hurtsound=zombpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i4].zombietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,zombies[i4].zombx,zombies[i4].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
zombies[i4].zombiehealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
if(projectiles[i].projhealth<=0)
{
if(projectiles[i].projcard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*life*");
if(lifesfx.length()!=0) projpool.play_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,false);
projectiles[i].projhealth=projectiles[i].projehealth;
projectiles[i].projcard-=1;
}
else if(projectiles[i].projcard<=1 and paused==0)
{
projpool.destroy_sound(projectiles[i].hurtsound);
projpool.destroy_sound(projectiles[i].projsound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/*death*");
if(defsfx.length()!=0) projectiles[i].defsound=projpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projectiles[i].projtype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=projectiles[i].poxp*projectiles[i].projlevel*xpmod;
kills+=1;
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
projectiles.remove_at(i);
return;
}
}
}
}
}
void spawn_projectile(int x,int y,int dir,double hp,double maxhp,int pc,int dm,int projtime,double projlevel,double xp,string projtype,bool fireable,bool moveable)
{
projectile p1(x,y,dir,hp,maxhp,pc,dm,projtime,projlevel,xp,projtype,fireable,moveable);
projectiles.insert_last(p1);
}
void destroy_all_projectiles()
{
for(uint i=0; i<projectiles.length(); i++)
{
projpool.destroy_sound(projectiles[i].projsound);
}
projectiles.resize(0);
}

projzone@[]projzones(0);
class projzone
{
double minx, maxx;
int proy;
int spawntime;
string projtype;
timer spawntimer;
projzone(double mx,double mx2,int py,int sp,string pt)
{
minx=mx;
maxx=mx2;
proy=py;
spawntime=sp;
projtype=pt;
}
}
void projzoneloop()
{
for(uint i=0; i<projzones.length(); i++)
{
if(projzones[i].minx<=me.x and projzones[i].maxx>=me.x and projzones[i].proy==me.y and projzones[i].spawntimer.elapsed>=projzones[i].spawntime)
{
string[] projtype=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
string potype=projzones[i].projtype;
if(potype=="random" && projtype.length()>0)
{
potype=projtype[random(0,projtype.length()-1)];
}
spawn_projectile(random(projzones[i].minx, projzones[i].maxx), projzones[i].proy, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, potype, true, true);
projzones[i].spawntimer.restart();
}
}
}
void spawn_projzone(double x1,double x2,int y,int sp,string type)
{
projzone pz1(x1,x2,y,sp,type);
projzones.insert_last(pz1);
}
void destroy_all_projzones()
{
projzones.resize(0);
}

robot@[]robots(0);
class robot
{
bool dropitem, fireable, moveable, moveable2, spotted;
int robsound, defsound, hurtsound, stepsound, spawnsound, tilesound, wepsound;
int robotcard;
int robhealth;
double roblevel;
double robxp;
double robothealth;
double robotmaxhealth;
int robx;
int roby;
int roborange;
int roborange2;
int roborange3;
int roborange4;
int damage;
int robottime;
int firetime;
string robottype;
timer robottimer, firetimer;
robot(int rx,int ry,int rbrange,int rbrange2,int rbrange3,int rbrange4,double hp,double maxhp,int rc,int dm,int ft,int sp,double roblv,double rxp,string rt,bool robf,bool robt,bool robt2,bool dpm)
{
this.robhealth=hp;
robx=rx;
roby=ry;
roborange=rbrange;
roborange2=rbrange2;
roborange3=rbrange3;
roborange4=rbrange4;
robothealth=hp;
robotmaxhealth=maxhp;
robotcard=rc;
damage=dm;
firetime=ft;
robottime=sp;
roblevel=roblv;
robxp=rxp;
robottype=rt;
fireable=robf;
moveable=robt;
moveable2=robt2;
dropitem=dpm;
spotted=false;
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*spawn*");
if(spawnsfx.length()!=0) spawnsound=robpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],me.x,me.y,robx,roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
string[] robsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*taunt*");
if(robsfx.length()!=0) robsound=robpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+robsfx[random(0,robsfx.length()-1)],me.x,me.y,robx,roby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void robloop()
{
for(uint i=0; i<robots.length(); i++)
{
if(robots[i].robottimer.elapsed>=robots[i].robottime)
{
if(absolute(me.x-robots[i].robx)<=robots[i].roborange3 and absolute(me.y-robots[i].roby)<=robots[i].roborange4)
{
robots[i].spotted=true;
}
if(robots[i].spotted)
{
string[] robsteps=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/*step*");
if(robots[i].moveable==true and robots[i].stepsound==1 and paused==0 and robsteps.length()!=0) robots[i].tilesound=robpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/"+robsteps[random(0,robsteps.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
robpool.update_sound_2d(robots[i].robsound,robots[i].robx,robots[i].roby);
robots[i].robottimer.restart();
if(robots[i].robx<me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx++;
robots[i].stepsound=1;
}
if(robots[i].robx>me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx--;
robots[i].stepsound=1;
}
if(robots[i].roby<me.y and robots[i].moveable2==true and paused==0)
{
robots[i].roby++;
robots[i].stepsound=1;
}
if(robots[i].roby>me.y and robots[i].moveable2==true and paused==0)
{
robots[i].roby--;
robots[i].stepsound=1;
}
}
}
if(absolute(me.x-robots[i].robx)<=robots[i].roborange and absolute(me.y-robots[i].roby)<=robots[i].roborange2 and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
robots[i].stepsound=0;
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=robots[i].damage*robots[i].roblevel-shielddefence;
robots[i].firetimer.restart();
}
else if(absolute(me.x-robots[i].robx)<=robots[i].roborange and absolute(me.y-robots[i].roby)<=robots[i].roborange2 and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==0 and paused==0)
{
robots[i].stepsound=0;
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/*hit*");
if(hitsfx.length()!=0) robots[i].wepsound=robpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=robots[i].damage*robots[i].roblevel-defence;
hearttime-=robots[i].damage*robots[i].roblevel-defence;
robots[i].firetimer.restart();
}
if(robots[i].robothealth<=0)
{
if(robots[i].robotcard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/*life*");
if(lifesfx.length()!=0) robpool.play_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,false);
robots[i].robothealth=robots[i].robhealth;
robots[i].robotcard-=1;
}
else if(robots[i].robotcard<=1 and paused==0)
{
robpool.destroy_sound(robots[i].hurtsound);
robpool.destroy_sound(robots[i].robsound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/*death*");
if(defsfx.length()!=0) robots[i].defsound=robpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/robots/"+robots[i].robottype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=robots[i].robxp*robots[i].roblevel*xpmod;
kills+=1;
spawn_bodyfall(robots[i].robx, robots[i].roby, random(500,1000));
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and robots[i].dropitem==true) spawn_obj(robots[i].robx, robots[i].roby, 500, "health", healtype[random(0,healtype.length()-1)], true);
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
robots.remove_at(i);
return;
}
}
}
}
void spawn_robot(int x,int y,int robotrange,int robotrange2,int robotrange3,int robotrange4,double hp,double maxhp,int rc,int dm,int firetime,int robottime,double roblevel,double xp,string robottype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
robot rb1(x,y,robotrange,robotrange2,robotrange3,robotrange4,hp,maxhp,rc,dm,firetime,robottime,roblevel,xp,robottype,fireable,moveable,moveable2,dropitem);
robots.insert_last(rb1);
}
void destroy_all_robots()
{
for(uint i=0; i<robots.length(); i++)
{
robpool.destroy_sound(robots[i].robsound);
}
robots.resize(0);
}

robotzone@[]robotzones(0);
class robotzone
{
double minx, maxx;
int roby;
int spawntime;
string robtype;
timer spawntimer;
robotzone(double mx,double mx2,int ry,int sp,string rt)
{
minx=mx;
maxx=mx2;
roby=ry;
spawntime=sp;
robtype=rt;
}
}
void robotzoneloop()
{
for(uint i=0; i<robotzones.length(); i++)
{
if(robotzones[i].minx<=me.x and robotzones[i].maxx>=me.x and robotzones[i].roby==me.y and robotzones[i].spawntimer.elapsed>=robotzones[i].spawntime)
{
string[] robtype=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
string rotype = robotzones[i].robtype;
if(rotype=="random" && robtype.length()>0)
{
rotype=robtype[random(0,robtype.length()-1)];
}
spawn_robot(random(robotzones[i].minx, robotzones[i].maxx), robotzones[i].roby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, rotype, true, true, random_bool(), random_bool());
robotzones[i].spawntimer.restart();
}
}
}
void spawn_robotzone(double x1,double x2,int y,int sp,string type)
{
robotzone rz1(x1,x2,y,sp,type);
robotzones.insert_last(rz1);
}
void destroy_all_robotzones()
{
robotzones.resize(0);
}

turret@[]turrets(0);
class turret
{
bool fireable, moveable, moveable2;
int defsound, firesound, hurtsound, tursound, wepsound;
double turlevel;
double turxp;
int turcard;
int turehealth;
double turhealth;
double turmaxhealth;
int turx;
int tury;
int damage;
int firetime;
int launchtime;
int turtime;
string turtype;
string turtype2;
string turtype3;
timer firetimer, launchtimer, turtimer;
turret(int tx,int ty,double hp,double maxhp,int tc,int dm,int ft,int lt,int sp,double tlv,double txp,string tt,string ts,string ts2,bool tf,bool tm,bool tm2)
{
this.turehealth=hp;
turx=tx;
tury=ty;
turhealth=hp;
turmaxhealth=maxhp;
turcard=tc;
damage=dm;
firetime=ft;
launchtime=lt;
turtime=sp;
turlevel=tlv;
turxp=txp;
turtype=tt;
turtype2=ts;
turtype3=ts2;
fireable=tf;
moveable=tm;
moveable2=tm2;
string[] tursfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*loop*");
if(tursfx.length()!=0) tursound=turpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+tursfx[random(0,tursfx.length()-1)],me.x,me.y,turx,tury,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void turretloop()
{
for(uint i=0; i<turrets.length(); i++)
{
if(turrets[i].launchtimer.elapsed>=turrets[i].launchtime)
{
string[] launchsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/*launch*");
if(launchsfx.length()!=0 and facing=="left" or facing=="right") turrets[i].firesound=turpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/"+launchsfx[random(0,launchsfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(turrets[i].turtype2=="animal" and facing=="left") spawn_animal(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="animal" and facing=="right") spawn_animal(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="enemie" and facing=="left") spawn_enemie(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="enemie" and facing=="right") spawn_enemie(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="projectile" and facing=="left") spawn_projectile(turrets[i].turx-1, turrets[i].tury, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true);
if(turrets[i].turtype2=="projectile" and facing=="right") spawn_projectile(turrets[i].turx+1, turrets[i].tury, 1, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true);
if(turrets[i].turtype2=="robot" and facing=="left") spawn_robot(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="robot" and facing=="right") spawn_robot(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="zombie" and facing=="left") spawn_zombie(turrets[i].turx-1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
if(turrets[i].turtype2=="zombie" and facing=="right") spawn_zombie(turrets[i].turx+1, turrets[i].tury, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, random_bool(), random_bool());
turpool.update_sound_2d(turrets[i].firesound,turrets[i].turx,turrets[i].tury);
turrets[i].launchtimer.restart();
}
if(turrets[i].turtimer.elapsed>=turrets[i].turtime)
{
turpool.update_sound_2d(turrets[i].tursound,turrets[i].turx,turrets[i].tury);
turrets[i].turtimer.restart();
if(turrets[i].turx<me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx++;
}
if(turrets[i].turx>me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx--;
}
if(turrets[i].tury<me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury++;
}
if(turrets[i].tury>me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury--;
}
}
if(me.x==turrets[i].turx and me.y==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=turrets[i].damage*turrets[i].turlevel-shielddefence;
turrets[i].firetimer.restart();
}
else if(me.x==turrets[i].turx and me.y==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/*hit*");
if(hitsfx.length()!=0) turrets[i].wepsound=turpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=turrets[i].damage*turrets[i].turlevel-defence;
hearttime-=2*turrets[i].damage*turrets[i].turlevel-defence;
turrets[i].firetimer.restart();
}
if(turrets[i].turhealth<=0)
{
if(turrets[i].turcard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/*life*");
if(lifesfx.length()!=0) turpool.play_2d("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,false);
turrets[i].turhealth=turrets[i].turehealth;
turrets[i].turcard-=1;
}
else if(turrets[i].turcard<=1 and paused==0)
{
turpool.destroy_sound(turrets[i].hurtsound);
turpool.destroy_sound(turrets[i].tursound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/*death*");
if(defsfx.length()!=0) turrets[i].defsound=turpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/turrets/"+turrets[i].turtype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=turrets[i].turxp*turrets[i].turlevel*xpmod;
kills+=1;
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
turrets.remove_at(i);
return;
}
}
}
}
void spawn_turret(int x,int y,double hp,double maxhp,int tc,int dm,int firetime,int launchtime,int turtime,double turlevel,double xp,string turtype,string turtype2,string turtype3,bool fireable,bool moveable,bool moveable2)
{
turret t1(x,y,hp,maxhp,tc,dm,firetime,launchtime,turtime,turlevel,xp,turtype,turtype2,turtype3,fireable,moveable,moveable2);
turrets.insert_last(t1);
}
void destroy_all_turrets()
{
for(uint i=0; i<turrets.length(); i++)
{
turpool.destroy_sound(turrets[i].tursound);
}
turrets.resize(0);
}

zombie@[]zombies(0);
class zombie
{
bool dropitem, fireable, moveable, moveable2, spotted;
int zombsound, defsound, hurtsound, stepsound, spawnsound, tilesound, wepsound;
int zombiecard;
int zombhealth;
double zomblevel;
double zombxp;
double zombiehealth;
double zombiemaxhealth;
int zombx;
int zomby;
int zombirange;
int zombirange2;
int zombirange3;
int zombirange4;
int damage;
int zombietime;
int firetime;
string zombietype;
timer zombietimer, firetimer;
zombie(int zx,int zy,int zbrange,int zbrange2,int zbrange3,int zbrange4,double hp,double maxhp,int zc,int dm,int ft,int sp,double zomblv,double zxp,string zt,bool zombf,bool zombt,bool zombt2,bool dpm)
{
this.zombhealth=hp;
zombx=zx;
zomby=zy;
zombirange=zbrange;
zombirange2=zbrange2;
zombirange3=zbrange3;
zombirange4=zbrange4;
zombiehealth=hp;
zombiemaxhealth=maxhp;
zombiecard=zc;
damage=dm;
firetime=ft;
zombietime=sp;
zomblevel=zomblv;
zombxp=zxp;
zombietype=zt;
fireable=zombf;
moveable=zombt;
moveable2=zombt2;
dropitem=dpm;
spotted=false;
string[] spawnsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*spawn*");
if(spawnsfx.length()!=0) spawnsound=zombpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],me.x,me.y,zombx,zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
string[] zombsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*taunt*");
if(zombsfx.length()!=0) zombsound=zombpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+zombsfx[random(0,zombsfx.length()-1)],me.x,me.y,zombx,zomby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void zombloop()
{
for(uint i=0; i<zombies.length(); i++)
{
if(zombies[i].zombietimer.elapsed>=zombies[i].zombietime)
{
if(abs(me.x-zombies[i].zombx)<=zombies[i].zombirange3 and abs(me.y-zombies[i].zomby)<=zombies[i].zombirange4)
{
zombies[i].spotted=true;
}
if(zombies[i].spotted)
{
string[] zombsteps=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/*step*");
if(zombies[i].moveable==true and zombies[i].stepsound==1 and paused==0 and zombsteps.length()!=0) zombies[i].tilesound=zombpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/"+zombsteps[random(0,zombsteps.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
zombpool.update_sound_2d(zombies[i].zombsound,zombies[i].zombx,zombies[i].zomby);
zombies[i].zombietimer.restart();
if(zombies[i].zombx<me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx++;
zombies[i].stepsound=1;
}
if(zombies[i].zombx>me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx--;
zombies[i].stepsound=1;
}
if(zombies[i].zomby<me.y and zombies[i].moveable2==true and paused==0)
{
zombies[i].zomby++;
zombies[i].stepsound=1;
}
if(zombies[i].zomby>me.y and zombies[i].moveable2==true and paused==0)
{
zombies[i].zomby--;
zombies[i].stepsound=1;
}
}
}
if(absolute(me.x-zombies[i].zombx)<=zombies[i].zombirange and absolute(me.y-zombies[i].zomby)<=zombies[i].zombirange2 and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
zombies[i].stepsound=0;
string[] arqsfx=find_sound("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=zombies[i].damage*zombies[i].zomblevel-shielddefence;
zombies[i].firetimer.restart();
}
else if(absolute(me.x-zombies[i].zombx)<=zombies[i].zombirange and absolute(me.y-zombies[i].zomby)<=zombies[i].zombirange2 and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==0 and paused==0)
{
zombies[i].stepsound=0;
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/*hit*");
if(hitsfx.length()!=0) zombies[i].wepsound=zombpool.play_stationary_extended("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=zombies[i].damage*zombies[i].zomblevel-defence;
hearttime-=zombies[i].damage*zombies[i].zomblevel-defence;
zombies[i].firetimer.restart();
}
if(zombies[i].zombiehealth<=0)
{
if(zombies[i].zombiecard>=2 and paused==0)
{
string[] lifesfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/*life*");
if(lifesfx.length()!=0) zombpool.play_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,false);
zombies[i].zombiehealth=zombies[i].zombhealth;
zombies[i].zombiecard-=1;
}
else if(zombies[i].zombiecard<=1 and paused==0)
{
zombpool.destroy_sound(zombies[i].hurtsound);
zombpool.destroy_sound(zombies[i].zombsound);
string[] defsfx=find_sound("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/*death*");
if(defsfx.length()!=0) zombies[i].defsound=zombpool.play_extended_2d("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombies[i].zombietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=zombies[i].zombxp*zombies[i].zomblevel*xpmod;
kills+=1;
spawn_bodyfall(zombies[i].zombx, zombies[i].zomby, random(500,1000));
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
if(healtype.length()!=0 and zombies[i].dropitem==true) spawn_obj(zombies[i].zombx, zombies[i].zomby, 500, "health", healtype[random(0,healtype.length()-1)], true);
string[] killsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*kill*");
if(killsfx.length()!=0 and charkillsound==1) p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+killsfx[random(0,killsfx.length()-1)],false);
zombies.remove_at(i);
return;
}
}
}
}
void spawn_zombie(int x,int y,int zombierange,int zombierange2,int zombierange3,int zombierange4,double hp,double maxhp,int zc,int dm,int firetime,int zombietime,double zomblevel,double xp,string zombietype,bool fireable,bool moveable,bool moveable2,bool dropitem)
{
zombie zb1(x,y,zombierange,zombierange2,zombierange3,zombierange4,hp,maxhp,zc,dm,firetime,zombietime,zomblevel,xp,zombietype,fireable,moveable,moveable2,dropitem);
zombies.insert_last(zb1);
}
void destroy_all_zombies()
{
for(uint i=0; i<zombies.length(); i++)
{
zombpool.destroy_sound(zombies[i].zombsound);
}
zombies.resize(0);
}

zombiezone@[]zombiezones(0);
class zombiezone
{
double minx, maxx;
int zomby;
int spawntime;
string zombtype;
timer spawntimer;
zombiezone(double mx,double mx2,int zy,int sp,string zt)
{
minx=mx;
maxx=mx2;
zomby=zy;
spawntime=sp;
zombtype=zt;
}
}
void zombiezoneloop()
{
for(uint i=0; i<zombiezones.length(); i++)
{
if(zombiezones[i].minx<=me.x and zombiezones[i].maxx>=me.x and zombiezones[i].zomby==me.y and zombiezones[i].spawntimer.elapsed>=zombiezones[i].spawntime)
{
string[] zombtype=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
string zotype = zombiezones[i].zombtype;
if(zotype=="random" && zombtype.length()>0)
{
zotype=zombtype[random(0,zombtype.length()-1)];
}
spawn_zombie(random(zombiezones[i].minx, zombiezones[i].maxx), zombiezones[i].zomby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zotype, true, true, random_bool(), random_bool());
zombiezones[i].spawntimer.restart();
}
}
}
void spawn_zombiezone(double x1,double x2,int y,int sp,string type)
{
zombiezone zz1(x1,x2,y,sp,type);
zombiezones.insert_last(zz1);
}
void destroy_all_zombiezones()
{
zombiezones.resize(0);
}
