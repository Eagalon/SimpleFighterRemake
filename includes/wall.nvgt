dest_wall@[]dest_walls(0);
class dest_wall
{
int defsound,hurtsound;
double minx,maxx,miny,maxy;
double dest_wallhealth;
double dest_wallmaxhealth;
double volume;
double pitch;
string dest_wall;
dest_wall(double mx,double mx2,double my,double my2,double hp,double maxhp,string dwy,double vol,double semitone)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
dest_wallhealth=hp;
dest_wallmaxhealth=maxhp;
dest_wall=dwy;
volume=vol;
pitch=semitone;
}
}
void dest_wallcheck()
{
for(uint i=0; i<dest_walls.length(); i++)
{
if(dest_walls[i].dest_wallhealth<=0)
{
p.destroy_sound(dest_walls[i].hurtsound);
dest_walls[i].defsound=p.play_extended_2d(find_sound("data/sounds/"+soundpack+"/objects/walls/"+dest_walls[i].dest_wall+"/*death*"),me.x,me.y,dest_walls[i].minx,dest_walls[i].miny,0,0,0,0,false,0,0,wallvolume,wallpitch,false);
p.update_sound_2d(dest_walls[i].defsound,dest_walls[i].minx,dest_walls[i].miny);
p.update_sound_range_2d(dest_walls[i].defsound,0,dest_walls[i].maxx-dest_walls[i].minx,0,dest_walls[i].maxy-dest_walls[i].miny);
dest_walls.remove_at(i);
return;
}
}
}
void spawn_dest_wall(double x1,double x2,double y1,double y2,double hp,double hp2,string dest_wall,double wallvolume,double wallpitch)
{
dest_wall dwl1(x1,x2,y1,y2,hp,hp2,dest_wall,wallvolume,wallpitch);
dest_walls.insert_last(dwl1);
}
void destroy_all_dest_walls()
{
dest_walls.resize(0);
}

wall@[]walls(0);
class wall
{
double minx,maxx,miny,maxy;
double volume;
double pitch;
string wall;
wall(double mx,double mx2,double my,double my2,string wy,double vol,double semitone)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
wall=wy;
volume=vol;
pitch=semitone;
spawn_platform(minx, maxx, miny, maxy, wall, volume, pitch);
}
}
int spawn_wall(double x1, double x2, double y1, double y2, string wall, double wallvolume, double wallpitch)
{
    wall wl1(x1, x2, y1, y2, wall, wallvolume, wallpitch);
    walls.insert_last(wl1);
    return walls.length() - 1; 
}
void update_wall(int id, double x1, double x2, double y1, double y2)
{
    if (id >= 0 && id < walls.length())
    {
        walls[id].minx = x1;
        walls[id].maxx = x2;
        walls[id].miny = y1;
        walls[id].maxy = y2;
    }
}
void remove_wall(int id)
{
    if (id >= 0 && id < walls.length())
    {
        walls.remove_at(id);
    }
}
void destroy_all_walls()
{
    walls.resize(0);
}

