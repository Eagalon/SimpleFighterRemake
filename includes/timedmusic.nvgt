timedmusic@[]timedmusics(0);
class timedmusic
{
int tracksound;
double minx, maxx, miny, maxy;
double volume;
double pitch;
int musictime;
string musictype;
timer musictimer;
timedmusic(double mx,double mx2,double my,double my2,double vol,double semitone,int sp,string srt)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
volume=vol;
pitch=semitone;
musictime=sp;
musictype=srt;
}
}
void timedmrcloop()
{
for(uint i=0; i<timedmusics.length(); i++)
{
if(timedmusics[i].musictimer.elapsed>=timedmusics[i].musictime)
{
muspool.destroy_sound(timedmusics[i].tracksound);
string[] musfilesfx=find_files("sounds/objects/musics/"+timedmusics[i].musictype+"/*music*");
if(musfilesfx.length()!=0) timedmusics[i].tracksound=muspool.play_extended_2d("sounds/objects/musics/"+timedmusics[i].musictype+"/"+musfilesfx[random(0,musfilesfx.length()-1)],me.x,me.y,timedmusics[i].minx,timedmusics[i].miny,0,0,0,0,false,0,0,volume,pitch,false);
muspool.update_sound_2d(timedmusics[i].tracksound,timedmusics[i].minx,timedmusics[i].miny);
muspool.update_sound_range_2d(timedmusics[i].tracksound, 0, timedmusics[i].maxx-timedmusics[i].minx, 0, timedmusics[i].maxy-timedmusics[i].miny);
timedmusics[i].musictimer.restart();
}
}
}
void spawn_timedmusic(double x1,double x2,double y1,double y2,double musvol,double muspitch,int musictime,string musictype)
{
timedmusic tm1(x1,x2,y1,y2,musvol,muspitch,musictime,musictype);
timedmusics.insert_last(tm1);
}
void destroy_all_timedmusics()
{
for(uint i=0; i<timedmusics.length(); i++)
{
muspool.destroy_sound(timedmusics[i].tracksound);
}
timedmusics.resize(0);
}
