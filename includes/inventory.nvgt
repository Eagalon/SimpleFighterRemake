int invpos;
dictionary inv;
void give(string item, int amount)
{
int a;
if (!inv.exists(item))
{
inv.set(item,amount);
}
else
{
inv.get(item,a);
if (a+amount<=0)
inv.delete(item);
else
inv.set(item,a+amount);
}
}
void cycle_inv(int dir)
{
if (dir==1)
invpos+=1;
string[] invsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*inv*");
if(invsfx.length()!=0 and charinvsound==1) invslot=p.play_stationary("sounds/"+soundpack+"/characters/"+chartype+"/"+invsfx[random(0,invsfx.length()-1)],false);
else
invpos-=1;
if (invpos>=inv.get_size())
{
invpos=0;
}
else if (invpos<0)
{
invpos=inv.get_size()-1;
}
if (inv.get_size()==0)
{
p.destroy_sound(invslot);
speak("empty");
}
else
{
int a;
inv.get(inv.get_keys()[invpos],a);
if(a==1)
speak(string_replace(inv.get_keys()[invpos],"_"," ",true)+". Item "+(invpos+1)+" of "+inv.get_keys().length());
else
speak(string_replace(inv.get_keys()[invpos], "_", " ", true)+"s, "+a+". Item "+(invpos+1)+" of "+inv.get_keys().length());
}
}
void useitem(string current)
{
string[] healtype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/health/*");
string[] misktype=find_directories("sounds/"+soundpack+"/equipments/items/unsorted/other/*");
for(uint i1=0; i1<healtype.length(); i1++)
{
for (uint i2=0; i2<misktype.length(); i2++)
{
if (inv.get_size()<=0)
{
speak("No items");
}
else
{
current=inv.get_keys()[invpos];
if(current==healtype[i1] and health!=maxhealth)
{
string[] firesfx=find_files("sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
string[] hitsfx=find_files("sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(healtype[i1],-1);
health+=maxhealth/4;
hearttime+=maxhealth/4;
speak("healed to"+round(health/maxhealth*100,2)+"percent health");
return;
}
if(current==healtype[i1] and health>=maxhealth)
{
speak("You don't need to use this!");
return;
}
if(current==misktype[i2])
{
string[] firesfx=find_files("sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
string[] hitsfx=find_files("sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(misktype[i2],-1);
speak(misktype[i2]+";"+"recycled");
return;
}
}
}
}
}
int count_total_items()
{
int amount=0;
for (uint i=0; i<inv.get_keys().length(); i++)
{
int a;
inv.get(inv.get_keys()[i],a);
amount+=a;
}
return amount;
}
string getitem()
{
if (inv.get_size()<=0)
{
return "";
}
else
{
string current=inv.get_keys()[invpos];
return current;
}
}
int item_exists(string item)
{
string[] current=inv.get_keys();
int index=current.find(item);
if (index>-1)
{
int ab;
inv.get(current[index],ab);
return ab;
}
else
return -1;
}