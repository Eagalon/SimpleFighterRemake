int invpos;
dictionary inv;
void give(string item, int amount)
{
int a;
if (!inv.exists(item))
{
inv.set(item,amount);
}
else
{
inv.get(item,a);
if (a+amount<=0)
inv.delete(item);
else
inv.set(item,a+amount);
}
}
void cycle_inv(int dir)
{
if (dir==1)
invpos+=1;
string[] invsfx=find_sound("data/sounds/"+soundpack+"/characters/"+chartype+"/*inv*");
if(invsfx.length()!=0 and charinvsound==1) invslot=p.play_stationary("data/sounds/"+soundpack+"/characters/"+chartype+"/"+invsfx[random(0,invsfx.length()-1)],false);
else
invpos-=1;
if (invpos>=inv.get_size())
{
invpos=0;
}
else if (invpos<0)
{
invpos=inv.get_size()-1;
}
if (inv.get_size()==0)
{
p.destroy_sound(invslot);
speak("empty");
}
else
{
int a;
inv.get(inv.get_keys()[invpos],a);
if(a==1)
speak(string_replace(inv.get_keys()[invpos],"_"," ",true)+". Item "+(invpos+1)+" of "+inv.get_keys().length());
else
speak(string_replace(inv.get_keys()[invpos], "_", " ", true)+"s, "+a+". Item "+(invpos+1)+" of "+inv.get_keys().length());
}
}
void useitem(string current)
{
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
string[] misktype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/other/*");
for(uint i1=0; i1<healtype.length(); i1++)
{
for (uint i2=0; i2<misktype.length(); i2++)
{
if (inv.get_size()<=0)
{
speak("No items");
}
else
{
current=inv.get_keys()[invpos];
if(current==healtype[i1] and health!=maxhealth)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype[i1]+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(healtype[i1],-1);
health+=maxhealth/4;
hearttime+=maxhealth/4;
speak("healed to"+round(health/maxhealth*100,2)+"percent health");
return;
}
if(current==healtype[i1] and health>=maxhealth)
{
speak("You don't need to use this!");
return;
}
if(current==misktype[i2])
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype[i2]+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(misktype[i2],-1);
speak(misktype[i2]+";"+"recycled");
return;
}
}
}
}
}
int count_total_items()
{
int amount=0;
for (uint i=0; i<inv.get_keys().length(); i++)
{
int a;
inv.get(inv.get_keys()[i],a);
amount+=a;
}
return amount;
}
string getitem()
{
if (inv.get_size()<=0)
{
return "";
}
else
{
string current=inv.get_keys()[invpos];
return current;
}
}
int item_exists(string item)
{
string[] current=inv.get_keys();
int index=current.find(item);
if (index>-1)
{
int ab;
inv.get(current[index],ab);
return ab;
}
else
return -1;
}

obj@[]objs(0);
class obj
{
bool automatic;
;int getsound, hurtsound, objsound;
int itx;
int ity;
int objtime;
string objtype;
string objtype2;
timer objtimer;
obj(int ix,int iy,int sp,string ty,string ty2,bool itc)
{
itx=ix;
ity=iy;
objtime=sp;
objtype=ty;
objtype2=ty2;
automatic=itc;
}
}
void auto_use_item()
{
if(itemhold==0 and itemtimer1.elapsed>=itemtime1 and itemtimer2.elapsed>=itemtime2 and itemtimer3.elapsed>=itemtime3)
{
if(itemcad==0)
{
speak("You must draw an item from a cadigory before using it.");
}
else if(itemcad==1 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
itemtimer1.restart();
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
if(itemcad==2 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
itemtimer2.restart();
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
if(itemcad==3 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
itemtimer3.restart();
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
}
}
void manule_use_item()
{
if(itemhold==1)
{
if(itemcad==0)
{
speak("You must draw an item from a cadigory before using it.");
}
else if(itemcad==1 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
wait(item1delay);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
if(itemcad==2 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
wait(item2delay);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
if(itemcad==3 and useitems==true)
{
string[] firesfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0 and firesound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,itemvolume,itempitch,false);
wait(item3delay);
string[] hitsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) itemslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
health+=maxhealth/4;
hearttime+=maxhealth/4;
}
}
}
void drop_item(string direction, string objtype, string objtype2)
{
if(direction=="left")
{
spawn_obj(me.x-1, me.y, 500, objtype, objtype2, true);
}
if(direction=="right")
{
spawn_obj(me.x+1, me.y, 500, objtype, objtype2, true);
}
}
void objloop()
{
for(uint i=0; i<objs.length(); i++)
{
if(objs[i].objtimer.elapsed>=objs[i].objtime)
{
//itempool.destroy_sound(objs[i].objsound);
string[] objsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/*loop*");
if(objsfx.length()!=0) objs[i].objsound=itempool.play_extended_2d("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/"+objsfx[random(0,objsfx.length()-1)],me.x,me.y,objs[i].itx,objs[i].ity,0,0,0,0,false,0,0,itemvolume,itempitch,false);
objs[i].objtimer.restart();
}
if(me.x==objs[i].itx and me.y==objs[i].ity and objs[i].automatic==true)
{
//itempool.destroy_sound(objs[i].hurtsound);
//itempool.destroy_sound(objs[i].objsound);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/*get*");
if(getsfx.length()!=0) objs[i].getsound=itempool.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/"+getsfx[random(0,getsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(objs[i].objtype2,1);
speak(objs[i].objtype2);
objs.remove_at(i);
return;
}
if(me.x==objs[i].itx and me.y==objs[i].ity and objs[i].automatic==false and key_repeating(KEY_RETURN))
{
//itempool.destroy_sound(objs[i].hurtsound);
//itempool.destroy_sound(objs[i].objsound);
string[] getsfx=find_sound("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/*get*");
if(getsfx.length()!=0) objs[i].getsound=itempool.play_stationary_extended("data/sounds/"+soundpack+"/equipments/items/unsorted/"+objs[i].objtype+"/"+objs[i].objtype2+"/"+getsfx[random(0,getsfx.length()-1)],false,0,0,itemvolume,itempitch,false);
give(objs[i].objtype2,1);
speak(objs[i].objtype2);
objs.remove_at(i);
return;
}
}
}
void spawn_obj(int x,int y,int objtime,string objtype,string objtype2,bool automatic)
{
obj o1(x,y,objtime,objtype,objtype2,automatic);
objs.insert_last(o1);
}
void destroy_all_objs()
{
for(uint i=0; i<objs.length(); i++)
{
itempool.destroy_sound(objs[i].objsound);
}
objs.resize(0);
}

objzone@[]objzones(0);
class objzone
{
double minx, maxx, miny, maxy;
int spawntime;
string objtype;
string objtype2;
timer spawntimer;
objzone(double mx,double mx2,double my,double my2,int sp,string it,string it2)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
spawntime=sp;
objtype=it;
objtype2=it2;
}
}
void objzoneloop()
{
for(uint i=0; i<objzones.length(); i++)
{
if(objzones[i].minx<=me.x and objzones[i].maxx>=me.x and objzones[i].miny<=me.y and objzones[i].maxy>=me.y and objzones[i].spawntimer.elapsed>=objzones[i].spawntime)
{
spawn_obj(random(objzones[i].minx, objzones[i].maxx), random(objzones[i].miny, objzones[i].maxy), objzones[i].spawntime, objzones[i].objtype, objzones[i].objtype2, true);
objzones[i].spawntimer.restart();
}
}
}
void spawn_objzone(double x1,double x2,double y1,double y2,int sp,string objtype,string objtype2)
{
objzone oz1(x1,x2,y1,y2,sp,objtype,objtype2);
objzones.insert_last(oz1);
}
void destroy_all_objzones()
{
objzones.resize(0);
}
