passage@[]passages(0);
class passage
{
bool is_open;
bool is_sound_paused;
int closesound,passagesound,opensound;
int platform_id;
int startx,starty;
int direction;
int passagelength;
int opentime;
int closetime;
string tile;
string closetype;
string looptype;
string opentype;
timer closetimer,opentimer;
passage(int sx,int sy,int dr,int psl,int ot,string ty,string lsound,string osound,string clsound,int ct)
{
startx=sx;
starty=sy;
direction=dr;
passagelength=psl;
opentime=ot;
tile=ty;
looptype=lsound;
opentype=osound;
closetype=clsound;
closetime=ct;
is_open=false;
is_sound_paused=false;
platform_id=-1;
string[] passagesfx=find_files("sounds/"+soundpack+"/objects/doors/loop/"+looptype+"/*loop*");
if(passagesfx.length()!=0) passagesound=passagepool.play_extended_2d("sounds/"+soundpack+"/objects/doors/loop/"+looptype+"/"+passagesfx[random(0,passagesfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,true,0,0,doorvolume,doorpitch,false);
update_passage_sound();
}
bool is_endpoint(int x, int y)
    {
        int endx = startx + (direction == 1 ? passagelength : 0);
        int endy = starty + (direction == 2 ? passagelength : 0);
        return (x == startx && y == starty) || (x == endx && y == endy);
    }
    bool is_within_passage(int x, int y)
    {
        if (!is_open) return false;
        return (direction == 1 && x > startx && x < startx + passagelength) || (direction == 2 && y > starty && y < starty + passagelength);
    }
    string get_endpoint_description(int x, int y)
    {
        if (!is_endpoint(x, y)) return "";   
        string status = is_open ? "open" : "";
        return status + " passage endpoint";
    }
void update_passage_sound()
{
int sound_start_x=startx+(direction==1?1:0);
int sound_start_y=starty+(direction==2?1:0);
int sound_end_x=startx+(direction==1?passagelength:0);
int sound_end_y=starty+(direction==2?passagelength:0);
if(passagesound!=-1 && !is_sound_paused)
{
passagepool.update_sound_2d(passagesound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(passagesound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
if(opensound!=-1)
{
passagepool.update_sound_2d(opensound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(opensound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
if(closesound!=-1)
{
passagepool.update_sound_2d(closesound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(closesound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
}
void toggle_passage()
{
if(is_open)
close_passage();
else
open_passage();
}
void open_passage()
{
if(!is_open)
{
is_open=true;
opentimer.restart();
if(passagesound!=-1 && !is_sound_paused)
{
passagepool.pause_sound(passagesound);
is_sound_paused=true;
}
string[] opensfx=find_files("sounds/"+soundpack+"/objects/doors/open/"+opentype+"/*open*");
if(opensfx.length()!=0) opensound=passagepool.play_extended_2d("sounds/"+soundpack+"/objects/doors/open/"+opentype+"/"+opensfx[random(0,opensfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
update_passage_sound();
int platform_start_x=startx;
int platform_start_y=starty;
int platform_end_x=startx;
int platform_end_y=starty;
if(direction==1)
{
platform_start_x+=1;
platform_end_x+=passagelength;
}
else if(direction==2)
{
platform_start_y+=1;
platform_end_y+=passagelength;
}
platform_id=spawn_platform(platform_start_x,platform_end_x,platform_start_y,platform_end_y,tile,0,100);
        }
        }
void close_passage()
{
if(is_open)
{
is_open=false;
closetimer.restart();
if(passagesound!=-1 && is_sound_paused)
{
passagepool.resume_sound(passagesound);
is_sound_paused=false;
}
string[] closesfx=find_files("sounds/"+soundpack+"/objects/doors/close/"+closetype+"/*close*");
if(closesfx.length()!=0) closesound=passagepool.play_extended_2d("sounds/"+soundpack+"/objects/doors/close/"+closetype+"/"+closesfx[random(0,closesfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
update_passage_sound();
if(platform_id!=-1)
{
remove_platform(platform_id);
platform_id=-1;
}
}
}
void update_passage()
{
if(is_open && is_at_endpoint (me.x,me.y) && key_pressed(KEY_RETURN) && opentimer.elapsed>=opentime)
{
toggle_passage();
opentimer.restart();
}
else if(!is_open && is_at_endpoint (me.x,me.y) && key_pressed(KEY_RETURN) && closetimer.elapsed>=closetime)
{
toggle_passage();
closetimer.restart();
}
update_passage_sound();
}
bool is_at_endpoint (int x,int y)
{
int endx=startx+(direction==1?passagelength+1:0);
int endy=starty+(direction==2?passagelength+1:0);
return(x==startx && y==starty)||(x==endx && y==endy);
}
};
void checkpassages()
{
for(uint i=0; i<passages.length(); i++)
{
passages[i].update_passage();
}
}
void spawn_passage(int x,int y,int dir,int plength,int opentime,string tile,string looptype,string opentype,string closetype,int closetime)
{
passage pg1(x,y,dir,plength,opentime,tile,looptype,opentype,closetype,closetime);
passages.insert_last(pg1);
}
void destroy_all_passages()
{
for(uint i=0; i<passages.length(); i++)
{
passagepool.destroy_sound(passages[i].passagesound);
passages[i].close_passage();
}
passages.resize(0);
}
