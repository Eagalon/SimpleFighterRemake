bool string_file_encrypt(string input_file, string output_file, string key)
{
bool success;
file f;
success=f.open(input_file, "rb");
if(!success) return false;
string text=f.read();
text=string_encrypt(text, key);
if(text=="") return false;
success=f.open(output_file, "wb");
if(!success) return false;
f.write(text);
success=f.close();
return success;
}
bool string_file_decrypt(const string& input_file, const string& output_file, const string& encryption_key)
{
file input;
if (!input.open(input_file, "rb"))
return false;
string encrypted_content = input.read();
input.close();
string decrypted_content = string_decrypt(encrypted_content, encryption_key);
file output;
if (!output.open(output_file, "wb"))
return false;
output.write(decrypted_content);
output.close();
return true;
}
string file_decrypt(const string& encrypted_content, const string& encryption_key)
{
return string_decrypt(encrypted_content, encryption_key);
}
class parsed_data
{
string[] peramitors;
string[] values;
string source;
string decryption_key;
parsed_data(string text,string decryption_key,bool filename=true)
{
source=text;
this.decryption_key=decryption_key;
if(filename)
{
parse_data_from_file();
}
else
{
parse_data_from_string();
}
}
void parse_data_from_file()
{
file f;
bool success=f.open(source,"rb");
if(!success)
return;
else
{
string d;
if(decryption_key!="")
d=string_decrypt(f.read(),decryption_key);
else
d=f.read();
string[] parseddata=string_split(d,"\r\n",true);
for(int i=0; i<parseddata.length(); i++)
{
string[] parseddata2=string_split(parseddata[i],"=",true);
if(parseddata2.length()!=2)
continue;
else
{
peramitors.insert_last(parseddata2[0]);
values.insert_last(parseddata2[1]);
}
}
}
}
void parse_data_from_string()
{
string d;
if(decryption_key!="")
d=string_decrypt(source,decryption_key);
else
d=source;
string[] parseddata=string_split(d,"\r\n",true);
for(int i=0; i<parseddata.length(); i++)
{
string[] parseddata2=string_split(parseddata[i],"=",true);
if(parseddata2.length()!=2)
continue;
else
{
peramitors.insert_last(parseddata2[0]);
values.insert_last(parseddata2[1]);
}
}
}
string get_value(string peramitor)
{
if(peramitors.find(peramitor)!=-1)
return values[peramitors.find(peramitor)];
else
return "";
}
}
character@ get_default_char()
{
if(charas.is_empty())
{
return null;
}
for(uint i=0; i<charas.length(); i++)
{
if(charas[i].name == chartype)
{
return charas[i];
}
}
return null;
}
shield@ get_default_shield()
{
if(shields.is_empty())
{
return null;
}
for(uint i=0; i<shields.length(); i++)
{
if(shields[i].name=="large shield")
{
return shields[i];
}
}
return null;
}
weapon@ get_default_weapon()
{
if(weapons.is_empty())
{
return null;
}
for(uint i=0; i<weapons.length(); i++)
{
if(weapons[i].name=="fist")
{
return weapons[i];
}
}
return null;
}
character@[]charas(0);
class character
{
string name;
string shieldtype;
int shieldweight;
double attack;
double defence;
double points;
double health;
double maxhealth;
double lifecard;
double level;
double levmod;
double xp;
double xpmod;
double xprequiered;
int charcamsound;
int chardeathsound;
int charfallsound;
int charfallsound2;
int charhurtsound;
int charhealsound;
int charhealsound2;
int charhealsound3;
int charinvsound;
int charjumpsound;
int charlevsound;
int charlifesound;
int charrocksound;
int charsitsound;
int charstandsound;
int charturnsound;
character(const string&in name,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double health,double maxhealth,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charcamsound,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charlevsound,int charlifesound,int charrocksound,int charsitsound,int charstandsound,int charturnsound)
{
this.name=name;
this.shieldtype=shieldtype;
this.shieldweight=shieldweight;
this.attack=attack;
this.defence=defence;
this.points=points;
this.health=health;
this.maxhealth=maxhealth;
this.lifecard=lifecard;
this.level=level;
this.levmod=levmod;
this.xp=xp;
this.xpmod=xpmod;
this.xprequiered=xprequiered;
this.charcamsound=charcamsound;
this.chardeathsound=chardeathsound;
this.charfallsound=charfallsound;
this.charfallsound2=charfallsound2;
this.charhurtsound=charhurtsound;
this.charhealsound=charhealsound;
this.charhealsound2=charhealsound2;
this.charhealsound3=charhealsound3;
this.charinvsound=charinvsound;
this.charjumpsound=charjumpsound;
this.charlevsound=charlevsound;
this.charlifesound=charlifesound;
this.charrocksound=charrocksound;
this.charsitsound=charsitsound;
this.charstandsound=charstandsound;
this.charturnsound=charturnsound;
}
}
void add_character(const string&in name,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double health,double maxhealth,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charcamsound,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charlevsound,int charlifesound,int charrocksound,int charsitsound,int charstandsound,int charturnsound)
{
character ch1(name,shieldtype,shieldweight,attack,defence,points,health,maxhealth,lifecard,level,levmod,xp,xpmod,xprequiered,charcamsound,chardeathsound,charfallsound,charfallsound2,charhealsound,charhealsound2,charhealsound3,charhurtsound,charinvsound,charjumpsound,charlevsound,charlifesound,charrocksound,charsitsound,charstandsound,charturnsound);
charas.insert_last(ch1);
}
void destroy_all_charas()
{
charas.resize(0);
}
shield@[]shields(0);
class shield
{
string name;
double shielddefence;
int shieldweight;
double shieldstrength;
double maxshieldstrength;
double shieldlevel;
int shieldbreaksound;
int shielddrawsound;
int shieldhitsound;
int shieldloopsound;
int shieldremovesound;
int shieldwearsound;
shield(const string&in name,double shielddefence,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
this.name=name;
this.shielddefence=shielddefence;
this.shieldweight=shieldweight;
this.shieldstrength=shieldstrength;
this.maxshieldstrength=maxshieldstrength;
this.shieldlevel=shieldlevel;
this.shieldbreaksound=shieldbreaksound;
this.shielddrawsound=shielddrawsound;
this.shieldhitsound=shieldhitsound;
this.shieldloopsound=shieldloopsound;
this.shieldremovesound=shieldremovesound;
this.shieldwearsound=shieldwearsound;
}
}
void add_shield(const string&in name,double shielddefence,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
shield sl1(name,shielddefence,shieldweight,shieldstrength,maxshieldstrength,shieldlevel,shieldbreaksound,shielddrawsound,shieldhitsound,shieldloopsound,shieldremovesound,shieldwearsound);
shields.insert_last(sl1);
}
void destroy_all_shields()
{
shields.resize(0);
}
weapon@[]weapons(0);
class weapon
{
string name;
int wepdamage;
int wephold;
int weprange;
int weprange2;
int wepspeed;
int weapontime;
int weapontime2;
int wepweight;
double ammo;
double loadedammo;
double maxammo;
double weplevel;
int wepdrawsound;
int wepemptysound;
int wepfiresound;
int wephitsound;
int weploopsound;
int weprecsound;
int wepreloadsound;;
int wepshellsound;
weapon(const string&in name,int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
this.name=name;
this.wepdamage=wepdamage;
this.wephold=wephold;
this.weprange=weprange;
this.weprange2=weprange2;
this.wepspeed=wepspeed;
this.weapontime=weapontime;
this.weapontime2=weapontime2;
this.wepweight=wepweight;
this.ammo=ammo;
this.loadedammo=loadedammo;
this.maxammo=maxammo;
this.weplevel=weplevel;
this.wepdrawsound=wepdrawsound;
this.wepemptysound=wepemptysound;
this.wepfiresound=wepfiresound;
this.wephitsound=wephitsound;
this.weploopsound=weploopsound;
this.weprecsound=weprecsound;
this.wepreloadsound=wepreloadsound;
this.wepshellsound=wepshellsound;
}
}
void add_weapon(const string&in name,int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
weapon wp1(name,wepdamage,wephold,weprange,weprange2,wepspeed,weapontime,weapontime2,wepweight,ammo,loadedammo,maxammo,weplevel,wepdrawsound,wepemptysound,wepfiresound,wephitsound,weploopsound,weprecsound,wepreloadsound,wepshellsound);
weapons.insert_last(wp1);
}
void destroy_all_weapons()
{
weapons.resize(0);
}
