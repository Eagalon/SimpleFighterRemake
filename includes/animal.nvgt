animal@[]animals(0);
class animal
{
bool fireable, moveable, moveable2;
int amsound, defsound, hurtsound, tilesound, wepsound;
int animalcard;
int anihealth;
double amlevel;
double amxp;
double animalhealth;
double animalmaxhealth;
int amx;
int amy;
int anirange;
int anirange2;
int damage;
int animaltime;
int firetime;
string animaltype;
timer animaltimer, firetimer;
animal(int ax,int ay,int anrange,int anrange2,double hp,double maxhp,int ac,int dm,int ft,int sp,double amlv,double axp,string at,bool amf,bool amt,bool amt2)
{
this.anihealth=hp;
amx=ax;
amy=ay;
anirange=anrange;
anirange2=anrange2;
animalhealth=hp;
animalmaxhealth=maxhp;
animalcard=ac;
damage=dm;
firetime=ft;
animaltime=sp;
amlevel=amlv;
amxp=axp;
animaltype=at;
fireable=amf;
moveable=amt;
moveable2=amt2;
string[] amsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animaltype+"/*taunt*");
if(amsfx.length()!=0) amsound=animalpool.play_extended_2d("sounds/"+soundpack+"/npc/animals/"+animaltype+"/"+amsfx[random(0,amsfx.length()-1)],me.x,me.y,amx,amy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void animalloop()
{
for(uint i=0; i<animals.length(); i++)
{
if(animals[i].animaltimer.elapsed>=animals[i].animaltime)
{
string[] tilers=find_files("sounds/"+soundpack+"/objects/platforms/"+gmt(animals[i].amx, animals[i].amy)+"/*step*");
if(animals[i].moveable==true and paused==0 and tilers.length()!=0) tilesound=p.play_extended_2d("sounds/"+soundpack+"/objects/platforms/"+gmt(animals[i].amx, animals[i].amy)+"/"+tilers[random(0,tilers.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
animalpool.update_sound_2d(animals[i].amsound,animals[i].amx,animals[i].amy);
animals[i].animaltimer.restart();
if(animals[i].amx<me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx++;
}
if(animals[i].amx>me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx--;
}
if(animals[i].amy<me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy++;
}
if(animals[i].amy>me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy--;
}
}
if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=animals[i].damage*animals[i].amlevel-shielddefence;
animals[i].firetimer.restart();
}
else if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*hit*");
if(hitsfx.length()!=0) animals[i].wepsound=animalpool.play_stationary_extended("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=animals[i].damage*animals[i].amlevel-defence;
animals[i].firetimer.restart();
}
if(animals[i].animalhealth<=0)
{
if(animals[i].animalcard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*life*");
if(lifesfx.length()!=0) animalpool.play_2d("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,false);
animals[i].animalhealth=animals[i].anihealth;
animals[i].animalcard-=1;
}
else if(animals[i].animalcard<=1 and paused==0)
{
animalpool.destroy_sound(animals[i].hurtsound);
animalpool.destroy_sound(animals[i].amsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*death*");
if(defsfx.length()!=0) animals[i].defsound=animalpool.play_extended_2d("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=animals[i].amxp*animals[i].amlevel*xpmod;
kills+=1;
spawn_bodyfall(animals[i].amx, animals[i].amy, random(500,1000));
animals.remove_at(i);
return;
}
}
}
}
void spawn_animal(int x,int y,int animrange,int animrange2,double hp,double maxhp,int ac,int dm,int firetime,int animaltime,double amlevel,double xp,string animaltype,bool fireable,bool moveable,bool moveable2)
{
animal an1(x,y,animrange,animrange2,hp,maxhp,ac,dm,firetime,animaltime,amlevel,xp,animaltype,fireable,moveable,moveable2);
animals.insert_last(an1);
}
void destroy_all_animals()
{
for(uint i=0; i<animals.length(); i++)
{
animalpool.destroy_sound(animals[i].amsound);
}
animals.resize(0);
}
