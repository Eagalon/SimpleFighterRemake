spike@[]spikes(0);
class spike
{
int defsound, hitsound, hurtsound, spikesound;
bool destroyable;
double minx, maxx, miny, maxy;
double spikehealth;
double spikemaxhealth;
int damage;
int spiketime;
string spiketype;
timer spiketimer;
spike(double mx,double mx2,double my,double my2,double hp,double maxhp,int dmg,int sp,string st,bool dtb)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
spikehealth=hp;
spikemaxhealth=maxhp;
damage=dmg;
spiketime=sp;
spiketype=st;
destroyable=dtb;
}
}
void spikeloop()
{
for(uint i=0; i<spikes.length(); i++)
{
if(spikes[i].spiketimer.elapsed>=spikes[i].spiketime)
{
string[] spikesfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/*loop*");
if(spikesfx.length()!=0) spikes[i].spikesound=spikepool.play_extended_2d("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/"+spikesfx[random(0,spikesfx.length()-1)],me.x,me.y,spikes[i].minx,spikes[i].miny,0,0,0,0,false,0,0,painvolume,painpitch,false);
spikepool.update_sound_2d(spikes[i].spikesound,spikes[i].minx,spikes[i].miny);
spikepool.update_sound_range_2d(spikes[i].spikesound, 0, spikes[i].maxx-spikes[i].minx, 0, spikes[i].maxy-spikes[i].miny);
spikes[i].spiketimer.restart();
if(spikes[i].minx<=me.x and spikes[i].maxx>=me.x and spikes[i].miny<=me.y and spikes[i].maxy>=me.y and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/*hit*");
if(hitsfx.length()!=0) spikes[i].hitsound=spikepool.play_stationary_extended("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,painvolume,painpitch,false);
shieldstrength-=spikes[i].damage-shielddefence;
}
else if(spikes[i].minx<=me.x and spikes[i].maxx>=me.x and spikes[i].miny<=me.y and spikes[i].maxy>=me.y and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/*hit*");
if(hitsfx.length()!=0) spikes[i].hitsound=spikepool.play_stationary_extended("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,painvolume,painpitch,false);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("data/sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=spikes[i].damage-defence;
hearttime-=spikes[i].damage-defence;
}
if(spikes[i].spikehealth<=0)
{
spikepool.destroy_sound(spikes[i].hurtsound);
spikepool.destroy_sound(spikes[i].spikesound);
string[] defsfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/*death*");
if(defsfx.length()!=0) spikes[i].defsound=spikepool.play_extended_2d("data/sounds/"+soundpack+"/objects/spikes/"+spikes[i].spiketype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,spikes[i].minx,spikes[i].miny,0,0,0,0,false,0,0,painvolume,painpitch,false);
spikepool.update_sound_2d(spikes[i].defsound,spikes[i].minx,spikes[i].miny);
spikepool.update_sound_range_2d(spikes[i].defsound,0,spikes[i].maxx-spikes[i].minx,0,spikes[i].maxy-spikes[i].miny);
spikes.remove_at(i);
return;
}
}
}
}
void spawn_spike(double x1,double x2,double y1,double y2,double hp,double maxhp,int dmg,int sp,string spiketype,bool destroyable)
{
spike sp1(x1,x2,y1,y2,hp,maxhp,dmg,sp,spiketype,destroyable);
spikes.insert_last(sp1);
}
void destroy_all_spikes()
{
for(uint i=0; i<spikes.length(); i++)
{
spikepool.destroy_sound(spikes[i].spikesound);
}
spikes.resize(0);
}
