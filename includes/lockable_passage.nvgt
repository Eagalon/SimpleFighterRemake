pspassage@[]pspassages(0);
class pspassage
{
bool is_open;
bool is_sound_paused;
int closesound,pspassagesound,opensound;
int platform_id;
int startx,starty;
int direction;
int pspassagelength;
int opentime;
int closetime;
string tile;
string closetype;
string looptype;
string opentype;
string pspass;
timer closetimer,opentimer;
pspassage(int sx,int sy,int dr,int psl,int ot,string ty,string lsound,string osound,string clsound,string pd,int ct)
{
startx=sx;
starty=sy;
direction=dr;
pspassagelength=psl;
opentime=ot;
tile=ty;
looptype=lsound;
opentype=osound;
closetype=clsound;
pspass=pd;
closetime=ct;
is_open=false;
is_sound_paused=false;
platform_id=-1;
string[] pspassagesfx=find_files("sounds/objects/doors/loop/"+looptype+"/*loop*");
if(pspassagesfx.length()!=0) pspassagesound=passagepool.play_extended_2d("sounds/objects/doors/loop/"+looptype+"/"+pspassagesfx[random(0,pspassagesfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,true,0,0,doorvolume,doorpitch,false);
update_pspassage_sound();
}
bool is_endpoint(int x, int y)
{
    int endx = startx + (direction == 1 ? pspassagelength : 0);
    int endy = starty + (direction == 2 ? pspassagelength : 0);
    return (x == startx && y == starty) || (x == endx && y == endy);
}
bool is_within_pspassage(int x, int y)
{
    if (!is_open) return false;
    return (direction == 1 && x > startx && x < startx + pspassagelength) || (direction == 2 && y > starty && y < starty + pspassagelength);
}
string get_endpoint_description(int x, int y)
{
    if (!is_endpoint(x, y)) return "";   
    string status = is_open ? "open" : "locked";
    return status + " passage endpoint";
}
void update_pspassage_sound()
{
int sound_start_x=startx+(direction==1?1:0);
int sound_start_y=starty+(direction==2?1:0);
int sound_end_x=startx+(direction==1?pspassagelength:0);
int sound_end_y=starty+(direction==2?pspassagelength:0);
if(pspassagesound!=-1 && !is_sound_paused)
{
passagepool.update_sound_2d(pspassagesound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(pspassagesound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
if(opensound!=-1)
{
passagepool.update_sound_2d(opensound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(opensound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
if(closesound!=-1)
{
passagepool.update_sound_2d(closesound,sound_start_x,sound_start_y);
passagepool.update_sound_range_2d(closesound,0,sound_end_x-sound_start_x,0,sound_end_y-sound_start_y);
}
}
bool check_password(string input)
{
return input == pspass;
}
void toggle_pspassage(string pspassword="")
{
if(is_open)
{
    close_pspassage();
}
else
{
    if(check_password(pspassword))
    {
        open_pspassage();
    }
    else
    {
        speak("Invalid password. Please try again.");
    }
}
}
void open_pspassage()
{
if(!is_open)
{
is_open=true;
opentimer.restart();
if(pspassagesound!=-1 && !is_sound_paused)
{
passagepool.pause_sound(pspassagesound);
is_sound_paused=true;
}
string[] opensfx=find_files("sounds/objects/doors/open/"+opentype+"/*open*");
if(opensfx.length()!=0) opensound=passagepool.play_extended_2d("sounds/objects/doors/open/"+opentype+"/"+opensfx[random(0,opensfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
update_pspassage_sound();
int platform_start_x=startx;
int platform_start_y=starty;
int platform_end_x=startx;
int platform_end_y=starty;
if(direction==1)
{
platform_start_x+=1;
platform_end_x+=pspassagelength;
}
else if(direction==2)
{
platform_start_y+=1;
platform_end_y+=pspassagelength;
}
platform_id=spawn_platform(platform_start_x,platform_end_x,platform_start_y,platform_end_y,tile,0,100);
        }
        }
void close_pspassage()
{
if(is_open)
{
is_open=false;
closetimer.restart();
if(pspassagesound!=-1 && is_sound_paused)
{
passagepool.resume_sound(pspassagesound);
is_sound_paused=false;
}
string[] closesfx=find_files("sounds/objects/doors/close/"+closetype+"/*close*");
if(closesfx.length()!=0) closesound=passagepool.play_extended_2d("sounds/objects/doors/close/"+closetype+"/"+closesfx[random(0,closesfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
update_pspassage_sound();
if(platform_id!=-1)
{
remove_platform(platform_id);
platform_id=-1;
}
}
}
void update_pspassage()
{
if(is_at_endpoint(me.x,me.y) && key_pressed(KEY_RETURN))
{
    if((is_open && closetimer.elapsed>=closetime) || (!is_open && opentimer.elapsed>=opentime))
    {
        if(!is_open)
        {
            string pass = input.input("Enter the password to open this locked passage.");
            toggle_pspassage(pass);
        }
        else
        {
            toggle_pspassage();
        }
    }
}
update_pspassage_sound();
}
bool is_at_endpoint(int x,int y)
{
int endx=startx+(direction==1?pspassagelength+1:0);
int endy=starty+(direction==2?pspassagelength+1:0);
return(x==startx && y==starty)||(x==endx && y==endy);
}
};
void checkpspassages()
{
for(uint i=0; i<pspassages.length(); i++)
{
pspassages[i].update_pspassage();
}
}
void spawn_pspassage(int x,int y,int dir,int plength,int opentime,string tile,string looptype,string opentype,string closetype,string pspassword,int closetime)
{
pspassage pg1(x,y,dir,plength,opentime,tile,looptype,opentype,closetype,pspassword,closetime);
pspassages.insert_last(pg1);
}
void destroy_all_pspassages()
{
for(uint i=0; i<pspassages.length(); i++)
{
passagepool.destroy_sound(pspassages[i].pspassagesound);
pspassages[i].close_pspassage();
}
pspassages.resize(0);
}
