bool doormove;
door@[]doors(0);
class door
{
bool automatic, destroyable, is_moving=false;
int startx, starty;
int endx, endy;
double doorhealth;
double doormaxhealth;
int closesound, defsound, destsound, doorsound, hurtsound, movesound, opensound;
int speed;
string closetype;
string desttype;
string looptype;
string movetype;
string opentype;
timer doortimer;
door(int sx,int sy,int ex,int ey,double hp,double maxhp,int sp,string lsound,string mvsound,string osound,string clsound,string dsound,bool dcl,bool dtb)
{
startx=sx;
starty=sy;
endx=ex;
endy=ey;
doorhealth=hp;
doormaxhealth=maxhp;
speed=sp;
looptype=lsound;
movetype=mvsound;
opentype=osound;
closetype=clsound;
desttype=dsound;
automatic=dcl;
destroyable=dtb;
string[] doorsfx=find_files("sounds/objects/doors/loop/"+looptype+"/*loop*");
if(doorsfx.length()!=0) doorsound=doorpool.play_extended_2d("sounds/objects/doors/loop/"+looptype+"/"+doorsfx[random(0,doorsfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,true,0,0,doorvolume,doorpitch,false);
}
}
void doorcheck()
{
for(uint i=0; i<doors.length(); i++)
{
if(doors[i].startx==me.x and doors[i].starty==me.y and doors[i].automatic==true)
{
doormove=true;
doors[i].is_moving=true;
string[] opensfx=find_files("sounds/objects/doors/open/"+doors[i].opentype+"/*open*");
if(opensfx.length()!=0) doors[i].opensound=doorpool.play_stationary_extended("sounds/objects/doors/open/"+doors[i].opentype+"/"+opensfx[random(0,opensfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
string[] movesfx=find_files("sounds/objects/doors/move/"+doors[i].movetype+"/*move*");
if(movesfx.length()!=0) doors[i].movesound=doorpool.play_stationary_extended("sounds/objects/doors/move/"+doors[i].movetype+"/"+movesfx[random(0,movesfx.length()-1)],true,0,0,doorvolume,doorpitch,false);
}
if(doors[i].startx==me.x and doors[i].starty==me.y and doors[i].automatic==false and key_pressed(KEY_RETURN))
{
doormove=true;
doors[i].is_moving=true;
string[] opensfx=find_files("sounds/objects/doors/open/"+doors[i].opentype+"/*open*");
if(opensfx.length()!=0) doors[i].opensound=doorpool.play_stationary_extended("sounds/objects/doors/open/"+doors[i].opentype+"/"+opensfx[random(0,opensfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
string[] movesfx=find_files("sounds/objects/doors/move/"+doors[i].movetype+"/*move*");
if(movesfx.length()!=0) doors[i].movesound=doorpool.play_stationary_extended("sounds/objects/doors/move/"+doors[i].movetype+"/"+movesfx[random(0,movesfx.length()-1)],true,0,0,doorvolume,doorpitch,false);
}
if(doors[i].doorhealth<=0)
{
doorpool.destroy_sound(doors[i].hurtsound);
doorpool.destroy_sound(doors[i].doorsound);
string[] defsfx=find_files("sounds/objects/doors/dest/"+doors[i].desttype+"/*death*");
if(defsfx.length()!=0) doors[i].defsound=doorpool.play_extended_2d("sounds/objects/doors/dest/"+doors[i].desttype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,doors[i].startx,doors[i].starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
doors.remove_at(i);
return;
}
}
}
void doorloop()
{
for(uint i=0; i<doors.length(); i++)
{
if(doors[i].doortimer.elapsed>=doors[i].speed and doors[i].is_moving)
{
doors[i].doortimer.restart();
if(doors[i].speed==-1)
{
me.x=doors[i].endx;
me.y=doors[i].endy;
}
if(me.x<doors[i].endx)
{
me.x++;
}
if(me.x>doors[i].endx)
{
me.x--;
}
if(me.y<doors[i].endy)
{
me.y++;
}
if(me.y>doors[i].endy)
{
me.y--;
}
if(me.x==doors[i].endx and me.y==doors[i].endy)
{
doorpool.destroy_sound(doors[i].movesound);
string[] closesfx=find_files("sounds/objects/doors/close/"+doors[i].closetype+"/*close*");
if(closesfx.length()!=0) doors[i].closesound=doorpool.play_stationary_extended("sounds/objects/doors/close/"+doors[i].closetype+"/"+closesfx[random(0,closesfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
doormove=false;
doors[i].is_moving=false;
}
}
}
}
void spawn_door(int x,int y,int x2,int y2,double hp,double maxhp,int speed,string looptype,string movetype,string opentype,string closetype,string desttype,bool automatic,bool destroyable)
{
door dr1(x,y,x2,y2,hp,maxhp,speed,looptype,movetype,opentype,closetype,desttype,automatic,destroyable);
doors.insert_last(dr1);
}
void destroy_all_doors()
{
for(uint i=0; i<doors.length(); i++)
{
doorpool.destroy_sound(doors[i].doorsound);
doorpool.destroy_sound(doors[i].movesound);
}
doors.resize(0);
doormove=false;
}
