turret@[]turrets(0);
class turret
{
bool fireable, moveable, moveable2;
int defsound, firesound, hurtsound, tursound, wepsound;
double turlevel;
double turxp;
int turcard;
int turehealth;
double turhealth;
double turmaxhealth;
int turx;
int tury;
int damage;
int firetime;
int launchtime;
int turtime;
string turtype;
string turtype2;
string turtype3;
timer firetimer, launchtimer, turtimer;
turret(int tx,int ty,double hp,double maxhp,int tc,int dm,int ft,int lt,int sp,double tlv,double txp,string tt,string ts,string ts2,bool tf,bool tm,bool tm2)
{
this.turehealth=hp;
turx=tx;
tury=ty;
turhealth=hp;
turmaxhealth=maxhp;
turcard=tc;
damage=dm;
firetime=ft;
launchtime=lt;
turtime=sp;
turlevel=tlv;
turxp=txp;
turtype=tt;
turtype2=ts;
turtype3=ts2;
fireable=tf;
moveable=tm;
moveable2=tm2;
string[] tursfx=find_files("sounds/npc/turrets/"+turtype+"/*loop*");
if(tursfx.length()!=0) tursound=turpool.play_extended_2d("sounds/npc/turrets/"+turtype+"/"+tursfx[random(0,tursfx.length()-1)],me.x,me.y,turx,tury,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void turretloop()
{
for(uint i=0; i<turrets.length(); i++)
{
if(turrets[i].launchtimer.elapsed>=turrets[i].launchtime)
{
string[] launchsfx=find_files("sounds/npc/turrets/"+turrets[i].turtype+"/*launch*");
if(launchsfx.length()!=0) turrets[i].firesound=turpool.play_extended_2d("sounds/npc/turrets/"+turrets[i].turtype+"/"+launchsfx[random(0,launchsfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
if(turrets[i].turtype2=="animal") spawn_animal(turrets[i].turx-1, turrets[i].tury, 0, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, true);
if(turrets[i].turtype2=="enemy") spawn_enemy(turrets[i].turx-1, turrets[i].tury, 0, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, true);
if(turrets[i].turtype2=="projectile") spawn_projectile(turrets[i].turx-1, turrets[i].tury, 1, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true);
if(turrets[i].turtype2=="robot") spawn_robot(turrets[i].turx-1, turrets[i].tury, 0, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, true);
if(turrets[i].turtype2=="zombie") spawn_zombie(turrets[i].turx-1, turrets[i].tury, 0, 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), turrets[i].turlevel, 1*level, turrets[i].turtype3, true, true, true);
turpool.update_sound_2d(turrets[i].firesound,turrets[i].turx,turrets[i].tury);
turrets[i].launchtimer.restart();
}
if(turrets[i].turtimer.elapsed>=turrets[i].turtime)
{
turpool.update_sound_2d(turrets[i].tursound,turrets[i].turx,turrets[i].tury);
turrets[i].turtimer.restart();
if(turrets[i].turx<me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx++;
}
if(turrets[i].turx>me.x and turrets[i].moveable==true and paused==0)
{
turrets[i].turx--;
}
if(turrets[i].tury<me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury++;
}
if(turrets[i].tury>me.y and turrets[i].moveable2==true and paused==0)
{
turrets[i].tury--;
}
}
if(me.x==turrets[i].turx and me.y==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=turrets[i].damage*turrets[i].turlevel-shielddefence;
turrets[i].firetimer.restart();
}
else if(me.x==turrets[i].turx and me.y==turrets[i].tury and turrets[i].firetimer.elapsed>=turrets[i].firetime and turrets[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("sounds/npc/turrets/"+turrets[i].turtype+"/*hit*");
if(hitsfx.length()!=0) turrets[i].wepsound=turpool.play_stationary_extended("sounds/npc/turrets/"+turrets[i].turtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=turrets[i].damage*turrets[i].turlevel-defence;
turrets[i].firetimer.restart();
}
if(turrets[i].turhealth<=0)
{
if(turrets[i].turcard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/npc/turrets/"+turrets[i].turtype+"/*life*");
if(lifesfx.length()!=0) turpool.play_2d("sounds/npc/turrets/"+turrets[i].turtype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,false);
turrets[i].turhealth=turrets[i].turehealth;
turrets[i].turcard-=1;
}
else if(turrets[i].turcard<=1 and paused==0)
{
turpool.destroy_sound(turrets[i].hurtsound);
turpool.destroy_sound(turrets[i].tursound);
string[] defsfx=find_files("sounds/npc/turrets/"+turrets[i].turtype+"/*death*");
if(defsfx.length()!=0) turrets[i].defsound=turpool.play_extended_2d("sounds/npc/turrets/"+turrets[i].turtype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,turrets[i].turx,turrets[i].tury,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=turrets[i].turxp*turrets[i].turlevel*xpmod;
kills+=1;
turrets.remove_at(i);
return;
}
}
}
}
void spawn_turret(int x,int y,double hp,double maxhp,int tc,int dm,int firetime,int launchtime,int turtime,double turlevel,double xp,string turtype,string turtype2,string turtype3,bool fireable,bool moveable,bool moveable2)
{
turret t1(x,y,hp,maxhp,tc,dm,firetime,launchtime,turtime,turlevel,xp,turtype,turtype2,turtype3,fireable,moveable,moveable2);
turrets.insert_last(t1);
}
void destroy_all_turrets()
{
for(uint i=0; i<turrets.length(); i++)
{
turpool.destroy_sound(turrets[i].tursound);
}
turrets.resize(0);
}
