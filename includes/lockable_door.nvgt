bool psdoormove;
psdoor@[]psdoors(0);
class psdoor
{
bool automatic, destroyable, is_moving;
int closesound, defsound, destsound, psdoorsound, hurtsound, movesound, opensound;
int startx, starty;
int endx, endy;
double psdoorhealth;
double psdoormaxhealth;
int speed;
string drpass;
string closetype;
string desttype;
string looptype;
string movetype;
string opentype;
timer psdoortimer;
psdoor(int sx,int sy,int ex,int ey,double hp,double maxhp,int sp,string pd,string lsound,string mvsound,string osound,string clsound,string dsound,bool dcl,bool dtb)
{
startx=sx;
starty=sy;
endx=ex;
endy=ey;
psdoorhealth=hp;
psdoormaxhealth=maxhp;
speed=sp;
drpass=pd;
looptype=lsound;
movetype=mvsound;
opentype=osound;
closetype=clsound;
desttype=dsound;
automatic=dcl;
destroyable=dtb;
string[] psdoorsfx=find_files("sounds/objects/doors/loop/"+looptype+"/*loop*");
if(psdoorsfx.length()!=0) psdoorsound=doorpool.play_extended_2d("sounds/objects/doors/loop/"+looptype+"/"+psdoorsfx[random(0,psdoorsfx.length()-1)],me.x,me.y,startx,starty,0,0,0,0,true,0,0,doorvolume,doorpitch,false);
}
bool check_password(string input)
{
return input == drpass;
}
}
void psdoorcheck()
{
for(uint i=0; i<psdoors.length(); i++)
{
if(psdoors[i].startx==me.x and psdoors[i].starty==me.y and psdoors[i].automatic==true)
{
psdoormove=true;
psdoors[i].is_moving=true;
string[] opensfx=find_files("sounds/objects/doors/open/"+psdoors[i].opentype+"/*open*");
if(opensfx.length()!=0) psdoors[i].opensound=doorpool.play_stationary_extended("sounds/objects/doors/open/"+psdoors[i].opentype+"/"+opensfx[random(0,opensfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
string[] movesfx=find_files("sounds/objects/doors/move/"+psdoors[i].movetype+"/*move*");
if(movesfx.length()!=0) psdoors[i].movesound=doorpool.play_stationary_extended("sounds/objects/doors/move/"+psdoors[i].movetype+"/"+movesfx[random(0,movesfx.length()-1)],true,0,0,doorvolume,doorpitch,false);
}
if(psdoors[i].startx==me.x and psdoors[i].starty==me.y and psdoors[i].automatic==false and key_pressed(KEY_RETURN))
{
string pass = input.input("Enter the password to open this locked door.");
if(psdoors[i].check_password(pass))
{
psdoormove=true;
psdoors[i].is_moving=true;
string[] opensfx=find_files("sounds/objects/doors/open/"+psdoors[i].opentype+"/*open*");
if(opensfx.length()!=0) psdoors[i].opensound=doorpool.play_stationary_extended("sounds/objects/doors/open/"+psdoors[i].opentype+"/"+opensfx[random(0,opensfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
string[] movesfx=find_files("sounds/objects/doors/move/"+psdoors[i].movetype+"/*move*");
if(movesfx.length()!=0) psdoors[i].movesound=doorpool.play_stationary_extended("sounds/objects/doors/move/"+psdoors[i].movetype+"/"+movesfx[random(0,movesfx.length()-1)],true,0,0,doorvolume,doorpitch,false);
}
else
{
speak("Invalid password. Please try again.");
}
}
if(psdoors[i].psdoorhealth<=0)
{
doorpool.destroy_sound(psdoors[i].hurtsound);
doorpool.destroy_sound(psdoors[i].psdoorsound);
string[] defsfx=find_files("sounds/objects/doors/dest/"+psdoors[i].desttype+"/*death*");
if(defsfx.length()!=0) psdoors[i].defsound=doorpool.play_extended_2d("sounds/objects/doors/dest/"+psdoors[i].desttype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,psdoors[i].startx,psdoors[i].starty,0,0,0,0,false,0,0,doorvolume,doorpitch,false);
psdoors.remove_at(i);
return;
}
}
}
void psdoorloop()
{
for(uint i=0; i<psdoors.length(); i++)
{
if(psdoors[i].psdoortimer.elapsed>=psdoors[i].speed and psdoors[i].is_moving)
{
psdoors[i].psdoortimer.restart();
if(psdoors[i].speed==-1)
{
me.x=psdoors[i].endx;
me.y=psdoors[i].endy;
}
if(me.x<psdoors[i].endx)
{
me.x++;
}
if(me.x>psdoors[i].endx)
{
me.x--;
}
if(me.y<psdoors[i].endy)
{
me.y++;
}
if(me.y>psdoors[i].endy)
{
me.y--;
}
if(me.x==psdoors[i].endx and me.y==psdoors[i].endy)
{
doorpool.destroy_sound(psdoors[i].movesound);
string[] closesfx=find_files("sounds/objects/doors/close/"+psdoors[i].closetype+"/*close*");
if(closesfx.length()!=0) psdoors[i].closesound=doorpool.play_stationary_extended("sounds/objects/doors/close/"+psdoors[i].closetype+"/"+closesfx[random(0,closesfx.length()-1)],false,0,0,doorvolume,doorpitch,false);
psdoormove=false;
psdoors[i].is_moving=false;
}
}
}
}
void spawn_psdoor(int x,int y,int x2,int y2,double hp,double maxhp,int speed,string pass,string looptype,string movetype,string opentype,string closetype,string desttype,bool automatic,bool destroyable)
{
psdoor pdr1(x,y,x2,y2,hp,maxhp,speed,pass,looptype,movetype,opentype,closetype,desttype,automatic,destroyable);
psdoors.insert_last(pdr1);
}
void destroy_all_psdoors()
{
for(uint i=0; i<psdoors.length(); i++)
{
doorpool.destroy_sound(psdoors[i].psdoorsound);
doorpool.destroy_sound(psdoors[i].movesound);
}
psdoors.resize(0);
psdoormove=false;
}
