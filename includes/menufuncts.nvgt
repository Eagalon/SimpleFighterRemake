menuzone@[]menuzones(0);
class menuzone
{
double minx, maxx, miny, maxy;
menuzone(double mx,double mx2,double my,double my2)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
}
void menzmenu()
{
setupmenu();
m.add_item_tts("add a line", "addline");
m.add_item_tts("edit a line", "editline");
m.add_item_tts("remove a line", "remline");
m.add_item_tts("copy raw map data to clipboard", "clboard");
m.add_item_tts("paste raw map data from clipboard", "clboard2");
m.add_item_tts("Go to a zone on the map.","gmz");
m.add_item_tts("delete map", "dcm");
m.add_item_tts("load map", "lm");
m.add_item_tts("new map", "nm");
m.add_item_tts("reload map", "rcm");
int mres=m.run("Map menu",true);
string mapem=m.get_item_name(mres);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mapem=="addline")
{
mapper.open("data/maps/"+mapname+".map", "ab");
mapdata=mapper.read();
//input.set_only_allowed_chars("none");
string newline=virtual_input_box("","Enter the line you'd like to add.");
resume_pools();
mapper.write("\r\n"+newline);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
if(mapem=="remline")
{
mapper.open("data/maps/"+mapname+".map", "rb");
mapdata=mapper.read();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to remove", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>3 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
lines.remove_at(original_index);
string final;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) final+="\r\n";
final+=lines[i];
}
resume_pools();
mapper.open("data/maps/"+mapname+".map", "wb");
mapdata=mapper.read();
mapper.write(final);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mapem=="editline")
{
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
mapper.close();
string[] lines=string_split(mapdata, "\r\n", true);
string[] filtered_lines;
uint[] original_lines;
filter_empty_lines(lines, filtered_lines, original_lines);
setupmenu();
for (uint i=0; i<filtered_lines.length(); i++)
{
m.add_item_tts(filtered_lines[i],filtered_lines[i], "", true);
}
int mres=m.run("Select a line to edit", true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres>0 and mres<=filtered_lines.length())
{
uint original_index=original_lines[mres-1];
//input.set_only_allowed_chars("none");
string final=virtual_input_box("","line editor", lines[original_index]);
lines[original_index]=final; 
string mapline;
for (uint i=0; i<lines.length(); i++)
{
if(i>0) mapline+="\r\n";
mapline += lines[i];
}
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "wb");
mapper.write(mapline);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mapem=="dcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to delete the current map? This action can't be undone.",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
if(file_exists("data/maps/"+mapname+".map")) file_delete("data/maps/"+mapname+".map");
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
speak("map deleted");
dlgplay("mapdelete.ogg",false);
me.x=0;
me.y=0;
clearmap();
destroymap();
mapmenu();
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(mapem=="gmz")
{
if (zones.length() == 0)
{
speak("There are no zones available on this map.");
return;
}
setupmenu();
for (uint i = 0; i < zones.length(); i++)
{
double width = zones[i].maxx - zones[i].minx + 1;
double height = zones[i].maxy - zones[i].miny + 1;
string zone_desc = zones[i].text + ", " +int(width) + " x " + int(height) + " zone, at " +int(zones[i].minx) + ", " + int(zones[i].miny);
m.add_item_tts(zone_desc, zones[i].text);
}
int mres=m.run("Choose the zone you'd like to go to. There are "+zones.length()+" zones available on this map.", true);
if(mres==0)
{
speak("canceled");
return;
}
if (mres==0 and mres>=zones.length())
{
int selected_zone_index = mres - 1;
zone@ selected_zone = zones[selected_zone_index];
double target_x = selected_zone.minx;
double target_y = selected_zone.miny;
gop(int(target_x), int(target_y));
resume_pools();
}
if (mres>0 and mres<=zones.length())
{
int selected_zone_index = mres - 1;
zone@ selected_zone = zones[selected_zone_index];
double target_x = selected_zone.minx;
double target_y = selected_zone.miny;
gop(int(target_x), int(target_y));
resume_pools();
}
}
if(mapem=="clboard")
{
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "rb");
mapdata=mapper.read();
clipboard_copy_text(mapdata);
speak("The data of "+mapname+" has been copied to your clipboard");
mapper.close();
}
if(mapem=="clboard2")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to overwrite all existing map data with what's on your clipboard?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
resume_pools();
mapper.open("data/maps/" + mapname + ".map", "wb");
mapdata=mapper.read();
mapdata=clipboard_read_text();
if(mapdata=="") dlg_snd("Error. The map data you've pasted is invalid.");
else
{
resume_pools();
mapper.write(mapdata);
mapper.close();
load_map(mapname);
mpool.play_stationary("mapupdate.ogg",false);
speak("Map updated.");
}
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
if(mapem=="lm")
{
resume_pools();
string[] maps=find_files("data/maps/*.map");
if(maps.length()==0)
{
dlg_snd("Error. There are no maps available to view. Press enter to continue.");
mapmenu();
}
else
{
setupmenu();
for(uint i=0; i<maps.length(); i++)
{
m.add_item_tts(string_replace(maps[i],".map","",true)+", size: "+measure_file_size(file_get_size("data/maps/"+maps[i])));
}
int mres=m.run("Maps menu", true);
if(mres==0)
{
speak("canceled");
return;
}
if (mres==0 and mres>=maps.length())
{
speak("canceled");
return;
}
if (mres>0 and mres<=maps.length())
{
mapname=maps[mres-1];
mapname=string_replace(mapname, ".map", "", true);
me.x=0;
me.y=0;
load_map(mapname);
}
}
}
if(mapem=="nm")
{
resume_pools();
input.set_only_allowed_chars("none");
string name=input.input("Enter the name of this map.");
input.set_only_allowed_chars("1234567890-");
string mx=input.input("Enter the maximum length of this map.");
string my=input.input("Enter the maximum height of this map.");
if(mapname=="" and maxx=="" and maxy=="")
return;
mapname=name;
maxx=string_to_number(mx);
maxy=string_to_number(my);
string[] platform=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
if(platform.length()==0)
{
dlg_snd("Error. There are no platforms available to view. Press enter to continue.");
return;
}
else
{
string res=platsmenu();
if(res!="")
{
tiletype=res;
}
}
if(file_exists("data/maps/"+mapname+".map"))
{
dlg_snd("Error. A map with this name already exists. Press enter to continue.");
return;
}
else
{
create_map(mapname, maxx, maxy, tiletype);
load_map(mapname);
}
}
if(mapem=="rcm")
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to reload the current map?",true);
if(mres==0)
{
resume_pools();
speak("canceled");
return;
}
if(mres==1)
{
resume_pools();
load_map(mapname);
speak("map reloaded");
}
if(mres==2)
{
resume_pools();
speak("canceled");
return;
}
}
}
}
void menuzoneloop()
{
for(uint i=0; i<menuzones.length(); i++)
{
if(menuzones[i].minx<=me.x and menuzones[i].maxx>=me.x and menuzones[i].miny<=me.y and menuzones[i].maxy>=me.y and key_repeating(KEY_RETURN))
{
menuzones[i].menzmenu();
}
}
}
void create_menuzone(double x1,double x2,double y1,double y2)
{
menuzone menz1(x1,x2,y1,y2);
menuzones.insert_last(menz1);
}
void destroy_all_menuzones()
{
menuzones.resize(0);
}

string keyboardchoosers()
{
string[] keyboardchanges=find_directories("data/sounds/"+soundpack+"/typing themes/*");
setupmenu();
m.set_callback(@keyboardchanges_callback,"");
for (uint i=0; i<keyboardchanges.length(); i++)
{
m.add_item_tts(keyboardchanges[i],keyboardchanges[i],"",true);
}
int mres=m.run("Choose the keyboard theme you would like to use in all input boxes.",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=keyboardchanges.length())
{
keyboardtheme=keyboardchanges[mres-1];
dlg("Keyboard theme set. Press enter to continue.");
settingsmenu();
}
return m.get_item_name(mres);
}
int keyboardchanges_callback(dynamic_menu_pro@ m, string data)
{
string keyboardchanges;
if(m.menu_position>0)
keyboardchanges=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_T) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_T) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] typesfx=find_files("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*type*");
if(typesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+typesfx[random(0,typesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_S) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_S) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] spacesfx=find_files("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*space*");
if(spacesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+spacesfx[random(0,spacesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] entersfx=find_files("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*return*");
if(entersfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+entersfx[random(0,entersfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] deletesfx=find_files("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/*delete*");
if(deletesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/typing themes/"+keyboardchanges+"/"+deletesfx[random(0,deletesfx.length()-1)],false);
}
return 0;
}
string menuchoosers()
{
string[] menuchanges=find_directories("data/sounds/"+soundpack+"/menus/*");
setupmenu();
m.set_callback(@menuchanges_callback,"");
for (uint i=0; i<menuchanges.length(); i++)
{
m.add_item_tts(menuchanges[i],menuchanges[i],"",true);
}
int mres=m.run("Choose the menu theme you would like to use in all menus.",true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=menuchanges.length())
{
menutype=menuchanges[mres-1];
dlg("Menu sounds set. Press enter to continue.");
settingsmenu();
}
return m.get_item_name(mres);
}
int menuchanges_callback(dynamic_menu_pro@ m, string data)
{
string menuchanges;
if(m.menu_position>0)
menuchanges=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_C) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_C) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mclick=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*click*");
if(mclick.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mclick[random(0,mclick.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mclos=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*close*");
if(mclos.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mclos[random(0,mclos.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] medge=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*edge*");
if(medge.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+medge[random(0,medge.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] menter=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*enter*");
if(menter.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+menter[random(0,menter.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_O) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_O) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mopen=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*open*");
if(mopen.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mopen[random(0,mopen.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_P) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_P) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] mrap=find_files("data/sounds/"+soundpack+"/menus/"+menuchanges+"/*wrap*");
if(mrap.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/menus/"+menuchanges+"/"+mrap[random(0,mrap.length()-1)],false);
}
return 0;
}
string liftsmenu()
{
string[] lifts=find_directories("data/sounds/"+soundpack+"/objects/lifts/*");
setupmenu2();
m.set_callback(@lifts_callback,"");
for (uint i=0; i<lifts.length(); i++)
{
string letter=string_replace(lifts[i],".ogg","",true)[0];
string[] liftfilesfx=find_files("data/sounds/"+soundpack+"/objects/lifts/"+lifts[i]+"/*loop*");
if(liftfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/lifts/"+lifts[i]+"/"+liftfilesfx[random(0,liftfilesfx.length()-1)],lifts[i],letter,true);
}
int mres=m.run("lifts menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=lifts.length())
{
}
return m.get_item_name(mres);
}
int lifts_callback(dynamic_menu_pro@ m, string data)
{
string lifttyp;
if(m.menu_position>0)
lifttyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(lifttyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(lifttyp);
}
return 0;
}string mplatsmenu()
{
string[] mplats=find_directories("data/sounds/"+soundpack+"/objects/moving platforms/*");
setupmenu2();
m.set_callback(@mplats_callback,"");
for (uint i=0; i<mplats.length(); i++)
{
string letter=string_replace(mplats[i],".ogg","",true)[0];
string[] mpfilesfx=find_files("data/sounds/"+soundpack+"/objects/moving platforms/"+mplats[i]+"/*loop*");
if(mpfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/moving platforms/"+mplats[i]+"/"+mpfilesfx[random(0,mpfilesfx.length()-1)],mplats[i],letter,true);
}
int mres=m.run("moving platforms menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=mplats.length())
{
}
return m.get_item_name(mres);
}
int mplats_callback(dynamic_menu_pro@ m, string data)
{
string mplattyp;
if(m.menu_position>0)
mplattyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(mplattyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(mplattyp);
}
return 0;
}
string platsmenu()
{
string[] plats=find_directories("data/sounds/"+soundpack+"/objects/platforms/*");
setupmenu();
m.set_callback(@steps_callback,"");
for (uint i=0; i<plats.length(); i++)
{
m.add_item_tts(plats[i],plats[i],"",true);
}
m.add_item_tts("air","air");
int mres=m.run("Select a surface.", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="air")
{
tiletype="air";
return tiletype;
}
if(mres>0 and mres<=plats.length())
{
tiletype=plats[mres-1];
}
return m.get_item_name(mres);
}
int steps_callback(dynamic_menu_pro@ m, string data)
{
string tiletype;
if(m.menu_position>0)
tiletype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] tilers=find_files("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*step*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] tilers=find_files("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*step*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] tilers=find_files("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*fall*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] tilers=find_files("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/*land*");
if(tilers.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/platforms/"+tiletype+"/"+tilers[random(0,tilers.length()-1)],false);
}
return 0;
}
string wallsmenu()
{
string[] borders=find_directories("data/sounds/"+soundpack+"/objects/walls/*");
setupmenu2();
m.set_callback(@walls_callback,"");
for (uint i=0; i<borders.length(); i++)
{
string letter=string_replace(borders[i],"wall","",true)[0];
string[] wallers=find_files("data/sounds/"+soundpack+"/objects/walls/"+borders[i]+"/*wall*");
if(wallers.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/walls/"+borders[i]+"/"+wallers[random(0,wallers.length()-1)],borders[i],letter,true);
}
m.add_item_tts("wall","wall");
int mres=m.run("Select a wall.", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="wall")
{
walltype="wall";
return walltype;
}
if(mres>0 and mres<=borders.length())
{
}
return m.get_item_name(mres);
}
int walls_callback(dynamic_menu_pro@ m, string data)
{
string walltype;
if(m.menu_position>0)
walltype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(walltype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(walltype);
}
return 0;
}
string charsmenu()
{
string[] chars=find_directories("data/sounds/"+soundpack+"/characters/*");
setupmenu();
m.set_callback(@chars_callback,"");
for (uint i=0; i<charas.length(); i++)
{
m.add_item_tts(charas[i].name+". attack "+charas[i].attack+". Defence "+charas[i].defence+". Lives "+charas[i].lifecard+".",charas[i].name,"",true);
}
int mres=m.run("Characters menu", true);
if(mres==0)
{
speak("canceled");
settingsmenu();
}
if(mres>0 and mres<=charas.length())
{
int charindex=mres-1;
@current_char=charas[charindex];
chartype = current_char.name;
weapontype=current_char.weapontype;
weapontype2=current_char.weapontype2;
shieldtype=current_char.shieldtype;
shieldweight=current_char.shieldweight;
attack=current_char.attack;
defence=current_char.defence;
points=current_char.points;
health=current_char.health;
maxhealth=current_char.maxhealth;
lifecard=current_char.lifecard;
level=current_char.level;
levmod=current_char.levmod;
xp=current_char.xp;
xpmod=current_char.xpmod;
xprequiered=current_char.xprequiered;
charbuysound=current_char.charbuysound;
charcamsound=current_char.charcamsound;
charcamsound2=current_char.charcamsound2;
charcamsound3=current_char.charcamsound3;
chardeathsound=current_char.chardeathsound;
charfallsound=current_char.charfallsound;
charfallsound2=current_char.charfallsound2;
charhurtsound=current_char.charhurtsound;
charhealsound=current_char.charhealsound;
charhealsound2=current_char.charhealsound2;
charhealsound3=current_char.charhealsound3;
charinvsound=current_char.charinvsound;
charjumpsound=current_char.charjumpsound;
charjumpsound2=current_char.charjumpsound2;
charkillsound=current_char.charkillsound;
charlandsound=current_char.charlandsound;
charlevsound=current_char.charlevsound;
charlifesound=current_char.charlifesound;
charshakesound=current_char.charshakesound;
charsitsound=current_char.charsitsound;
charstandsound=current_char.charstandsound;
charswingsound=current_char.charswingsound;
chartelsound=current_char.chartelsound;
chartelsound2=current_char.chartelsound2;
chartelsound3=current_char.chartelsound3;
charturnsound=current_char.charturnsound;
if(mres-1<chars.length())
{
chartype=chars[mres-1];
dlg("Character set. Press enter to continue.");
settingsmenu();
}
else
{
chartype="default";
speak("Character set.");
settingsmenu();
}
}
return m.get_item_name(mres);
}
int chars_callback(dynamic_menu_pro@ m, string data)
{
string chars;
if(m.menu_position>0)
chars=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_D) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_D) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_J) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_J) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] jumpsfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*jump*");
if(jumpsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*name*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] turnsfx=find_files("data/sounds/"+soundpack+"/characters/"+chars+"/*turn*");
if(turnsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/characters/"+chars+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
}
return 0;
}
string drinkmenu()
{
string[] jucers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/*");
setupmenu();
m.set_callback(@drinks_callback,"");
for (uint i=0; i<jucers.length(); i++)
{
m.add_item_tts(jucers[i],jucers[i],"",true);
}
int mres=m.run("Drinks menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=jucers.length())
{
resume_pools();
drinktype=jucers[mres-1];
speak(drinktype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int drinks_callback(dynamic_menu_pro@ m, string data)
{
string drinktype;
if(m.menu_position>0)
drinktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/drinks/"+drinktype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string foodmenu()
{
string[] spicers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/foods/*");
setupmenu();
m.set_callback(@foods_callback,"");
for (uint i=0; i<spicers.length(); i++)
{
m.add_item_tts(spicers[i],spicers[i],"",true);
}
int mres=m.run("Foods menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=spicers.length())
{
resume_pools();
foodtype=spicers[mres-1];
speak(foodtype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*draw*");
if(drawsfx.length()!=0) itemslot=p.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int foods_callback(dynamic_menu_pro@ m, string data)
{
string foodtype;
if(m.menu_position>0)
foodtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/foods/"+foodtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string healermenu()
{
string[] healthers=find_directories("data/sounds/"+soundpack+"/equipments/items/sorted/healers/*");
setupmenu();
m.set_callback(@healers_callback,"");
for (uint i=0; i<healthers.length(); i++)
{
m.add_item_tts(healthers[i],healthers[i],"",true);
}
int mres=m.run("Healers menu", true);
if(mres==0)
{
itemsmenu();
}
if(mres>0 and mres<=healthers.length())
{
resume_pools();
healtype=healthers[mres-1];
speak(healtype+";"+"equipped");
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*draw*");
if(drawsfx.length()!=0) itemslot=p.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
return m.get_item_name(mres);
}
int healers_callback(dynamic_menu_pro@ m, string data)
{
string healtype;
if(m.menu_position>0)
healtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/sorted/healers/"+healtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(itemslot,weaponpan,weaponvolume,weaponpitch);
}
return 0;
}
string healthsmenu()
{
string[] healtype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/health/*");
setupmenu();
m.set_callback(@healths_callback,"");
for (uint i=0; i<healtype.length(); i++)
{
m.add_item_tts(healtype[i],healtype[i],"",true);
}
int mres=m.run("Healths menu", true);
if(mres==0)
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
}
if(itsm=="hp")
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
if(itsm=="ot")
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
if(mres>0 and mres<=healtype.length())
{
itemtype2=healtype[mres-1];
}
return m.get_item_name(mres);
}
int healths_callback(dynamic_menu_pro@ m, string data)
{
string healtype;
if(m.menu_position>0)
healtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] getsfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+getsfx[random(0,getsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/health/"+healtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string othersmenu()
{
string[] misktype=find_directories("data/sounds/"+soundpack+"/equipments/items/unsorted/other/*");
setupmenu();
m.set_callback(@others_callback,"");
for (uint i=0; i<misktype.length(); i++)
{
m.add_item_tts(misktype[i],misktype[i],"",true);
}
int mres=m.run("others menu", true);
if(mres==0)
{
setupmenu();
m.add_item_tts("health", "hp");
m.add_item_tts("other", "ot");
m.add_item_tts("weapon", "wep");
int mres=m.run("Items menu",true);
string itsm=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
}
if(itsm=="hp")
{
string res=healthsmenu();
if(res!="")
{
itemtype="health";
itemtype2=res;
}
}
if(itsm=="ot")
{
string res=othersmenu();
if(res!="")
{
itemtype="other";
itemtype2=res;
}
}
}
if(mres>0 and mres<=misktype.length())
{
itemtype2=misktype[mres-1];
}
return m.get_item_name(mres);
}
int others_callback(dynamic_menu_pro@ m, string data)
{
string misktype;
if(m.menu_position>0)
misktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] getsfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/items/unsorted/other/"+misktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string archersmenu()
{
string[] archers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/archery/*");
setupmenu();
m.set_callback(@archers_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("Archery menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<archers.length())
{
resume_pools();
weapontype2=archers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int archers_callback(dynamic_menu_pro@ m, string data)
{
string archers;
if(m.menu_position>0)
archers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/archery/"+archers+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string gunsmenu()
{
string[] fighters=find_directories("data/sounds/"+soundpack+"/equipments/weapons/artillery/*");
setupmenu();
m.set_callback(@guns_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("artillery menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<fighters.length())
{
resume_pools();
weapontype2=fighters[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int guns_callback(dynamic_menu_pro@ m, string data)
{
string fighters;
if(m.menu_position>0)
fighters=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/artillery/"+fighters+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string explosesmenu()
{
string[] killers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/explosive/*");
setupmenu();
m.set_callback(@bombs_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("explosive menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<killers.length())
{
resume_pools();
weapontype2=killers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int bombs_callback(dynamic_menu_pro@ m, string data)
{
string killers;
if(m.menu_position>0)
killers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+hitsfx[random(0,hitsfx.length()-1)],false); p.update_sound_start_values(weaponslot,weaponpan,weaponvolume,weaponpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_E) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_E) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] emptysfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*empty*");
if(emptysfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+emptysfx[random(0,emptysfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] reloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*reload*");
if(reloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_U) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_U) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] unloadsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/*unload*");
if(unloadsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/explosive/"+killers+"/"+unloadsfx[random(0,unloadsfx.length()-1)],false);
}
return 0;
}
string meleesmenu()
{
string[] brawlers=find_directories("data/sounds/"+soundpack+"/equipments/weapons/melee/*");
setupmenu();
m.set_callback(@swords_callback,"");
for (uint i=0; i<weapons.length(); i++)
{
m.add_item_tts(weapons[i].name+". attack "+weapons[i].wepdamage+". Horizontal range "+weapons[i].weprange+". Vertical range "+weapons[i].weprange2+". Weight, "+weapons[i].wepweight+" kilograms.",weapons[i].name,"",true);
}
int mres=m.run("melee menu", true);
if(mres==0)
{
weaponsmenu();
}
if(mres>0 and mres<=weapons.length())
{
int wepindex=mres-1;
@current_weapon=weapons[wepindex];
wepdamage=current_weapon.wepdamage;
wephold=current_weapon.wephold;
weprange=current_weapon.weprange;
weprange2=current_weapon.weprange2;
wepspeed=current_weapon.wepspeed;
weapontime=current_weapon.weapontime;
weapontime2=current_weapon.weapontime2;
wepweight=current_weapon.wepweight;
ammo=current_weapon.ammo;
loadedammo=current_weapon.loadedammo;
maxammo=current_weapon.maxammo;
weplevel=current_weapon.weplevel;
wepdrawsound=current_weapon.wepdrawsound;
wepemptysound=current_weapon.wepemptysound;
wepfiresound=current_weapon.wepfiresound;
wephitsound=current_weapon.wephitsound;
weploopsound=current_weapon.weploopsound;
weprecsound=current_weapon.weprecsound;
wepreloadsound=current_weapon.wepreloadsound;
wepshellsound=current_weapon.wepshellsound;
if(mres-1<brawlers.length())
{
resume_pools();
weapontype2 = brawlers[mres-1];
}
else
{
resume_pools();
weapontype2="fist";
}
}
return m.get_item_name(mres);
}
int swords_callback(dynamic_menu_pro@ m, string data)
{
string brawlers;
if(m.menu_position>0)
brawlers=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+firesfx[random(0,firesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] firesfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*fire*");
if(firesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+firesfx[random(0,firesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+drawsfx[random(0,drawsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/equipments/weapons/melee/"+brawlers+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
return 0;
}
string shieldsmenu()
{
string[] armor=find_directories("data/sounds/"+soundpack+"/equipments/shields/*");
setupmenu();
m.set_callback(@shields_callback,"");
for (uint i=0; i<shields.length(); i++)
{
if(shields[i].shieldmode==0) m.add_item_tts(shields[i].name+". Defence "+shields[i].shielddefence+". Mode worn."+" Weight, "+shields[i].shieldweight+" kilograms.",shields[i].name,"",true);
if(shields[i].shieldmode==1) m.add_item_tts(shields[i].name+". Defence "+shields[i].shielddefence+". Mode razed."+" Weight, "+shields[i].shieldweight+" kilograms.",shields[i].name,"",true);
}
int mres=m.run("Shields menu", true);
if(mres==0)
{
resume_pools();
speak("canceled");
}
if(mres>0 and mres<=shields.length())
{
int shieldindex=mres-1;
@current_shield=shields[shieldindex];
shielddefence=current_shield.shielddefence;
shieldmode=current_shield.shieldmode;
shieldweight=current_shield.shieldweight;
shieldstrength=current_shield.shieldstrength;
maxshieldstrength=current_shield.maxshieldstrength;
shieldlevel=current_shield.shieldlevel;
shieldbreaksound=current_shield.shieldbreaksound;
shielddrawsound=current_shield.shielddrawsound;
shieldhitsound=current_shield.shieldhitsound;
shieldloopsound=current_shield.shieldloopsound;
shieldremovesound=current_shield.shieldremovesound;
shieldwearsound=current_shield.shieldwearsound;
if(mres-1<armor.length())
{
resume_pools();
shieldtype=armor[mres-1];
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*draw*");
if(drawsfx.length()!=0 and shielddrawsound==1) shieldslot=p.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
speak(shieldtype+";"+"equipped");
}
else
{
shieldtype="none";
speak(shieldtype+";"+"equipped");
}
}
return m.get_item_name(mres);
}
int shields_callback(dynamic_menu_pro@ m, string data)
{
string shieldtype;
if(m.menu_position>0)
shieldtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] arqsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] arqsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] drawsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*draw*");
if(drawsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+drawsfx[random(0,drawsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] breaksfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*break*");
if(breaksfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+breaksfx[random(0,breaksfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_R) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_R) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] removesfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*remove*");
if(removesfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+removesfx[random(0,removesfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_W) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_W) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] wearsfx=find_files("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*wear*");
if(wearsfx.length()!=0) prevslot=t.play_stationary_extended("data/sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+wearsfx[random(0,wearsfx.length()-1)],false,0,0,shieldvolume,shieldpitch);
}
return 0;
}
string animalsmenu(bool include_random=false)
{
string[] animaltype=find_directories("data/sounds/"+soundpack+"/npc/normal/animals/*");
setupmenu();
m.set_callback(@animals_callback,"");
for (uint i=0; i<animaltype.length(); i++)
{
m.add_item_tts(animaltype[i],animaltype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("Animals menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=animals.length())
{
amtype=animaltype[mres-1];
}
return m.get_item_name(mres);
}
int animals_callback(dynamic_menu_pro@ m, string data)
{
string animaltype;
if(m.menu_position>0)
animaltype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/animals/"+animaltype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string bombsmenu()
{
string[] bombtype=find_directories("data/sounds/"+soundpack+"/objects/bombs/*");
setupmenu();
m.set_callback(@bombes_callback,"");
for (uint i=0; i<bombtype.length(); i++)
{
m.add_item_tts(bombtype[i],bombtype[i],"",true);
}
int mres=m.run("bombs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
botype=bombtype[mres-1];
}
return m.get_item_name(mres);
}
int bombes_callback(dynamic_menu_pro@ m, string data)
{
string bombtype;
if(m.menu_position>0)
bombtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/*fall*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+bombtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string floorsmenu()
{
string[] floorbtype=find_directories("data/sounds/"+soundpack+"/objects/floor breakers/*");
setupmenu();
m.set_callback(@floores_callback,"");
for (uint i=0; i<floorbtype.length(); i++)
{
m.add_item_tts(floorbtype[i],floorbtype[i],"",true);
}
int mres=m.run("floor breakers menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
floortyp=floorbtype[mres-1];
}
return m.get_item_name(mres);
}
int floores_callback(dynamic_menu_pro@ m, string data)
{
string floorbtype;
if(m.menu_position>0)
floorbtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/floor breakers/"+floorbtype+"/*spawn*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/floor breakers/"+floorbtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/bombs/"+floorbtype+"/*land*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/bombs/"+floorbtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string timbombsmenu()
{
string[] timbombtype=find_directories("data/sounds/"+soundpack+"/objects/time bombs/*");
setupmenu();
m.set_callback(@timbombes_callback,"");
for (uint i=0; i<timbombtype.length(); i++)
{
m.add_item_tts(timbombtype[i],timbombtype[i],"",true);
}
int mres=m.run("time bombs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bombs.length())
{
timbotype=timbombtype[mres-1];
}
return m.get_item_name(mres);
}
int timbombes_callback(dynamic_menu_pro@ m, string data)
{
string timbombtype;
if(m.menu_position>0)
timbombtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*land*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/*tick*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/time bombs/"+timbombtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string checksmenu()
{
string[] checktype=find_directories("data/sounds/"+soundpack+"/objects/checkpoints/*");
setupmenu();
m.set_callback(@checks_callback,"");
for (uint i=0; i<checktype.length(); i++)
{
m.add_item_tts(checktype[i],checktype[i],"",true);
}
int mres=m.run("checkpoints menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=checkpoints.length())
{
checktyp=checktype[mres-1];
}
return m.get_item_name(mres);
}
int checks_callback(dynamic_menu_pro@ m, string data)
{
string checktype;
if(m.menu_position>0)
checktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] getsfx=find_files("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*get*");
if(getsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+getsfx[random(0,getsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/checkpoints/"+checktype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string destsmenu()
{
string[] desttype=find_directories("data/sounds/"+soundpack+"/objects/doors/dest/*");
setupmenu();
m.set_callback(@dests_callback,"");
for (uint i=0; i<desttype.length(); i++)
{
m.add_item_tts(desttype[i],desttype[i],"",true);
}
int mres=m.run("door destructions menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=desttype.length())
{
desttyp=desttype[mres-1];
}
return m.get_item_name(mres);
}
int dests_callback(dynamic_menu_pro@ m, string data)
{
string desttype;
if(m.menu_position>0)
desttype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/doors/dest/"+desttype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string enemiesmenu(bool include_random=false)
{
string[] enemytype=find_directories("data/sounds/"+soundpack+"/npc/normal/enemies/*");
setupmenu();
m.set_callback(@enemies_callback,"");
for (uint i=0; i<enemytype.length(); i++)
{
m.add_item_tts(enemytype[i],enemytype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("enemies menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=enemies.length())
{
emtype=enemytype[mres-1];
}
return m.get_item_name(mres);
}
int enemies_callback(dynamic_menu_pro@ m, string data)
{
string enemytype;
if(m.menu_position>0)
enemytype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/enemies/"+enemytype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string projesmenu(bool include_random=false)
{
string[] projtype=find_directories("data/sounds/"+soundpack+"/npc/normal/projectiles/*");
setupmenu();
m.set_callback(@projectiles_callback,"");
for (uint i=0; i<projtype.length(); i++)
{
m.add_item_tts(projtype[i],projtype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("projectiles menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=projectiles.length())
{
potype=projtype[mres-1];
}
return m.get_item_name(mres);
}
int projectiles_callback(dynamic_menu_pro@ m, string data)
{
string projtype;
if(m.menu_position>0)
projtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/projectiles/"+projtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string robotsmenu(bool include_random=false)
{
string[] robottype=find_directories("data/sounds/"+soundpack+"/npc/normal/robots/*");
setupmenu();
m.set_callback(@robots_callback,"");
for (uint i=0; i<robottype.length(); i++)
{
m.add_item_tts(robottype[i],robottype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("robots menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=robots.length())
{
rotype=robottype[mres-1];
}
return m.get_item_name(mres);
}
int robots_callback(dynamic_menu_pro@ m, string data)
{
string robottype;
if(m.menu_position>0)
robottype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/robots/"+robottype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string bossesmenu()
{
string[] bosstype=find_directories("data/sounds/"+soundpack+"/npc/boss/*");
setupmenu();
m.set_callback(@bosses_callback,"");
for (uint i=0; i<bosstype.length(); i++)
{
m.add_item_tts(bosstype[i],bosstype[i],"",true);
}
int mres=m.run("bosses menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=bosses.length())
{
bosstyp=bosstype[mres-1];
}
return m.get_item_name(mres);
}
int bosses_callback(dynamic_menu_pro@ m, string data)
{
string bosstype;
if(m.menu_position>0)
bosstype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/boss/"+bosstype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string turretsmenu()
{
string[] turtype=find_directories("data/sounds/"+soundpack+"/npc/normal/turrets/*");
setupmenu();
m.set_callback(@turrets_callback,"");
for (uint i=0; i<turtype.length(); i++)
{
m.add_item_tts(turtype[i],turtype[i],"",true);
}
int mres=m.run("turrets menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=turrets.length())
{
tutype=turtype[mres-1];
}
return m.get_item_name(mres);
}
int turrets_callback(dynamic_menu_pro@ m, string data)
{
string turtype;
if(m.menu_position>0)
turtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/turrets/"+turtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string zombiesmenu(bool include_random=false)
{
string[] zombietype=find_directories("data/sounds/"+soundpack+"/npc/normal/zombies/*");
setupmenu();
m.set_callback(@zombies_callback,"");
for (uint i=0; i<zombietype.length(); i++)
{
m.add_item_tts(zombietype[i],zombietype[i],"",true);
}
if(include_random==true) m.add_item_tts("random","random");
int mres=m.run("zombies menu", true);
if(mres==0)
{
speak("canceled");
}
if(m.get_item_name(mres)=="random")
{
return "random";
}
if(mres>0 and mres<=zombies.length())
{
zotype=zombietype[mres-1];
}
return m.get_item_name(mres);
}
int zombies_callback(dynamic_menu_pro@ m, string data)
{
string zombietype;
if(m.menu_position>0)
zombietype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*taunt*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/npc/normal/zombies/"+zombietype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
string hazardsmenu()
{
string[] hazardtype=find_directories("data/sounds/"+soundpack+"/objects/hazards/*");
setupmenu();
m.set_callback(@hazards_callback,"");
for (uint i=0; i<hazardtype.length(); i++)
{
m.add_item_tts(hazardtype[i],hazardtype[i],"",true);
}
int mres=m.run("Hazards menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=hazardtype.length())
{
hazztype=hazardtype[mres-1];
}
return m.get_item_name(mres);
}
int hazards_callback(dynamic_menu_pro@ m, string data)
{
string hazardtype;
if(m.menu_position>0)
hazardtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*fall*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*fall*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/hazards/"+hazardtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string teleportersmenu()
{
string[] teletype=find_directories("data/sounds/"+soundpack+"/objects/teleporters/*");
setupmenu();
m.set_callback(@teleporters_callback,"");
for (uint i=0; i<teletype.length(); i++)
{
m.add_item_tts(teletype[i],teletype[i],"",true);
}
int mres=m.run("teleporters menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=teletype.length())
{
teltype=teletype[mres-1];
}
return m.get_item_name(mres);
}
int teleporters_callback(dynamic_menu_pro@ m, string data)
{
string teletype;
if(m.menu_position>0)
teletype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/teleporters/"+teletype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string forcesmenu()
{
string[] forcetype=find_directories("data/sounds/"+soundpack+"/objects/force fields/*");
setupmenu();
m.set_callback(@forcefields_callback,"");
for (uint i=0; i<forcetype.length(); i++)
{
m.add_item_tts(forcetype[i],forcetype[i],"",true);
}
int mres=m.run("force fields menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=forcetype.length())
{
forcetyp=forcetype[mres-1];
}
return m.get_item_name(mres);
}
int forcefields_callback(dynamic_menu_pro@ m, string data)
{
string forcetype;
if(m.menu_position>0)
forcetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] actsfx=find_files("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*on*");
if(actsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+actsfx[random(0,actsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_O) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_O) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] deactsfx=find_files("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/*off*");
if(deactsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/force fields/"+forcetype+"/"+deactsfx[random(0,deactsfx.length()-1)],false);
}
return 0;
}
string minesmenu()
{
string[] minetype=find_directories("data/sounds/"+soundpack+"/objects/mines/*");
setupmenu();
m.set_callback(@mines_callback,"");
for (uint i=0; i<minetype.length(); i++)
{
m.add_item_tts(minetype[i],minetype[i],"",true);
}
int mres=m.run("mines menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=minetype.length())
{
minetyp=minetype[mres-1];
}
return m.get_item_name(mres);
}
int mines_callback(dynamic_menu_pro@ m, string data)
{
string minetype;
if(m.menu_position>0)
minetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_I) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_I) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] lightsfx=find_files("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*light*");
if(lightsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+lightsfx[random(0,lightsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_N) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_N) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] spawnsfx=find_files("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/*spawn*");
if(spawnsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/mines/"+minetype+"/"+spawnsfx[random(0,spawnsfx.length()-1)],false);
}
return 0;
}
string spikesmenu()
{
string[] spiketype=find_directories("data/sounds/"+soundpack+"/objects/spikes/*");
setupmenu();
m.set_callback(@spikes_callback,"");
for (uint i=0; i<spiketype.length(); i++)
{
m.add_item_tts(spiketype[i],spiketype[i],"",true);
}
int mres=m.run("spikes menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=spiketype.length())
{
spiktype=spiketype[mres-1];
}
return m.get_item_name(mres);
}
int spikes_callback(dynamic_menu_pro@ m, string data)
{
string spiketype;
if(m.menu_position>0)
spiketype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hitsfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*hit*");
if(hitsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+hitsfx[random(0,hitsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/*loop*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/spikes/"+spiketype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
return 0;
}
string dloopsmenu()
{
string[] looptype=find_directories("data/sounds/"+soundpack+"/objects/doors/loop/*");
setupmenu2();
m.set_callback(@dloops_callback,"");
for (uint i=0; i<looptype.length(); i++)
{
string[] loopsfx=find_files("data/sounds/"+soundpack+"/objects/doors/loop/"+looptype[i]+"/*loop*");
if(loopsfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/loop/"+looptype[i]+"/"+loopsfx[random(0,loopsfx.length()-1)],looptype[i],"l",true);
}
m.add_item_tts("none","none");
int mres=m.run("Loop sounds menu", true);
if(mres==0)
{
looptyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
looptyp="none";
return "none";
}
if(mres>0 and mres<=looptype.length())
{
looptyp=looptype[mres-1];
}
return m.get_item_name(mres);
}
int dloops_callback(dynamic_menu_pro@ m, string data)
{
string looptype;
if(m.menu_position>0)
looptype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(looptype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(looptype);
}
return 0;
}
string dmovesmenu()
{
string[] movetype=find_directories("data/sounds/"+soundpack+"/objects/doors/move/*");
setupmenu2();
m.set_callback(@dmoves_callback,"");
for (uint i=0; i<movetype.length(); i++)
{
string[] movesfx=find_files("data/sounds/"+soundpack+"/objects/doors/move/"+movetype[i]+"/*move*");
if(movesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/move/"+movetype[i]+"/"+movesfx[random(0,movesfx.length()-1)],movetype[i],"m",true);
}
m.add_item_tts("none","none");
int mres=m.run("move sounds menu", true);
if(mres==0)
{
movtyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
movtyp="none";
return "none";
}
if(mres>0 and mres<=movetype.length())
{
movtyp=movetype[mres-1];
}
return m.get_item_name(mres);
}
int dmoves_callback(dynamic_menu_pro@ m, string data)
{
string movetype;
if(m.menu_position>0)
movetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(movetype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(movetype);
}
return 0;
}
string dopensmenu()
{
string[] opentype=find_directories("data/sounds/"+soundpack+"/objects/doors/open/*");
setupmenu2();
m.set_callback(@dopens_callback,"");
for (uint i=0; i<opentype.length(); i++)
{
string[] opensfx=find_files("data/sounds/"+soundpack+"/objects/doors/open/"+opentype[i]+"/*open*");
if(opensfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/open/"+opentype[i]+"/"+opensfx[random(0,opensfx.length()-1)],opentype[i],"o",true);
}
m.add_item_tts("none","none");
int mres=m.run("open sounds menu", true);
if(mres==0)
{
opentyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
opentyp="none";
return "none";
}
if(mres>0 and mres<=opentype.length())
{
opentyp=opentype[mres-1];
}
return m.get_item_name(mres);
}
int dopens_callback(dynamic_menu_pro@ m, string data)
{
string opentype;
if(m.menu_position>0)
opentype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(opentype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(opentype);
}
return 0;
}
string dclosesmenu()
{
string[] closetype=find_directories("data/sounds/"+soundpack+"/objects/doors/close/*");
setupmenu2();
m.set_callback(@dcloses_callback,"");
for (uint i=0; i<closetype.length(); i++)
{
string[] closesfx=find_files("data/sounds/"+soundpack+"/objects/doors/close/"+closetype[i]+"/*close*");
if(closesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/doors/close/"+closetype[i]+"/"+closesfx[random(0,closesfx.length()-1)],closetype[i],"c",true);
}
m.add_item_tts("none","none");
int mres=m.run("close sounds menu", true);
if(mres==0)
{
clostyp="none";
return "none";
}
if(m.get_item_name(mres)=="none")
{
clostyp="none";
return "none";
}
if(mres>0 and mres<=closetype.length())
{
clostyp=closetype[mres-1];
}
return m.get_item_name(mres);
}
int dcloses_callback(dynamic_menu_pro@ m, string data)
{
string closetype;
if(m.menu_position>0)
closetype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(closetype);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(closetype);
}
return 0;
}
string dlgsmenu()
{
string[] dlgtype=find_directories("data/sounds/"+soundpack+"/objects/dialogs/*");
setupmenu();
m.set_callback(@dialogs_callback,"");
for (uint i=0; i<dlgtype.length(); i++)
{
m.add_item_tts(dlgtype[i],dlgtype[i],"",true);
}
int mres=m.run("Dialogs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=dlgtype.length())
{
dlgtyp=dlgtype[mres-1];
}
return m.get_item_name(mres);
}
int dialogs_callback(dynamic_menu_pro@ m, string data)
{
string dlgtype;
if(m.menu_position>0)
dlgtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] scrollsfx=find_files("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*scroll*");
if(scrollsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+scrollsfx[random(0,scrollsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] scrollsfx=find_files("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*scroll*");
if(scrollsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+scrollsfx[random(0,scrollsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] opensfx=find_files("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*open*");
if(opensfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+opensfx[random(0,opensfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] closesfx=find_files("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/*close*");
if(closesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/dialogs/"+dlgtype+"/"+closesfx[random(0,closesfx.length()-1)],false);
}
return 0;
}
string calandersmenu()
{
string[] calandertype=find_directories("data/sounds/"+soundpack+"/objects/calanders/*");
setupmenu();
m.set_callback(@calanders_callback,"");
for (uint i=0; i<calandertype.length(); i++)
{
m.add_item_tts(calandertype[i],calandertype[i],"",true);
}
int mres=m.run("calanders menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=calandertype.length())
{
calandertyp=calandertype[mres-1];
}
return m.get_item_name(mres);
}
int calanders_callback(dynamic_menu_pro@ m, string data)
{
string calandertype;
if(m.menu_position>0)
calandertype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_files("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string clocksmenu()
{
string[] clocktype=find_directories("data/sounds/"+soundpack+"/objects/clocks/*");
setupmenu();
m.set_callback(@clocks_callback,"");
for (uint i=0; i<clocktype.length(); i++)
{
m.add_item_tts(clocktype[i],clocktype[i],"",true);
}
int mres=m.run("clocks menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=clocktype.length())
{
clocktyp=clocktype[mres-1];
}
return m.get_item_name(mres);
}
int clocks_callback(dynamic_menu_pro@ m, string data)
{
string clocktype;
if(m.menu_position>0)
clocktype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_files("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/clocks/"+clocktype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string signsmenu()
{
string[] signtype=find_directories("data/sounds/"+soundpack+"/objects/signs/*");
setupmenu();
m.set_callback(@signs_callback,"");
for (uint i=0; i<signtype.length(); i++)
{
m.add_item_tts(signtype[i],signtype[i],"",true);
}
int mres=m.run("signs menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=signtype.length())
{
signtyp=signtype[mres-1];
}
return m.get_item_name(mres);
}
int signs_callback(dynamic_menu_pro@ m, string data)
{
string signtype;
if(m.menu_position>0)
signtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] pressfxsfx=find_files("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*pres*");
if(pressfxsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+pressfxsfx[random(0,pressfxsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] loopsfx=find_files("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/*loop*");
if(loopsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/signs/"+signtype+"/"+loopsfx[random(0,loopsfx.length()-1)],false);
}
return 0;
}
string healsmenu()
{
string[] healthtype=find_directories("data/sounds/"+soundpack+"/objects/heal zones/*");
setupmenu();
m.set_callback(@heals_callback,"");
for (uint i=0; i<healthtype.length(); i++)
{
m.add_item_tts(healthtype[i],healthtype[i],"",true);
}
int mres=m.run("heal zones menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=healthtype.length())
{
healtyp=healthtype[mres-1];
}
return m.get_item_name(mres);
}
int heals_callback(dynamic_menu_pro@ m, string data)
{
string healthtype;
if(m.menu_position>0)
healthtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] healsfx=find_files("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*heal*");
if(healsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+healsfx[random(0,healsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] healsfx=find_files("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*pres*");
if(healsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+healsfx[random(0,healsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] takesfx=find_files("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/*take*");
if(takesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/heal zones/"+healthtype+"/"+takesfx[random(0,takesfx.length()-1)],false);
}
return 0;
}
string beltsmenu()
{
string[] belts=find_directories("data/sounds/"+soundpack+"/objects/belts/*");
setupmenu();
m.set_callback(@belts_callback,"");
for (uint i=0; i<belts.length(); i++)
{
string letter=string_replace(belts[i],".ogg","",true)[0];
string[] beltsfx=find_files("data/sounds/"+soundpack+"/objects/belts/"+belts[i]+"/*loop*");
if(beltsfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/belts/"+belts[i]+"/"+beltsfx[random(0,beltsfx.length()-1)],belts[i],letter,true);
}
int mres=m.run("belts menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=belts.length())
{
}
return m.get_item_name(mres);
}
int belts_callback(dynamic_menu_pro@ m, string data)
{
string belttyp;
if(m.menu_position>0)
belttyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(belttyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(belttyp);
}
return 0;
}
string sorcesmenu()
{
string[] sorces=find_directories("data/sounds/"+soundpack+"/objects/sources/*");
setupmenu2();
m.set_callback(@sources_callback,"");
for (uint i=0; i<sorces.length(); i++)
{
string letter=string_replace(sorces[i],".ogg","",true)[0];
string[] srcfilesfx=find_files("data/sounds/"+soundpack+"/objects/sources/"+sorces[i]+"/*loop*");
if(srcfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/sources/"+sorces[i]+"/"+srcfilesfx[random(0,srcfilesfx.length()-1)],sorces[i],letter,true);
}
int mres=m.run("sources menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=sorces.length())
{
}
return m.get_item_name(mres);
}
int sources_callback(dynamic_menu_pro@ m, string data)
{
string sorcetyp;
if(m.menu_position>0)
sorcetyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(sorcetyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(sorcetyp);
}
return 0;
}
string musicsmenu()
{
string[] musics=find_directories("data/sounds/"+soundpack+"/objects/musics/*");
setupmenu2();
m.set_callback(@musics_callback,"");
for (uint i=0; i<musics.length(); i++)
{
string[] musfilesfx=find_files("data/sounds/"+soundpack+"/objects/musics/"+musics[i]+"/*music*");
if(musfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/musics/"+musics[i]+"/"+musfilesfx[random(0,musfilesfx.length()-1)],musics[i],"m",true);
}
int mres=m.run("musics menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=musics.length())
{
}
return m.get_item_name(mres);
}
int musics_callback(dynamic_menu_pro@ m, string data)
{
string mustyp;
if(m.menu_position>0)
mustyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(mustyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(mustyp);
}
return 0;
}
string vplatsmenu()
{
string[] vplats=find_directories("data/sounds/"+soundpack+"/objects/vanishing platforms/*");
setupmenu2();
m.set_callback(@vplats_callback,"");
for (uint i=0; i<vplats.length(); i++)
{
string letter=string_replace(vplats[i],".ogg","",true)[0];
string[] vpfilesfx=find_files("data/sounds/"+soundpack+"/objects/vanishing platforms/"+vplats[i]+"/*loop*");
if(vpfilesfx.length()!=0) m.add_item("data/sounds/"+soundpack+"/objects/vanishing platforms/"+vplats[i]+"/"+vpfilesfx[random(0,vpfilesfx.length()-1)],vplats[i],letter,true);
}
int mres=m.run("vanishers menu.", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=vplats.length())
{
}
return m.get_item_name(mres);
}
int vplats_callback(dynamic_menu_pro@ m, string data)
{
string vplattyp;
if(m.menu_position>0)
vplattyp=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
speak(vplattyp);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
speak(vplattyp);
}
return 0;
}
string vehsmenu()
{
string[] vehtype=find_directories("data/sounds/"+soundpack+"/objects/vehicles/*");
setupmenu();
m.set_callback(@vehicles_callback,"");
for (uint i=0; i<vehtype.length(); i++)
{
m.add_item_tts(vehtype[i],vehtype[i],"",true);
}
int mres=m.run("vehicles menu", true);
if(mres==0)
{
speak("canceled");
}
if(mres>0 and mres<=vehicles.length())
{
vehtyp=vehtype[mres-1];
}
return m.get_item_name(mres);
}
int vehicles_callback(dynamic_menu_pro@ m, string data)
{
string vehtype;
if(m.menu_position>0)
vehtype=m.item_list[m.menu_position-1].name;
if(key_down(KEY_SPACE) and m.menu_position>0 and spacehold==1 and keytimer.elapsed>=keytime)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
keytimer.restart();
}
if(key_pressed(KEY_SPACE) and m.menu_position>0 and spacehold==0)
{
t.destroy_sound(prevslot);
string[] hurtsfx=find_files("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*hurt*");
if(hurtsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_L) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_L) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] namesfx=find_files("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*motor*");
if(namesfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+namesfx[random(0,namesfx.length()-1)],false);
}
if(key_down(KEY_LCONTROL) and key_repeating(KEY_H) and m.menu_position>0 or key_down(KEY_RCONTROL) and key_repeating(KEY_H) and m.menu_position>0)
{
t.destroy_sound(prevslot);
string[] defsfx=find_files("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/*death*");
if(defsfx.length()!=0) prevslot=t.play_stationary("data/sounds/"+soundpack+"/objects/vehicles/"+vehtype+"/"+defsfx[random(0,defsfx.length()-1)],false);
}
return 0;
}
