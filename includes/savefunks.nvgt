void readdata()
{
sd.load();
if(sd.d.exists("amtype"))
{
amtype=sd.reads("amtype");
}
if(sd.d.exists("emtype"))
{
emtype=sd.reads("emtype");
}
if(sd.d.exists("potype"))
{
potype=sd.reads("potype");
}
if(sd.d.exists("rotype"))
{
rotype=sd.reads("rotype");
}
if(sd.d.exists("zotype"))
{
zotype=sd.reads("zotype");
}
if(sd.d.exists("aninum"))
{
aninum=sd.readn("aninum");
}
if(sd.d.exists("eninum"))
{
eninum=sd.readn("eninum");
}
if(sd.d.exists("projnum"))
{
projnum=sd.readn("projnum");
}
if(sd.d.exists("robnum"))
{
robnum=sd.readn("robnum");
}
if(sd.d.exists("zombnum"))
{
zombnum=sd.readn("zombnum");
}
if(sd.d.exists("gamemode"))
{
gamemode=sd.readn("gamemode");
}
if(sd.d.exists("tiletype"))
{
tiletype=sd.reads("tiletype");
}
if(sd.d.exists("walltype"))
{
walltype=sd.reads("walltype");
}
}
void writedata()
{
sd.add("amtype",amtype);
sd.add("emtype",emtype);
sd.add("potype",potype);
sd.add("rotype",rotype);
sd.add("zotype",zotype);
sd.add("aninum",aninum);
sd.add("eninum",eninum);
sd.add("projnum",projnum);
sd.add("robnum",robnum);
sd.add("zombnum",zombnum);
sd.add("gamemode",gamemode);
sd.add("tiletype",tiletype);
sd.add("walltype",walltype);
sd.save();
}
void readpreffs()
{
st.load();
if(st.d.exists("chartype"))
{
chartype=st.reads("chartype");
}
@current_char = get_default_char();
if(current_char !is null)
{
shieldtype = current_char.shieldtype;
shieldweight = current_char.shieldweight;
attack = current_char.attack;
defence = current_char.defence;
points = current_char.points;
health = current_char.health;
maxhealth = current_char.maxhealth;
lifecard = current_char.lifecard;
level=current_char.level;
levmod=current_char.levmod;
xp=current_char.xp;
xpmod=current_char.xpmod;
xprequiered=current_char.xprequiered;
charcamsound=current_char.charcamsound;
chardeathsound=current_char.chardeathsound;
charfallsound=current_char.charfallsound;
charfallsound2=current_char.charfallsound2;
charhurtsound=current_char.charhurtsound;
charhealsound=current_char.charhealsound;
charhealsound2=current_char.charhealsound2;
charhealsound3=current_char.charhealsound3;
charinvsound=current_char.charinvsound;
charjumpsound=current_char.charjumpsound;
charjumpsound2=current_char.charjumpsound2;
charlandsound=current_char.charlandsound;
charlevsound=current_char.charlevsound;
charlifesound=current_char.charlifesound;
charshakesound=current_char.charshakesound;
charsitsound=current_char.charsitsound;
charstandsound=current_char.charstandsound;
charswingsound=current_char.charswingsound;
charturnsound=current_char.charturnsound;
}
if(st.d.exists("keyboardtheme"))
{
keyboardtheme=st.reads("keyboardtheme");
}
if(st.d.exists("soundpack"))
{
soundpack=st.reads("soundpack");
}
if(st.d.exists("soundcard"))
{
soundcard=st.reads("soundcard");
string[]@devices=get_sound_output_devices();
devices.remove_at(0);
for(uint i=0; i<devices.length(); i++)
{
if(devices[i]==soundcard)
{
sound_output_device=i+1;
break;
}
}
}
if(st.d.exists("autojump"))
{
autojump=st.readn("autojump");
}
if(st.d.exists("autosave"))
{
autosave=st.readn("autosave");
}
if(st.d.exists("dockmode"))
{
dockmode=st.readn("dockmode");
}
if(st.d.exists("fademode"))
{
fademode=st.readn("fademode");
}
if(st.d.exists("heartsound"))
{
heartsound=st.readn("heartsound");
}
if(st.d.exists("pausem"))
{
pausem=st.readn("pausem");
}
if(st.d.exists("spacehold"))
{
spacehold=st.readn("spacehold");
}
if(st.d.exists("hidedocks"))
{
hidedocks=st.readb("hidedocks");
}
if(st.d.exists("hidegames"))
{
hidegames=st.readb("hidegames");
}
if(st.d.exists("hidemaps"))
{
hidemaps=st.readb("hidemaps");
}
if(st.d.exists("hidesets"))
{
hidesets=st.readb("hidesets");
}
if(st.d.exists("hrtf"))
{
hrtf=st.readb("hrtf");
}
if(st.d.exists("menumusvolume"))
{
menumusvolume=st.readn("menumusvolume");
}
if(st.d.exists("mreset"))
{
mreset=st.readn("mreset");
}
if(st.d.exists("mskipnum"))
{
mskipnum=st.readn("mskipnum");
}
if(st.d.exists("up_down"))
{
up_down=st.readn("up_down");
}
if(st.d.exists("left_right"))
{
left_right=st.readn("left_right");
}
if(st.d.exists("home_end"))
{
home_end=st.readn("home_end");
}
if(st.d.exists("wrap"))
{
wrap=st.readn("wrap");
}
if(st.d.exists("repeat_items"))
{
repeat_items=st.readn("repeat_items");
}
if(st.d.exists("numbers"))
{
numbers=st.readn("numbers");
}
if(st.d.exists("first_letter"))
{
first_letter=st.readn("first_letter");
}
if(st.d.exists("position_info"))
{
position_info=st.readn("position_info");
}
if(st.d.exists("side_scroll"))
{
side_scroll=st.readn("side_scroll");
}
if(st.d.exists("menutype"))
{
menutype=st.reads("menutype");
}
}
void writepreffs()
{
st.add("chartype",chartype);
st.add("keyboardtheme",keyboardtheme);
st.add("soundpack",soundpack);
st.add("soundcard",soundcard);
st.add("autojump",autojump);
st.add("autosave",autosave);
st.add("dockmode",dockmode);
st.add("fademode",fademode);
st.add("heartsound",heartsound);
st.add("pausem",pausem);
st.add("spacehold",spacehold);
st.add("hidedocks",hidedocks);
st.add("hidegames",hidegames);
st.add("hidemaps",hidemaps);
st.add("hidesets",hidesets);
st.add("hrtf",hrtf);
st.add("menumusvolume",menumusvolume);
st.add("mreset",mreset);
st.add("mskipnum",mskipnum);
st.add("up_down",up_down);
st.add("left_right",left_right);
st.add("home_end",home_end);
st.add("wrap",wrap);
st.add("repeat_items",repeat_items);
st.add("numbers",numbers);
st.add("first_letter",first_letter);
st.add("position_info",position_info);
st.add("side_scroll",side_scroll);
st.add("menutype",menutype);
st.save();
}
