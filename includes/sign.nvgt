sign@[]signs(0);
class sign
{
bool destroyable, looping;
int hurtsound, signsound, pressound;
int signx;
int signy;
string text;
string signtype;
sign(int sx,int sy,string txt, string st,bool dbl,bool lps)
{
signx=sx;
signy=sy;
text=txt;
signtype=st;
destroyable=dbl;
looping=lps;
string[] signsfx=find_files("sounds/objects/signs/"+signtype+"/*loop*");
if(signsfx.length()!=0 and looping==true) signsound=signpool.play_2d("sounds/objects/signs/"+signtype+"/"+signsfx[random(0,signsfx.length()-1)],me.x,me.y,signx,signy,true);
}
}
void signcheck()
{
for(uint i=0; i<signs.length(); i++)
{
if(me.x==signs[i].signx and me.y==signs[i].signy and key_pressed(KEY_RETURN))
{
string[] pressfx=find_files("sounds/objects/signs/"+signs[i].signtype+"/*pres*");
if(pressfx.length()!=0) signs[i].pressound=signpool.play_stationary("sounds/objects/signs/"+signs[i].signtype+"/"+pressfx[random(0,pressfx.length()-1)],false);
speak(signs[i].text);
}
}
}
void spawn_sign(int x,int y,string text,string signtype,bool destroyable,bool looping)
{
sign sg1(x,y,text,signtype,destroyable,looping);
signs.insert_last(sg1);
}
void destroy_all_signs()
{
for(uint i=0; i<signs.length(); i++)
{
signpool.destroy_sound(signs[i].signsound);
}
signs.resize(0);
}
