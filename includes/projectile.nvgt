projectile@[]projectiles(0);
class projectile
{
bool fireable, moveable;
int defsound, hurtsound, projsound, wepsound;
double projlevel;
double poxp;
int projcard;
int projehealth;
double projhealth;
double projmaxhealth;
int prox;
int proy;
int projdir;
int damage;
int firetime=projtime;
int projtime;
string projtype;
timer firetimer, projtimer;
projectile(int px,int py,int dir,double hp,double maxhp,int pc,int dm,int sp,double plv,double pxp,string pt,bool pf,bool pm)
{
this.projehealth=hp;
prox=px;
proy=py;
projdir=dir;
projhealth=hp;
projmaxhealth=maxhp;
projcard=pc;
damage=dm;
projtime=sp;
projlevel=plv;
poxp=pxp;
projtype=pt;
fireable=pf;
moveable=pm;
string[] prosfx=find_files("sounds/npc/projectiles/"+projtype+"/*loop*");
if(prosfx.length()!=0) projsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projtype+"/"+prosfx[random(0,prosfx.length()-1)],me.x,me.y,prox,proy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void projloop()
{
for(uint i=0; i<projectiles.length(); i++)
{
if(projectiles[i].projtimer.elapsed>=projectiles[i].projtime)
{
projpool.update_sound_2d(projectiles[i].projsound,projectiles[i].prox,projectiles[i].proy);
projectiles[i].projtimer.restart();
if (projectiles[i].prox<=maxx and projectiles[i].projtimer.elapsed>=projectiles[i].projtime and projectiles[i].projdir==1 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox++;
projectiles[i].projtimer.restart();
}
else if (projectiles[i].prox>=0 and projectiles[i].projtimer.elapsed>=projectiles[i].projtime and projectiles[i].projdir==0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox--;
projectiles[i].projtimer.restart();
}
if (projectiles[i].projdir==1 and projectiles[i].prox>maxx and projectiles[i].moveable==true and paused==0)
{
projectiles[i].projdir=0;
}
else if (projectiles[i].projdir==0 and projectiles[i].prox<=0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].projdir=1;
}
if(projectiles[i].projdir==1 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox++;
}
else if (projectiles[i].projdir==0 and projectiles[i].moveable==true and paused==0)
{
projectiles[i].prox--;
}
if(me.x==projectiles[i].prox and me.y==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=projpool.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0) projectiles[i].wepsound=projpool.play_stationary_extended("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
shieldstrength-=projectiles[i].damage*projectiles[i].projlevel-shielddefence;
projectiles[i].firetimer.restart();
}
else if(me.x==projectiles[i].prox and me.y==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0) projectiles[i].wepsound=projpool.play_stationary_extended("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=projpool.play_stationary_extended("sounds/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=projectiles[i].damage*projectiles[i].projlevel-defence;
projectiles[i].firetimer.restart();
}
for(uint i1=0; i1<animals.length(); i1++)
{
if(animals[i1].amx==projectiles[i].prox and animals[i1].amy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/npc/animals/"+animals[i1].animaltype+"/*hurt*");
if(hurtsfx.length()!=0) animals[i1].hurtsound=animalpool.play_extended_2d("sounds/npc/animals/"+animals[i1].animaltype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,animals[i1].amx,animals[i1].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
animals[i1].animalhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i2=0; i2<enemies.length(); i2++)
{
if(enemies[i2].emx==projectiles[i].prox and enemies[i2].emy==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/npc/enemies/"+enemies[i2].enemytype+"/*hurt*");
if(hurtsfx.length()!=0) enemies[i2].hurtsound=enemypool.play_extended_2d("sounds/npc/enemies/"+enemies[i2].enemytype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,enemies[i2].emx,enemies[i2].emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
enemies[i2].enemyhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i3=0; i3<robots.length(); i3++)
{
if(robots[i3].robx==projectiles[i].prox and robots[i3].roby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/npc/robots/"+robots[i3].robtype+"/*hurt*");
if(hurtsfx.length()!=0) robots[i3].hurtsound=robpool.play_extended_2d("sounds/npc/robots/"+robots[i3].robtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,robots[i3].robx,robots[i3].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
robots[i3].robothealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i4=0; i4<turrets.length(); i4++)
{
if(turrets[i4].turx==projectiles[i].prox and turrets[i4].tury==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/npc/turrets/"+turrets[i4].turtype+"/*hurt*");
if(hurtsfx.length()!=0) turrets[i4].hurtsound=turpool.play_extended_2d("sounds/npc/turrets/"+turrets[i4].turtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,turrets[i4].turx,turrets[i4].tury,0,0,0,0,false,0,0,painvolume,painpitch,false);
turrets[i4].turhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i5=0; i5<walls.length(); i5++)
{
if(walls[i5].minx<=projectiles[i].prox and walls[i5].maxx>=projectiles[i].prox and walls[i5].miny<=projectiles[i].proy and walls[i5].maxy>=projectiles[i].proy and walls[i5].destroyable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/objects/walls/"+walls[i5].wall+"/*hurt*");
if(hurtsfx.length()!=0) walls[i5].hurtsound=p.play_extended_2d("sounds/objects/walls/"+walls[i5].wall+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,walls[i5].minx,walls[i5].miny,0,0,0,0,false,0,0,wallvolume,wallpitch,false);
p.update_sound_2d(walls[i5].hurtsound,walls[i5].minx,walls[i5].miny);
p.update_sound_range_2d(walls[i5].hurtsound, 0, walls[i5].maxx-walls[i5].minx, 0, walls[i5].maxy-walls[i5].miny);
walls[i5].wallhealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
for(uint i6=0; i6<zombies.length(); i6++)
{
if(zombies[i6].zombx==projectiles[i].prox and zombies[i6].zomby==projectiles[i].proy and projectiles[i].firetimer.elapsed>=projectiles[i].firetime and projectiles[i].fireable==true)
{
string[] hitsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*hit*");
if(hitsfx.length()!=0 and hitsound==1) projectiles[i].wepsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+hitsfx[random(0,hitsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/npc/zombies/"+zombies[i6].zombtype+"/*hurt*");
if(hurtsfx.length()!=0) zombies[i6].hurtsound=zombpool.play_extended_2d("sounds/npc/zombies/"+zombies[i6].zombtype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],me.x,me.y,zombies[i6].zombx,zombies[i6].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
zombies[i6].zombiehealth-=projectiles[i].damage;
projectiles[i].firetimer.restart();
}
}
if(projectiles[i].projhealth<=0)
{
if(projectiles[i].projcard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*life*");
if(lifesfx.length()!=0) projpool.play_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,false);
projectiles[i].projhealth=projectiles[i].projehealth;
projectiles[i].projcard-=1;
}
else if(projectiles[i].projcard<=1 and paused==0)
{
projpool.destroy_sound(projectiles[i].hurtsound);
projpool.destroy_sound(projectiles[i].projsound);
string[] defsfx=find_files("sounds/npc/projectiles/"+projectiles[i].projtype+"/*death*");
if(defsfx.length()!=0) projectiles[i].defsound=projpool.play_extended_2d("sounds/npc/projectiles/"+projectiles[i].projtype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,projectiles[i].prox,projectiles[i].proy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=projectiles[i].poxp*projectiles[i].projlevel*xpmod;
kills+=1;
projectiles.remove_at(i);
return;
}
}
}
}
}
void spawn_projectile(int x,int y,int dir,double hp,double maxhp,int pc,int dm,int projtime,double projlevel,double xp,string projtype,bool fireable,bool moveable)
{
projectile p1(x,y,dir,hp,maxhp,pc,dm,projtime,projlevel,xp,projtype,fireable,moveable);
projectiles.insert_last(p1);
}
void destroy_all_projectiles()
{
for(uint i=0; i<projectiles.length(); i++)
{
projpool.destroy_sound(projectiles[i].projsound);
}
projectiles.resize(0);
}
