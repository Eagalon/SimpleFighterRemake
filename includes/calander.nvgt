calander@[]calanders(0);
class calander
{
bool destroyable;
int calandersound, hurtsound, pressound;
int calanderx;
int calandery;
string cdtext;
string calandertype;
calander(int cnx,int cny,string cntext,string cntype,bool dbl)
{
calanderx=cnx;
calandery=cny;
cdtext=cntext;
calandertype=cntype;
destroyable=dbl;
string[] calandersfx=find_files("sounds/"+soundpack+"/objects/calanders/"+calandertype+"/*loop*");
if(calandersfx.length()!=0) calandersound=calpool.play_2d("sounds/"+soundpack+"/objects/calanders/"+calandertype+"/"+calandersfx[random(0,calandersfx.length()-1)],me.x,me.y,calanderx,calandery,true);
}
}
void calandercheck()
{
for(uint i=0; i<calanders.length(); i++)
{
if(me.x==calanders[i].calanderx and me.y==calanders[i].calandery and key_pressed(KEY_RETURN))
{
string[] pressfx=find_files("sounds/"+soundpack+"/objects/calanders/"+calanders[i].calandertype+"/*pres*");
if(pressfx.length()!=0) calanders[i].pressound=calpool.play_stationary("sounds/"+soundpack+"/objects/calanders/"+calanders[i].calandertype+"/"+pressfx[random(0,pressfx.length()-1)],false);
speak(calanders[i].cdtext+get_date(false, false));
}
}
}
void spawn_calander(int x,int y,string text,string calandertype,bool destroyable)
{
calander cn1(x,y,text,calandertype,destroyable);
calanders.insert_last(cn1);
}
void destroy_all_calanders()
{
for(uint i=0; i<calanders.length(); i++)
{
calpool.destroy_sound(calanders[i].calandersound);
}
calanders.resize(0);
}
