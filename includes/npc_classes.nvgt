animal@[]animals(0);
class animal
{
bool fireable, moveable, moveable2, spotted;
int amsound, defsound, hurtsound, stepsound, tilesound, wepsound;
int animalcard;
int anihealth;
double amlevel;
double amxp;
double animalhealth;
double animalmaxhealth;
int amx;
int amy;
int anirange;
int anirange2;
int anirange3;
int anirange4;
int damage;
int animaltime;
int firetime;
string animaltype;
timer animaltimer, firetimer;
animal(int ax,int ay,int anrange,int anrange2,int anrange3,int anrange4,double hp,double maxhp,int ac,int dm,int ft,int sp,double amlv,double axp,string at,bool amf,bool amt,bool amt2)
{
this.anihealth=hp;
amx=ax;
amy=ay;
anirange=anrange;
anirange2=anrange2;
anirange3=anrange3;
anirange4=anrange4;
animalhealth=hp;
animalmaxhealth=maxhp;
animalcard=ac;
damage=dm;
firetime=ft;
animaltime=sp;
amlevel=amlv;
amxp=axp;
animaltype=at;
fireable=amf;
moveable=amt;
moveable2=amt2;
spotted=false;
string[] amsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animaltype+"/*taunt*");
if(amsfx.length()!=0) amsound=animalpool.play_extended_2d("sounds/"+soundpack+"/npc/animals/"+animaltype+"/"+amsfx[random(0,amsfx.length()-1)],me.x,me.y,amx,amy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void animalloop()
{
for(uint i=0; i<animals.length(); i++)
{
if(animals[i].animaltimer.elapsed>=animals[i].animaltime)
{
if(absolute(me.x-animals[i].amx)<=animals[i].anirange3 and absolute(me.y-animals[i].amy)<=animals[i].anirange4)
{
animals[i].spotted=true;
}
if(animals[i].spotted)
{
string[] amsteps=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*step*");
if(animals[i].moveable==true and animals[i].stepsound==1 and paused==0 and amsteps.length()!=0) animals[i].tilesound=animalpool.play_extended_2d("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+amsteps[random(0,amsteps.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
animalpool.update_sound_2d(animals[i].amsound,animals[i].amx,animals[i].amy);
animals[i].animaltimer.restart();
if(animals[i].amx<me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx++;
animals[i].stepsound=1;
}
if(animals[i].amx>me.x and animals[i].moveable==true and paused==0)
{
animals[i].amx--;
animals[i].stepsound=1;
}
if(animals[i].amy<me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy++;
animals[i].stepsound=1;
}
if(animals[i].amy>me.y and animals[i].moveable2==true and paused==0)
{
animals[i].amy--;
animals[i].stepsound=1;
}
}
}
if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
animals[i].stepsound=0;
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=animals[i].damage*animals[i].amlevel-shielddefence;
animals[i].firetimer.restart();
}
else if(absolute(me.x-animals[i].amx)<=animals[i].anirange and absolute(me.y-animals[i].amy)<=animals[i].anirange2 and animals[i].firetimer.elapsed>=animals[i].firetime and animals[i].fireable==true and shieldon==0 and paused==0)
{
animals[i].stepsound=0;
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*hit*");
if(hitsfx.length()!=0) animals[i].wepsound=animalpool.play_stationary_extended("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=animals[i].damage*animals[i].amlevel-defence;
animals[i].firetimer.restart();
}
if(animals[i].animalhealth<=0)
{
if(animals[i].animalcard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*life*");
if(lifesfx.length()!=0) animalpool.play_2d("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,false);
animals[i].animalhealth=animals[i].anihealth;
animals[i].animalcard-=1;
}
else if(animals[i].animalcard<=1 and paused==0)
{
animalpool.destroy_sound(animals[i].hurtsound);
animalpool.destroy_sound(animals[i].amsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/*death*");
if(defsfx.length()!=0) animals[i].defsound=animalpool.play_extended_2d("sounds/"+soundpack+"/npc/animals/"+animals[i].animaltype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,animals[i].amx,animals[i].amy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=animals[i].amxp*animals[i].amlevel*xpmod;
kills+=1;
animals.remove_at(i);
return;
}
}
}
}
void spawn_animal(int x,int y,int animrange,int animrange2,int animrange3,int animrange4,double hp,double maxhp,int ac,int dm,int firetime,int animaltime,double amlevel,double xp,string animaltype,bool fireable,bool moveable,bool moveable2)
{
animal an1(x,y,animrange,animrange2,animrange3,animrange4,hp,maxhp,ac,dm,firetime,animaltime,amlevel,xp,animaltype,fireable,moveable,moveable2);
animals.insert_last(an1);
}
void destroy_all_animals()
{
for(uint i=0; i<animals.length(); i++)
{
animalpool.destroy_sound(animals[i].amsound);
}
animals.resize(0);
}
animalzone@[]animalzones(0);
class animalzone
{
double minx, maxx;
int amy;
int spawntime;
string animaltype;
timer spawntimer;
animalzone(double mx,double mx2,int ay,int sp,string at)
{
minx=mx;
maxx=mx2;
amy=ay;
spawntime=sp;
animaltype=at;
}
}
void animalzoneloop()
{
for(uint i=0; i<animalzones.length(); i++)
{
if(animalzones[i].minx<=me.x and animalzones[i].maxx>=me.x and animalzones[i].amy==me.y and animalzones[i].spawntimer.elapsed>=animalzones[i].spawntime)
{
string[] animaltype=find_directories("sounds/"+soundpack+"/npc/animals/*");
string amtype = animalzones[i].animaltype;
if(amtype=="random" && animaltype.length()>0)
{
amtype=animaltype[random(0,animaltype.length()-1)];
}
spawn_animal(random(animalzones[i].minx, animalzones[i].maxx), animalzones[i].amy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, amtype, true, true, false);
animalzones[i].spawntimer.restart();
}
}
}
void spawn_animalzone(double x1,double x2,int y,int sp,string type)
{
animalzone az1(x1,x2,y,sp,type);
animalzones.insert_last(az1);
}
void destroy_all_animalzones()
{
animalzones.resize(0);
}
enemie@[]enemies(0);
class enemie
{
bool fireable, moveable, moveable2, spotted;
int emsound, defsound, hurtsound, stepsound, tilesound, wepsound;
int enemiecard;
int enehealth;
double emlevel;
double emxp;
double enemiehealth;
double enemiemaxhealth;
int emx;
int emy;
int enerange;
int enerange2;
int enerange3;
int enerange4;
int damage;
int enemietime;
int firetime;
string enemietype;
timer enemietimer, firetimer;
enemie(int ex,int ey,int enrange,int enrange2,int enrange3,int enrange4,double hp,double maxhp,int ec,int dm,int ft,int sp,double emlv,double exp,string et,bool emf,bool emt,bool emt2)
{
this.enehealth=hp;
emx=ex;
emy=ey;
enerange=enrange;
enerange2=enrange2;
enerange3=enrange3;
enerange4=enrange4;
enemiehealth=hp;
enemiemaxhealth=maxhp;
enemiecard=ec;
damage=dm;
firetime=ft;
enemietime=sp;
emlevel=emlv;
emxp=exp;
enemietype=et;
fireable=emf;
moveable=emt;
moveable2=emt2;
spotted=false;
string[] emsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemietype+"/*taunt*");
if(emsfx.length()!=0) emsound=enemiepool.play_extended_2d("sounds/"+soundpack+"/npc/enemies/"+enemietype+"/"+emsfx[random(0,emsfx.length()-1)],me.x,me.y,emx,emy,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void eneloop()
{
for(uint i=0; i<enemies.length(); i++)
{
if(enemies[i].enemietimer.elapsed>=enemies[i].enemietime)
{
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange3 and absolute(me.y-enemies[i].emy)<=enemies[i].enerange4)
{
enemies[i].spotted=true;
}
if(enemies[i].spotted)
{
string[] tilers=find_files("sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/*step*");
if(enemies[i].moveable==true and enemies[i].stepsound==1 and paused==0 and tilers.length()!=0) tilesound=p.play_extended_2d("sounds/"+soundpack+"/objects/platforms/"+gmt(enemies[i].emx, enemies[i].emy)+"/"+tilers[random(0,tilers.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
enemiepool.update_sound_2d(enemies[i].emsound,enemies[i].emx,enemies[i].emy);
enemies[i].enemietimer.restart();
if(enemies[i].emx<me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx++;
enemies[i].stepsound=1;
}
if(enemies[i].emx>me.x and enemies[i].moveable==true and paused==0)
{
enemies[i].emx--;
enemies[i].stepsound=1;
}
if(enemies[i].emy<me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy++;
enemies[i].stepsound=1;
}
if(enemies[i].emy>me.y and enemies[i].moveable2==true and paused==0)
{
enemies[i].emy--;
enemies[i].stepsound=1;
}
}
}
if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
enemies[i].stepsound=0;
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=enemies[i].damage*enemies[i].emlevel-shielddefence;
enemies[i].firetimer.restart();
}
else if(absolute(me.x-enemies[i].emx)<=enemies[i].enerange and absolute(me.y-enemies[i].emy)<=enemies[i].enerange2 and enemies[i].firetimer.elapsed>=enemies[i].firetime and enemies[i].fireable==true and shieldon==0 and paused==0)
{
enemies[i].stepsound=0;
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*hit*");
if(hitsfx.length()!=0) enemies[i].wepsound=enemiepool.play_stationary_extended("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=enemies[i].damage*enemies[i].emlevel-defence;
enemies[i].firetimer.restart();
}
if(enemies[i].enemiehealth<=0)
{
if(enemies[i].enemiecard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*life*");
if(lifesfx.length()!=0) enemiepool.play_2d("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,false);
enemies[i].enemiehealth=enemies[i].enehealth;
enemies[i].enemiecard-=1;
}
else if(enemies[i].enemiecard<=1 and paused==0)
{
enemiepool.destroy_sound(enemies[i].hurtsound);
enemiepool.destroy_sound(enemies[i].emsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/*death*");
if(defsfx.length()!=0) enemies[i].defsound=enemiepool.play_extended_2d("sounds/"+soundpack+"/npc/enemies/"+enemies[i].enemietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,enemies[i].emx,enemies[i].emy,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=enemies[i].emxp*enemies[i].emlevel*xpmod;
kills+=1;
spawn_bodyfall(enemies[i].emx, enemies[i].emy, random(500,1000));
enemies.remove_at(i);
return;
}
}
}
}
void spawn_enemie(int x,int y,int enemrange,int enemrange2,int enemrange3,int enemrange4,double hp,double maxhp,int ec,int dm,int firetime,int enemietime,double emlevel,double xp,string enemietype,bool fireable,bool moveable,bool moveable2)
{
enemie en1(x,y,enemrange,enemrange2,enemrange3,enemrange4,hp,maxhp,ec,dm,firetime,enemietime,emlevel,xp,enemietype,fireable,moveable,moveable2);
enemies.insert_last(en1);
}
void destroy_all_enemies()
{
for(uint i=0; i<enemies.length(); i++)
{
enemiepool.destroy_sound(enemies[i].emsound);
}
enemies.resize(0);
}
enemiezone@[]enemiezones(0);
class enemiezone
{
double minx, maxx;
int emy;
int spawntime;
string enemietype;
timer spawntimer;
enemiezone(double mx,double mx2,int ey,int sp,string et)
{
minx=mx;
maxx=mx2;
emy=ey;
spawntime=sp;
enemietype=et;
}
}
void enemiezoneloop()
{
for(uint i=0; i<enemiezones.length(); i++)
{
if(enemiezones[i].minx<=me.x and enemiezones[i].maxx>=me.x and enemiezones[i].emy==me.y and enemiezones[i].spawntimer.elapsed>=enemiezones[i].spawntime)
{
string[] enemietype=find_directories("sounds/"+soundpack+"/npc/enemies/*");
string emtype = enemiezones[i].enemietype;
if(emtype=="random" && enemietype.length()>0)
{
emtype=enemietype[random(0,enemietype.length()-1)];
}
spawn_enemie(random(enemiezones[i].minx, enemiezones[i].maxx), enemiezones[i].emy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, emtype, true, true, false);
enemiezones[i].spawntimer.restart();
}
}
}
void spawn_enemiezone(double x1,double x2,int y,int sp,string type)
{
enemiezone ez1(x1,x2,y,sp,type);
enemiezones.insert_last(ez1);
}
void destroy_all_enemiezones()
{
enemiezones.resize(0);
}
robot@[]robots(0);
class robot
{
bool fireable, moveable, moveable2, spotted;
int robsound, defsound, hurtsound, stepsound, tilesound, wepsound;
int robotcard;
int robhealth;
double roblevel;
double robxp;
double robothealth;
double robotmaxhealth;
int robx;
int roby;
int roborange;
int roborange2;
int roborange3;
int roborange4;
int damage;
int robottime;
int firetime;
string robottype;
timer robottimer, firetimer;
robot(int rx,int ry,int rbrange,int rbrange2,int rbrange3,int rbrange4,double hp,double maxhp,int rc,int dm,int ft,int sp,double roblv,double rxp,string rt,bool robf,bool robt,bool robt2)
{
this.robhealth=hp;
robx=rx;
roby=ry;
roborange=rbrange;
roborange2=rbrange2;
roborange3=rbrange3;
roborange4=rbrange4;
robothealth=hp;
robotmaxhealth=maxhp;
robotcard=rc;
damage=dm;
firetime=ft;
robottime=sp;
roblevel=roblv;
robxp=rxp;
robottype=rt;
fireable=robf;
moveable=robt;
moveable2=robt2;
spotted=false;
string[] robsfx=find_files("sounds/"+soundpack+"/npc/robots/"+robottype+"/*taunt*");
if(robsfx.length()!=0) robsound=robpool.play_extended_2d("sounds/"+soundpack+"/npc/robots/"+robottype+"/"+robsfx[random(0,robsfx.length()-1)],me.x,me.y,robx,roby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void robloop()
{
for(uint i=0; i<robots.length(); i++)
{
if(robots[i].robottimer.elapsed>=robots[i].robottime)
{
if(absolute(me.x-robots[i].robx)<=robots[i].roborange3 and absolute(me.y-robots[i].roby)<=robots[i].roborange4)
{
robots[i].spotted=true;
}
if(robots[i].spotted)
{
string[] robsteps=find_files("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*step*");
if(robots[i].moveable==true and robots[i].stepsound==1 and paused==0 and robsteps.length()!=0) robots[i].tilesound=robpool.play_extended_2d("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/"+robsteps[random(0,robsteps.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
robpool.update_sound_2d(robots[i].robsound,robots[i].robx,robots[i].roby);
robots[i].robottimer.restart();
if(robots[i].robx<me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx++;
robots[i].stepsound=1;
}
if(robots[i].robx>me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx--;
robots[i].stepsound=1;
}
if(robots[i].roby<me.y and robots[i].moveable2==true and paused==0)
{
robots[i].roby++;
robots[i].stepsound=1;
}
if(robots[i].roby>me.y and robots[i].moveable2==true and paused==0)
{
robots[i].roby--;
robots[i].stepsound=1;
}
}
}
if(absolute(me.x-robots[i].robx)<=robots[i].roborange and absolute(me.y-robots[i].roby)<=robots[i].roborange2 and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
robots[i].stepsound=0;
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=robots[i].damage*robots[i].roblevel-shielddefence;
robots[i].firetimer.restart();
}
else if(absolute(me.x-robots[i].robx)<=robots[i].roborange and absolute(me.y-robots[i].roby)<=robots[i].roborange2 and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==0 and paused==0)
{
robots[i].stepsound=0;
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*hit*");
if(hitsfx.length()!=0) robots[i].wepsound=robpool.play_stationary_extended("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=robots[i].damage*robots[i].roblevel-defence;
robots[i].firetimer.restart();
}
if(robots[i].robothealth<=0)
{
if(robots[i].robotcard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*life*");
if(lifesfx.length()!=0) robpool.play_2d("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,false);
robots[i].robothealth=robots[i].robhealth;
robots[i].robotcard-=1;
}
else if(robots[i].robotcard<=1 and paused==0)
{
robpool.destroy_sound(robots[i].hurtsound);
robpool.destroy_sound(robots[i].robsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/*death*");
if(defsfx.length()!=0) robots[i].defsound=robpool.play_extended_2d("sounds/"+soundpack+"/npc/robots/"+robots[i].robottype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=robots[i].robxp*robots[i].roblevel*xpmod;
kills+=1;
spawn_bodyfall(robots[i].robx, robots[i].roby, random(500,1000));
robots.remove_at(i);
return;
}
}
}
}
void spawn_robot(int x,int y,int robotrange,int robotrange2,int robotrange3,int robotrange4,double hp,double maxhp,int rc,int dm,int firetime,int robottime,double roblevel,double xp,string robottype,bool fireable,bool moveable,bool moveable2)
{
robot rb1(x,y,robotrange,robotrange2,robotrange3,robotrange4,hp,maxhp,rc,dm,firetime,robottime,roblevel,xp,robottype,fireable,moveable,moveable2);
robots.insert_last(rb1);
}
void destroy_all_robots()
{
for(uint i=0; i<robots.length(); i++)
{
robpool.destroy_sound(robots[i].robsound);
}
robots.resize(0);
}
robotzone@[]robotzones(0);
class robotzone
{
double minx, maxx;
int roby;
int spawntime;
string robtype;
timer spawntimer;
robotzone(double mx,double mx2,int ry,int sp,string rt)
{
minx=mx;
maxx=mx2;
roby=ry;
spawntime=sp;
robtype=rt;
}
}
void robotzoneloop()
{
for(uint i=0; i<robotzones.length(); i++)
{
if(robotzones[i].minx<=me.x and robotzones[i].maxx>=me.x and robotzones[i].roby==me.y and robotzones[i].spawntimer.elapsed>=robotzones[i].spawntime)
{
string[] robtype=find_directories("sounds/"+soundpack+"/npc/robots/*");
string rotype = robotzones[i].robtype;
if(rotype=="random" && robtype.length()>0)
{
rotype=robtype[random(0,robtype.length()-1)];
}
spawn_robot(random(robotzones[i].minx, robotzones[i].maxx), robotzones[i].roby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, rotype, true, true, false);
robotzones[i].spawntimer.restart();
}
}
}
void spawn_robotzone(double x1,double x2,int y,int sp,string type)
{
robotzone rz1(x1,x2,y,sp,type);
robotzones.insert_last(rz1);
}
void destroy_all_robotzones()
{
robotzones.resize(0);
}
zombie@[]zombies(0);
class zombie
{
bool fireable, moveable, moveable2, spotted;
int zombsound, defsound, hurtsound, stepsound, tilesound, wepsound;
int zombiecard;
int zombhealth;
double zomblevel;
double zombxp;
double zombiehealth;
double zombiemaxhealth;
int zombx;
int zomby;
int zombirange;
int zombirange2;
int zombirange3;
int zombirange4;
int damage;
int zombietime;
int firetime;
string zombietype;
timer zombietimer, firetimer;
zombie(int zx,int zy,int zbrange,int zbrange2,int zbrange3,int zbrange4,double hp,double maxhp,int zc,int dm,int ft,int sp,double zomblv,double zxp,string zt,bool zombf,bool zombt,bool zombt2)
{
this.zombhealth=hp;
zombx=zx;
zomby=zy;
zombirange=zbrange;
zombirange2=zbrange2;
zombirange3=zbrange3;
zombirange4=zbrange4;
zombiehealth=hp;
zombiemaxhealth=maxhp;
zombiecard=zc;
damage=dm;
firetime=ft;
zombietime=sp;
zomblevel=zomblv;
zombxp=zxp;
zombietype=zt;
fireable=zombf;
moveable=zombt;
moveable2=zombt2;
spotted=false;
string[] zombsfx=find_files("sounds/"+soundpack+"/npc/zombies/"+zombietype+"/*taunt*");
if(zombsfx.length()!=0) zombsound=zombpool.play_extended_2d("sounds/"+soundpack+"/npc/zombies/"+zombietype+"/"+zombsfx[random(0,zombsfx.length()-1)],me.x,me.y,zombx,zomby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void zombloop()
{
for(uint i=0; i<zombies.length(); i++)
{
if(zombies[i].zombietimer.elapsed>=zombies[i].zombietime)
{
if(abs(me.x-zombies[i].zombx)<=zombies[i].zombirange3 and abs(me.y-zombies[i].zomby)<=zombies[i].zombirange4)
{
zombies[i].spotted=true;
}
if(zombies[i].spotted)
{
string[] zombsteps=find_files("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*step*");
if(zombies[i].moveable==true and zombies[i].stepsound==1 and paused==0 and zombsteps.length()!=0) zombies[i].tilesound=zombpool.play_extended_2d("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/"+zombsteps[random(0,zombsteps.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
zombpool.update_sound_2d(zombies[i].zombsound,zombies[i].zombx,zombies[i].zomby);
zombies[i].zombietimer.restart();
if(zombies[i].zombx<me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx++;
zombies[i].stepsound=1;
}
if(zombies[i].zombx>me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx--;
zombies[i].stepsound=1;
}
if(zombies[i].zomby<me.y and zombies[i].moveable2==true and paused==0)
{
zombies[i].zomby++;
zombies[i].stepsound=1;
}
if(zombies[i].zomby>me.y and zombies[i].moveable2==true and paused==0)
{
zombies[i].zomby--;
zombies[i].stepsound=1;
}
}
}
if(absolute(me.x-zombies[i].zombx)<=zombies[i].zombirange and absolute(me.y-zombies[i].zomby)<=zombies[i].zombirange2 and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
zombies[i].stepsound=0;
string[] arqsfx=find_files("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldhitsound==1) shieldslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=zombies[i].damage*zombies[i].zomblevel-shielddefence;
zombies[i].firetimer.restart();
}
else if(absolute(me.x-zombies[i].zombx)<=zombies[i].zombirange and absolute(me.y-zombies[i].zomby)<=zombies[i].zombirange2 and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==0 and paused==0)
{
zombies[i].stepsound=0;
string[] hitsfx=find_files("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*hit*");
if(hitsfx.length()!=0) zombies[i].wepsound=zombpool.play_stationary_extended("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/"+soundpack+"/characters/"+chartype+"/*hurt*");
if(hurtsfx.length()!=0 and charhurtsound==1) painslot=p.play_stationary_extended("sounds/"+soundpack+"/characters/"+chartype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
health-=zombies[i].damage*zombies[i].zomblevel-defence;
zombies[i].firetimer.restart();
}
if(zombies[i].zombiehealth<=0)
{
if(zombies[i].zombiecard>=2 and paused==0)
{
string[] lifesfx=find_files("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*life*");
if(lifesfx.length()!=0) zombpool.play_2d("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/"+lifesfx[random(0,lifesfx.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,false);
zombies[i].zombiehealth=zombies[i].zombhealth;
zombies[i].zombiecard-=1;
}
else if(zombies[i].zombiecard<=1 and paused==0)
{
zombpool.destroy_sound(zombies[i].hurtsound);
zombpool.destroy_sound(zombies[i].zombsound);
string[] defsfx=find_files("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/*death*");
if(defsfx.length()!=0) zombies[i].defsound=zombpool.play_extended_2d("sounds/"+soundpack+"/npc/zombies/"+zombies[i].zombietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=zombies[i].zombxp*zombies[i].zomblevel*xpmod;
kills+=1;
spawn_bodyfall(zombies[i].zombx, zombies[i].zomby, random(500,1000));
zombies.remove_at(i);
return;
}
}
}
}
void spawn_zombie(int x,int y,int zombierange,int zombierange2,int zombierange3,int zombierange4,double hp,double maxhp,int zc,int dm,int firetime,int zombietime,double zomblevel,double xp,string zombietype,bool fireable,bool moveable,bool moveable2)
{
zombie zb1(x,y,zombierange,zombierange2,zombierange3,zombierange4,hp,maxhp,zc,dm,firetime,zombietime,zomblevel,xp,zombietype,fireable,moveable,moveable2);
zombies.insert_last(zb1);
}
void destroy_all_zombies()
{
for(uint i=0; i<zombies.length(); i++)
{
zombpool.destroy_sound(zombies[i].zombsound);
}
zombies.resize(0);
}
zombiezone@[]zombiezones(0);
class zombiezone
{
double minx, maxx;
int zomby;
int spawntime;
string zombtype;
timer spawntimer;
zombiezone(double mx,double mx2,int zy,int sp,string zt)
{
minx=mx;
maxx=mx2;
zomby=zy;
spawntime=sp;
zombtype=zt;
}
}
void zombiezoneloop()
{
for(uint i=0; i<zombiezones.length(); i++)
{
if(zombiezones[i].minx<=me.x and zombiezones[i].maxx>=me.x and zombiezones[i].zomby==me.y and zombiezones[i].spawntimer.elapsed>=zombiezones[i].spawntime)
{
string[] zombtype=find_directories("sounds/"+soundpack+"/npc/zombies/*");
string zotype = zombiezones[i].zombtype;
if(zotype=="random" && zombtype.length()>0)
{
zotype=zombtype[random(0,zombtype.length()-1)];
}
spawn_zombie(random(zombiezones[i].minx, zombiezones[i].maxx), zombiezones[i].zomby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zotype, true, true, false);
zombiezones[i].spawntimer.restart();
}
}
}
void spawn_zombiezone(double x1,double x2,int y,int sp,string type)
{
zombiezone zz1(x1,x2,y,sp,type);
zombiezones.insert_last(zz1);
}
void destroy_all_zombiezones()
{
zombiezones.resize(0);
}
