ambsource@[] ambsources(0);
class ambsource
{
    double minx, maxx, miny, maxy;
    int sorcesound;
    double volume;
    double pitch;
    string sourcetype;
    bool is_playing;
    ambsource(double mx, double mx2, double my, double my2, string srt, double vol, double semitone)
    {
        minx = mx;
        maxx = mx2;
        miny = my;
        maxy = my2;
        sourcetype = srt;
        volume = vol;
        pitch = semitone;
        is_playing = false;
        string[] srcfilesfx = find_files("sounds/"+soundpack+"/objects/sources/" + sourcetype + "/*loop*");
        if (srcfilesfx.length() != 0) sorcesound = sourcepool.play_extended_2d("sounds/"+soundpack+"/objects/sources/" + sourcetype + "/" + srcfilesfx[random(0, srcfilesfx.length() - 1)], me.x, me.y, minx, miny, 0, 0, 0, 0, true, 0, 0, volume, pitch, false);
            sourcepool.update_sound_2d(sorcesound, minx, miny);
            sourcepool.update_sound_range_2d(sorcesound, 0, maxx - minx, 0, maxy - miny);
            is_playing = true;
        }
void update(double listener_x, double listener_y)
    {
        bool in_range = (listener_x >= minx && listener_x <= maxx && listener_y >= miny && listener_y <= maxy);
        if (in_range && !is_playing)
        {
            sourcepool.resume_sound(sorcesound);
            is_playing = true;
        }
        else if (!in_range && is_playing)
        {
            sourcepool.pause_sound(sorcesound);
            is_playing = false;
        }
    }
}
void update_ambsources(double listener_x, double listener_y)
{
    for (uint i = 0; i < ambsources.length(); i++)
    {
        ambsources[i].update(listener_x, listener_y);
    }
}
void spawn_ambsource(double x1, double x2, double y1, double y2, string sourcetype, double soundvol, double soundpitch)
{
    ambsource amb1(x1, x2, y1, y2, sourcetype, soundvol, soundpitch);
    ambsources.insert_last(amb1);
}
void destroy_all_ambsources()
{
    for (uint i = 0; i < ambsources.length(); i++)
    {
        sourcepool.destroy_sound(ambsources[i].sorcesound);
    }
    ambsources.resize(0);
}
