void fighter()
{
gametimer.force(gametime);
if(musmode==1) spawn_musicsource(0, maxx*10, 0, maxy*10, mustyp, volume, pitch);
while(true)
{
wait(5);
update_sound_pools();
checkwepslots();
fallcheck();
animalloop();
bfloop();
bulletloop();
enemyloop();
projloop();
robotloop();
zombloop();
if(amsptimer.elapsed>=amsptime and animals.length()<aninum and gamemode==1 and spawnable==true)
{
string[] animaltype=find_directories("sounds/npc/animals/*");
spawn_animal(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, animaltype[random(0,animaltype.length()-1)], true, true, false);
amsptimer.restart();
}
if(emsptimer.elapsed>=emsptime and enemies.length()<eninum and gamemode==2 and spawnable==true)
{
string[] enemytype=find_directories("sounds/npc/enemies/*");
spawn_enemy(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, enemytype[random(0,enemytype.length()-1)], true, true, false);
emsptimer.restart();
}
if(prosptimer.elapsed>=prosptime and projectiles.length()<projnum and gamemode==3 and spawnable==true)
{
string[] projtype=find_directories("sounds/npc/projectiles/*");
spawn_projectile(random(0, maxx), 0, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, projtype[random(0,projtype.length()-1)], true, true);
prosptimer.restart();
}
if(robsptimer.elapsed>=robsptime and robots.length()<robnum and gamemode==4 and spawnable==true)
{
string[] robottype=find_directories("sounds/npc/robots/*");
spawn_robot(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, robottype[random(0,robottype.length()-1)], true, true, false);
robsptimer.restart();
}
if(zombsptimer.elapsed>=zombsptime and zombies.length()<zombnum and gamemode==5 and spawnable==true)
{
string[] zombietype=find_directories("sounds/npc/zombies/*");
spawn_zombie(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zombietype[random(0,zombietype.length()-1)], true, true, false);
zombsptimer.restart();
}
if(amsptimer.elapsed>=amsptime and animals.length()<aninum and gamemode==6 and spawnable==true and  amtype!="")
{
string[] animaltype=find_directories("sounds/npc/animals/*");
if(amtype!="" and animaltype.find(amtype)>-1)
{
spawn_animal(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, amtype, true, true, false);
amsptimer.restart();
}
}
if(emsptimer.elapsed>=emsptime and enemies.length()<eninum and gamemode==7 and spawnable==true and  emtype!="")
{
string[] enemytype=find_directories("sounds/npc/enemies/*");
if(emtype!="" and enemytype.find(emtype)>-1)
{
spawn_enemy(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, emtype, true, true, false);
emsptimer.restart();
}
}
if(prosptimer.elapsed>=prosptime and projectiles.length()<projnum and gamemode==8 and spawnable==true and  potype!="")
{
string[] projtype=find_directories("sounds/npc/projectiles/*");
if(potype!="" and projtype.find(potype)>-1)
{
spawn_projectile(random(0, maxx), 0, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, potype, true, true);
prosptimer.restart();
}
}
if(robsptimer.elapsed>=robsptime and robots.length()<robnum and gamemode==9 and spawnable==true and  rotype!="")
{
string[] robottype=find_directories("sounds/npc/robots/*");
if(rotype!="" and robottype.find(rotype)>-1)
{
spawn_robot(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, rotype, true, true, false);
robsptimer.restart();
}
}
if(zombsptimer.elapsed>=zombsptime and zombies.length()<zombnum and gamemode==10 and spawnable==true and  zotype!="")
{
string[] zombietype=find_directories("sounds/npc/zombies/*");
if(zotype!="" and zombietype.find(zotype)>-1)
{
spawn_zombie(random(0, maxx), 0, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zotype, true, true, false);
zombsptimer.restart();
}
}
if(alt_is_down())
{
if(key_pressed(KEY_SLASH))
{
input.set_only_allowed_chars("1234567890- ");
string gd = input.input("Enter the coordinates you'd like to go to.");
if(gd == "")
return;
string[] sd = string_split(gd, " ", true);
if(sd.length()==2)
{
int x = stn(sd[0]);
int y = stn(sd[1]);
gop(x, y);
}
else
{
speak("Invalid input. Please enter two numbers separated by a space.");
}
}
}
if(key_pressed(KEY_I))
{
if(autosave==1) writedata();
itemsmenu();
}
if(key_pressed(KEY_W))
{
if(autosave==1) writedata();
weaponsmenu();
}
if(key_pressed(KEY_S))
{
string[] armor=find_directories("data/layouts/equipments/shields/*");
if(armor.length()==0)
{
speak("there are no shields available to view.");
}
else if(shieldon==1)
{
speak("You can't switch to a different shield while the current one is in use.");
}
else
{
destroy_all_shields();
string[] shieldlist=find_directories("data/layouts/equipments/shields/*");
for(uint i=0; i<shieldlist.length(); i++)
{
shieldparse(shieldlist[i]);
}
if(autosave==1) writedata();
string res=shieldsmenu();
if(res!="")
{
shieldtype=res;
}
}
}
if (key_pressed(KEY_TAB) and key_up(KEY_LMENU) and key_up(KEY_RMENU))
{
if (shift_is_down())
cycle_inv(0);
else
cycle_inv(1);
}
if(key_pressed(KEY_RETURN) and shift_is_down() and usetimer.elapsed>=usetime)
{
usetimer.restart();
if (inv.get_keys().length()>0 and invpos<inv.get_size())
useitem(inv.get_keys()[invpos]);
else
speak("No item in focus.");
}
if(key_pressed(KEY_LBRACKET) and shift_is_down() and usetimer.elapsed>=usetime)
{
if(inv.get_keys().length()>0 and invpos<inv.get_size())
{
string[] dropsfx=find_files("sounds/equipments/items/unsorted/"+itemtype+"/"+itemtype2+"/*drop*");
if(dropsfx.length()!=0 and facing=="left") itemslot=p.play_extended_2d("sounds/equipments/items/unsorted/"+itemtype+"/"+itemtype2+"/"+dropsfx[random(0,dropsfx.length()-1)],me.x-1,me.y,me.x-1,me.y,0,0,0,0,false,0,0,itemvolume,itempitch,false);
if(dropsfx.length()!=0 and facing=="right") itemslot=p.play_extended_2d("sounds/equipments/items/unsorted/"+itemtype+"/"+itemtype2+"/"+dropsfx[random(0,dropsfx.length()-1)],me.x+1,me.y,me.x+1,me.y,0,0,0,0,false,0,0,itemvolume,itempitch,false);
drop_item(facing, itemtype, itemtype2);
give(itemtype2,-1);
usetimer.restart();
}
else
{
speak("No item in focus.");
}
}
if (jumping==1)
{
movetime=airtime;
}
else if(alt_is_down())
{
movetime=runtime;
}
else
{
movetime=walktime;
}
if(shift_is_down())
{
if(key_pressed(KEY_LEFT))
{
spy("left", spydist);
}
if(key_pressed(KEY_RIGHT))
{
spy("right", spydist);
}
if(key_pressed(KEY_DOWN))
{
spy("down", spydist);
}
if(key_pressed(KEY_UP))
{
spy("up", spydist);
}
}
if(key_down(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(key_pressed(KEY_R))
{
bool hazard_found=false;
string tiletype;
if(cam.y>=1 and gct(cam.x,cam.y)=="")
{
tiletype="air";
}
else
{
tiletype=gct(cam.x,cam.y);
}
for(uint i=0; i<hazards.length(); i++)
{
if(cam.x>=hazards[i].minx && cam.x<=hazards[i].maxx && cam.y>=hazards[i].miny && cam.y<=hazards[i].maxy)
{
hazard_found=true;
speak(tiletype+" with "+hazards[i].hazardtype+" hazard, "+cam.x+","+cam.y);
break;
}
}
if(!hazard_found)
{
speak(tiletype+", "+cam.x+", "+cam.y);
}
}
if(key_pressed(KEY_M))
{
if(mfc==false)
{
mfc=true;
if(switchsound==1) p.play_stationary("toggleon.ogg",false);
speak("Mfwc enabled.");
}
else if(mfc==true)
{
mfc=false;
if(switchsound==1) p.play_stationary("toggleoff.ogg",false);
speak("Mfwc disabled.");
}
}
if(key_pressed(KEY_T))
{
playcam();
}
if(cleft.pressing() and cam.x!=0)
{
if(autosave==1) writedata();
cam_left();
}
if(cright.pressing() and cam.x!=maxx)
{
if(autosave==1) writedata();
cam_right();
}
if(key_pressed(KEY_LEFT) and cam.x!=0)
{
if(autosave==1) writedata();
camstep_left();
}
if(key_pressed(KEY_RIGHT) and cam.x!=maxx)
{
if(autosave==1) writedata();
camstep_right();
}
if(cdown.pressing() and cam.y!=0)
{
if(autosave==1) writedata();
cam_down();
}
if(cup.pressing() and cam.y!=maxx)
{
if(autosave==1) writedata();
cam_up();
}
if(key_pressed(KEY_DOWN) and cam.y!=0)
{
if(autosave==1) writedata();
camstep_down();
}
if(key_pressed(KEY_UP) and cam.y!=maxy)
{
if(autosave==1) writedata();
camstep_up();
}
}
if(key_up(KEY_G))
{
cam.x=me.x;
cam.y=me.y;
mfc=false;
}
if(key_pressed(KEY_SEMICOLON))
{
speak("Your maximum jump height is"+jumpheight+"squares");
}
if(key_pressed(KEY_APOSTROPHE))
{
speak("You are at speed"+modspeed);
}
if(key_down(KEY_LEFT) and key_up(KEY_G) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and movetimer.elapsed>=movetime or key_down(KEY_RIGHT) and key_up(KEY_G) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and movetimer.elapsed>=movetime or key_down(KEY_UP) and key_up(KEY_G) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and movetimer.elapsed>=movetime or key_down(KEY_DOWN) and key_up(KEY_G) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and movetimer.elapsed>=movetime)
{
if(keyrowhold==1 and moveable==false and sitting==true)
{
string[] rocksfx=find_files("sounds/characters/"+chartype+"/*rock*");
if(rocksfx.length()!=0 and charrocksound==1) p.play_stationary("sounds/characters/"+chartype+"/"+rocksfx[random(0,rocksfx.length()-1)],false);
movetimer.restart();
}
}
if(key_down(KEY_UP) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==1 and movetimer.elapsed>=movetime and moveable==true and doormove==false)
{
if(facing=="up"==false)
{
facing="up";
if(spokenturns==1) speak(facing);
string[] turnsfx=find_files("sounds/characters/"+chartype+"/*turn*");
if(turnsfx.length()!=0 and turnsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
movetimer.restart();
}
}
if(key_down(KEY_DOWN) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==1 and movetimer.elapsed>=movetime and moveable==true and doormove==false)
{
if(facing=="down"==false)
{
facing="down";
if(spokenturns==1) speak(facing);
string[] turnsfx=find_files("sounds/characters/"+chartype+"/*turn*");
if(turnsfx.length()!=0 and turnsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
movetimer.restart();
}
}
if(key_pressed(KEY_UP) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==0 and moveable==true and doormove==false)
{
if(facing=="up"==false)
{
facing="up";
if(spokenturns==1) speak(facing);
string[] turnsfx=find_files("sounds/characters/"+chartype+"/*turn*");
if(turnsfx.length()!=0 and turnsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
}
}
if(key_pressed(KEY_DOWN) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==0 and moveable==true and doormove==false)
{
if(facing=="down"==false)
{
facing="down";
if(spokenturns==1) speak(facing);
string[] turnsfx=find_files("sounds/characters/"+chartype+"/*turn*");
if(turnsfx.length()!=0 and turnsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+turnsfx[random(0,turnsfx.length()-1)],false);
}
}
if(key_down(KEY_LEFT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==1 and movetimer.elapsed>=movetime and moveable==true and doormove==false)
{
if(autosave==1) writedata();
move_left();
movetimer.restart();
}
if(key_down(KEY_RIGHT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==1 and movetimer.elapsed>=movetime and moveable==true and doormove==false)
{
if(autosave==1) writedata();
move_right();
movetimer.restart();
}
if(key_pressed(KEY_LEFT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==0 and moveable==true and doormove==false)
{
if(autosave==1) writedata();
step_left();
}
if(key_pressed(KEY_RIGHT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and keyrowhold==0 and moveable==true and doormove==false)
{
if(autosave==1) writedata();
step_right();
}
if(modspeed>=1)
{
airtime=250/modspeed+wepweight+shieldweight;
camtime=250/modspeed+wepweight+shieldweight;
falltime=250/modspeed-wepweight-shieldweight;
runtime=500/modspeed+wepweight+shieldweight;
walktime=1000/modspeed+wepweight+shieldweight;
}
if(key_pressed(KEY_D) and modspeed!=20)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to increase the moving speed.");
}
else if(speedable==true)
{
modspeed+=1;
speak("speed"+modspeed);
}
}
if(key_pressed(KEY_A) and modspeed!=1)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to decrease the moving speed.");
}
else if(speedable==true)
{
modspeed-=1;
speak("speed"+modspeed);
}
}
if(key_pressed(KEY_F))
{
if(modspeed==5)
{
speak("moving speed is already reset");
}
else if(modspeed<=20)
{
modspeed=5;
speak("moving speed reset");
}
}
if(key_pressed(KEY_X))
{
if(spokenswitch==1)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) p.play_stationary("switchoff.ogg",false);
speak("auto walking disabled");
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) p.play_stationary("switchon.ogg",false);
speak("auto walking enabled");
keyrowhold=1;
speedable=true;
}
else if(spokenswitch==0)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) p.play_stationary("switchoff.ogg",false);
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) p.play_stationary("switchon.ogg",false);
keyrowhold=1;
speedable=true;
}
}
}
}
if(key_pressed(KEY_T))
{
if(sittable==true and sitting==false)
{
if(autosave==1) writedata();
sit_down();
}
else if(sittable==true and sitting==true)
{
if(autosave==1) writedata();
stand_up();
}
}
if (key_pressed(KEY_C))
{
if(autosave==1) writedata();
speakcoordinates();
}
if(key_pressed(KEY_Q))
{
if(autosave==1) writedata();
if(get_zone_at(me.x, me.y)!="")
{
string locate=get_zone_at(me.x,me.y);
speak("Current location"+","+locate);
}
else
{
speak("Current location"+","+"unknown area.");
}
}
if(key_pressed(KEY_J) and telable==true)
{
if(spokentel==1)
{
me.x=random(0,maxx);
if(telsound==1) p.play_stationary("tel1.ogg",false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.x=random(0,maxx);
if(telsound==1) p.play_stationary("tel1.ogg",false);
}
}
if(key_pressed(KEY_K) and telable==true)
{
if(spokentel==1)
{
me.y=random(1,maxy);
if(telsound==1) p.play_stationary("tel2.ogg",false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.y=random(1,maxy);
if(telsound==1) p.play_stationary("tel2.ogg",false);
}
}
if(key_pressed(KEY_L) and telable==true)
{
if(spokentel==1)
{
me.x=random(0,maxx);
me.y=random(1,maxy);
if(telsound==1) p.play_stationary("tel3.ogg",false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.x=random(0,maxx);
me.y=random(1,maxy);
if(telsound==1) p.play_stationary("tel3.ogg",false);
}
}
if (key_pressed(KEY_F1) and maxx!=10)
{
maxx-=10;
speak("max x position decreased to"+maxx+"tiles");
}
if(key_pressed(KEY_F2) and maxx!=1000)
{
maxx+=10;
speak("max x position increased to"+maxx+"tiles");
}
if(key_pressed(KEY_F3) and maxy!=10)
{
maxy-=10;
speak("max y position decreased to"+maxy+"tiles");
}
if(key_pressed(KEY_F4) and maxy!=1000)
{
maxy+=10;
speak("max y position increased to"+maxy+"tiles");
}
if(key_pressed(KEY_F5) and jumpheight!=1)
{
jumpheight-=1;
speak("jump height decreased to"+jumpheight+"squares");
}
if(key_pressed(KEY_F6) and jumpheight!=20)
{
jumpheight+=1;
speak("jump height increased to"+jumpheight+"squares");
}
if(key_pressed(KEY_F7))
{
if(jumpheight==5)
{
speak("jump hight is already reset");
}
else if(jumpheight<=20)
{
jumpheight=5;
speak("jump hight reset");
}
}
if(key_pressed(KEY_COMMA))
{
speak("Your maximum x position is"+maxx+"tiles");
}
if(key_pressed(KEY_PERIOD))
{
speak("Your maximum y position is"+maxy+"tiles");
}
if(key_down(KEY_SPACE) and key_up(KEY_G)  and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and autojump==1 and jumping==0 and falling==false and doormove==false)
{
string[] jumpsfx=find_files("sounds/characters/"+chartype+"/*jump*");
if(jumpsfx.length()!=0 and charjumpsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
ty1=me.y;
ty2=me.y+jumpheight;
jumping=1;
ascending=true;
}
if (jumping==1)
{
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
checkforplatforms();
if (me.y<=ty1)
{
me.y=ty1;
jumping=0;
}
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if(key_pressed(KEY_SPACE) and key_up(KEY_G)  and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and autojump==0 and jumping==0 and falling==false and doormove==false)
{
string[] jumpsfx=find_files("sounds/characters/"+chartype+"/*jump*");
if(jumpsfx.length()!=0 and charjumpsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
ty1=me.y;
ty2=me.y+jumpheight;
jumping=1;
ascending=true;
}
if (jumping==1)
{
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
checkforplatforms();
if (me.y<=ty1)
{
me.y=ty1;
jumping=0;
}
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if(key_pressed(KEY_Z))
{
if(melee==false and weapontype=="archery")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==false and weapontype=="artillery")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==false and weapontype=="explosive")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==true and weapontype=="melee")
{
speak("This weapon does not take any ammo.");
}
}
if(key_pressed(KEY_R) and melee==false and loadedammo<=0)
{
reload_weapon();
}
if (key_pressed(KEY_Y))
{
speak("You've been playing for a total of;"+timeelapsed.m()+"minutes,"+timeelapsed.s()+"seconds");
}
if(key_pressed(KEY_H))
{
if(shieldon==1)
{
speak("Your shield must be unequipped to view the player's health status.");
}
else if(shieldon==0)
{
if(healthspeech==1 and lifecard>=2)
{
speak(health+"health,"+lifecard+"lives");
}
if(healthspeech==2 and lifecard>=2)
{
speak(health+"of"+maxhealth+"health,"+lifecard+"lives");
}
if(healthspeech==3 and lifecard>=2)
{
speak(round(health/maxhealth*100,0)+"percent health remaining,"+lifecard+"lives");
}
if(healthspeech==4 and lifecard>=2)
{
speak(round(health/maxhealth*100,0)+"percent,"+health+"of"+maxhealth+"health,"+lifecard+"lives");
}
if(healthspeech==1 and lifecard<=1)
{
speak(health+"health,"+lifecard+"life");
}
if(healthspeech==2 and lifecard<=1)
{
speak(health+"of"+maxhealth+"health,"+lifecard+"life");
}
if(healthspeech==3 and lifecard<=1)
{
speak(round(health/maxhealth*100,0)+"percent health remaining,"+lifecard+"life");
}
if(healthspeech==4 and lifecard<=1)
{
speak(round(health/maxhealth*100,0)+"percent,"+health+"of"+maxhealth+"health,"+lifecard+"life");
}
}
}
if(key_pressed(KEY_M))
{
if(shieldon==0)
{
speak("Your shield must be equipped to view it's status.");
}
else if(shieldon==1)
{
speak("shield strength,"+round(shieldstrength/maxshieldstrength*100,0)+"percent");
}
}
if(control_is_down())
{
if(useitems==false)
{
if(autosave==1) writedata();
drawable=true;
auto_fire_weapon();
}
else if(useitems==true)
{
if(autosave==1) writedata();
drawable=false;
auto_use_item();
}
}
if(key_pressed(KEY_LCONTROL) or key_pressed(KEY_RCONTROL))
{
if(useitems==false)
{
if(autosave==1) writedata();
drawable=true;
manule_fire_weapon();
}
else if(useitems==true)
{
if(autosave==1) writedata();
drawable=false;
manule_use_item();
}
}
if(key_pressed(KEY_E))
{
if(objinf==0)
{
if(gamemode==1) speak("there are;"+animals.length()+"animals spawned on the map.");
if(gamemode==2) speak("there are;"+enemies.length()+"enemies spawned on the map.");
if(gamemode==3) speak("there are;"+projectiles.length()+"projectiles spawned on the map.");
if(gamemode==4) speak("there are;"+robots.length()+"robots spawned on the map.");
if(gamemode==5) speak("there are;"+zombies.length()+"zombies spawned on the map.");
if(gamemode==6) speak("there are;"+animals.length()+amtype+";"+"spawned on the map.");
if(gamemode==7) speak("there are;"+enemies.length()+emtype+";"+"spawned on the map.");
if(gamemode==8) speak("there are;"+projectiles.length()+potype+";"+"spawned on the map.");
if(gamemode==9) speak("there are;"+robots.length()+rotype+";"+"spawned on the map.");
if(gamemode==10) speak("there are;"+zombies.length()+zotype+";"+"spawned on the map.");
}
else if(objinf==1)
{
if(animals.length()==0 and enemies.length()==0 and projectiles.length()==0 and robots.length()==0 and zombies.length()==0)
{
speak("there are no objects on the field to view.");
}
else
{
if(autosave==1) writedata();
objinfo();
}
}
}
if(key_pressed(KEY_N))
{
speak("You have killed a total of"+kills+"enemies.");
}
if (key_pressed(KEY_P))
{
if(pausem==0)
{
if (paused==0)
{
p.play_stationary("pause.ogg",false);
if(autosave==1) writedata();
pause();
}
else if (paused==1)
{
p.play_stationary("resume.ogg",false);
if(autosave==1) writedata();
resume();
}
}
else if(pausem==1)
{
pausemenu();
}
}
if(key_pressed(KEY_V))
{
pointsmenu();
}
if(xp>=xprequiered)
{
xprequiered=(levmod*(level*(level*4)));
string[] levsfx=find_files("sounds/characters/"+chartype+"/*lev*");
if(levsfx.length()!=0 and charlevsound==1) p.play_stationary("sounds/characters/"+chartype+"/"+levsfx[random(0,levsfx.length()-1)],false);
if(gamemode==1) aninum+=1;
if(gamemode==2) eninum+=1;
if(gamemode==3) projnum+=1;
if(gamemode==4) robnum+=1;
if(gamemode==5) zombnum+=1;
if(gamemode==6) aninum+=1;
if(gamemode==7) eninum+=1;
if(gamemode==8) projnum+=1;
if(gamemode==9) robnum+=1;
if(gamemode==10) zombnum+=1;
level+=1;
points+=100*level*levmod-100;
}
if(health<=health and hprestoretimer.elapsed>=hprestoretime and healable==true)
{
if(hprestoration==1)
{
string[] healingsfx=find_files("sounds/characters/"+chartype+"/*healing*");
if(healingsfx.length()!=0 and charhealsound==1) autoslot=p.play_stationary("sounds/characters/"+chartype+"/"+healingsfx[random(0,healingsfx.length()-1)],false);
health+=maxhealth/4;
string[] healstopsfx=find_files("sounds/characters/"+chartype+"/*healstop*");
if(healstopsfx.length()!=0 and charhealsound3==1 and health>=maxhealth) p.play_stationary("sounds/characters/"+chartype+"/"+healstopsfx[random(0,healstopsfx.length()-1)],false);
hprestoretimer.restart();
}
}
if(key_pressed(KEY_BACKSLASH) and healable==true)
{
if(shieldon==1)
{
speak("Your shield must be unequipped to restore the player's health.");
}
else if(shieldon==0 and hprestoration==0 and health>=maxhealth)
{
speak("You're already at maximum health.");
}
else if(health<=maxhealth and hprestoration==1)
{
p.destroy_sound(autoslot);
string[] healstopsfx=find_files("sounds/characters/"+chartype+"/*healstop*");
if(healstopsfx.length()!=0 and charhealsound3==1) p.play_stationary("sounds/characters/"+chartype+"/"+healstopsfx[random(0,healstopsfx.length()-1)],false);
hprestoration=0;
}
else
{
string[] healstartsfx=find_files("sounds/characters/"+chartype+"/*healstart*");
if(healstartsfx.length()!=0 and charhealsound2==1) p.play_stationary("sounds/characters/"+chartype+"/"+healstartsfx[random(0,healstartsfx.length()-1)],false);
hprestoration=1;
}
}
if(shieldstrength<=shieldstrength and sprestoretimer.elapsed>=sprestoretime and healable==true)
{
if(sprestoration==1)
{
string[] healingsfx=find_files("sounds/characters/"+chartype+"/*healing*");
if(healingsfx.length()!=0 and charhealsound==1) autoslot=p.play_stationary("sounds/characters/"+chartype+"/"+healingsfx[random(0,healingsfx.length()-1)],false);
shieldstrength+=maxshieldstrength/4;
string[] healstopsfx=find_files("sounds/characters/"+chartype+"/*healstop*");
if(healstopsfx.length()!=0 and charhealsound3==1 and shieldstrength>=maxshieldstrength) p.play_stationary("sounds/characters/"+chartype+"/"+healstopsfx[random(0,healstopsfx.length()-1)],false);
sprestoretimer.restart();
}
}
if(key_pressed(KEY_RBRACKET) and healable==true)
{
if(shieldon==0)
{
speak("Your shield must be equipped to restore it's strength.");
}
else if(shieldon==1 and shieldstrength>=maxshieldstrength)
{
speak("Your shield is already at maximum strength.");
}
else if(shieldon==1 and shieldstrength<=maxshieldstrength)
{
if(sprestoration==1)
{
p.destroy_sound(autoslot);
string[] healstopsfx=find_files("sounds/characters/"+chartype+"/*healstop*");
if(healstopsfx.length()!=0 and charhealsound3==1) p.play_stationary("sounds/characters/"+chartype+"/"+healstopsfx[random(0,healstopsfx.length()-1)],false);
sprestoration=0;
}
else
{
string[] healstartsfx=find_files("sounds/characters/"+chartype+"/*healstart*");
if(healstartsfx.length()!=0 and charhealsound2==1) p.play_stationary("sounds/characters/"+chartype+"/"+healstartsfx[random(0,healstartsfx.length()-1)],false);
sprestoration=1;
}
}
}
if(shieldstrength<=0)
{
p.destroy_sound(shieldloop);
p.destroy_sound(shieldslot);
string[] breaksfx=find_files("sounds/equipments/shields/"+shieldtype+"/*break*");
if(breaksfx.length()!=0 and shieldbreaksound==1) shieldslot=p.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+breaksfx[random(0,breaksfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength=maxshieldstrength;
shieldweight=1;
shieldon=0;
shieldtype="none";
}
if(health<=0)
{
if(lifecard>=2)
{
string[] lifesfx=find_files("sounds/characters/"+chartype+"/*life*");
if(lifesfx.length()!=0 and charlifesound==1) p.play_stationary("sounds/characters/"+chartype+"/"+lifesfx[random(0,lifesfx.length()-1)],false);
lifecard-=1;
health=maxhealth;
}
else if(lifecard<=1)
{
p.destroy_sound(painslot);
string[] defsfx=find_files("sounds/characters/"+chartype+"/*death*");
destroygame();
if(autosave==1) writedata();
if(defsfx.length()!=0 and chardeathsound==1) dlgplay("sounds/characters/"+chartype+"/"+defsfx[random(0,defsfx.length()-1)], true, true, 30);
if(tilename!="hardland")
{
string [] tilers=find_files("sounds/objects/platforms/"+gmt(me.x,me.y)+"/*hardland*");
if(tilers.length()!=0) tilename=tilers[random(0,tilers.length()-1)];
if(tilers.length()!=0) dlgplay("sounds/objects/platforms/"+gmt(me.x,me.y)+"/"+tilename,true,true,30);
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("You have died. Would you like to try again?",true);
if(mres==0)
{
wait(500);
health=maxhealth;
}
if(mres==1)
{
wait(500);
health=maxhealth;
}
if(mres==2)
{
health=maxhealth;
if(autosave==1) writedata();
gamemenu();
}
}
}
}
if(animals.length()>=50 or enemies.length()>=50 or projectiles.length()>=50 or robots.length()>=50 or zombies.length()>=50)
{
aninum=50;
eninum=50;
projnum=50;
robnum=50;
zombnum=50;
}
if(me.x<=0)
{
me.x=0;
}
if(me.x>=maxx)
{
me.x=maxx;
}
if(health<=0)
{
health=0;
}
if(health>=maxhealth)
{
health=maxhealth;
}
if(shieldstrength<=0)
{
shieldstrength=0;
}
if(shieldstrength>=maxshieldstrength)
{
shieldstrength=maxshieldstrength;
}
if(attack<=0)
{
attack=0;
}
if(defence<=0)
{
defence=0;
}
if(lifecard<=1)
{
lifecard=1;
}
if(points<=0)
{
points=0;
}
if(shielddefence<=0)
{
shielddefence=0;
}
if(weprange<=0)
{
weprange=0;
}
if(weprange2<=0)
{
weprange2=0;
}
if(health>=maxhealth and hprestoration==1)
{
hprestoration=0;
p.destroy_sound(autoslot);
health=maxhealth;
}
if(shieldstrength>=maxshieldstrength and sprestoration==1)
{
sprestoration=0;
p.destroy_sound(autoslot);
shieldstrength=maxshieldstrength;
}
if(key_pressed(KEY_B))
{
if(shieldtype=="none")
{
speak("You must draw a shield before equipping it.");
}
else if(shieldon==0)
{
string[] shieldsfx=find_files("sounds/equipments/shields/"+shieldtype+"/*loop*");
if(shieldsfx.length()!=0 and shieldloopsound==1) shieldloop=p.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+shieldsfx[random(0,shieldsfx.length()-1)],true,0,0,shieldvolume,shieldpitch,false);
string[] wearsfx=find_files("sounds/equipments/shields/"+shieldtype+"/*wear*");
if(wearsfx.length()!=0 and shieldwearsound==1) shieldslot=p.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+wearsfx[random(0,wearsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldon=1;
}
else
{
p.destroy_sound(shieldloop);
string[] remsfx=find_files("sounds/equipments/shields/"+shieldtype+"/*remove*");
if(remsfx.length()!=0 and shieldremovesound==1) shieldslot=p.play_stationary_extended("sounds/equipments/shields/"+shieldtype+"/"+remsfx[random(0,remsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldon=0;
}
}
if(key_pressed(KEY_ESCAPE) and quittable==true)
{
if(autosave==1) writedata();
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
destroygame();
gamemenu();
}
}
}
