void draw_weapon(string weapon_name,string weapon_name2,int wep_range,int wep_range2,int wep_damage,int wep_speed,int wep_maxammo,bool is_melee)
{
weapontype=weapon_name;
weapontype2=weapon_name2;
weprange=wep_range;
weprange2=wep_range2;
wepdamage=wep_damage;
wepspeed=wep_speed;
if(is_melee==false)
{
maxammo=wep_maxammo;
melee=false;
}
if(is_melee==true)
{
melee=true;
}
speak(weapon_name2+";"+"equipped");
if(wep_maxammo<loadedammo)
{
loadedammo=wep_maxammo;
}
string[] drawsfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapon_name+"/"+weapon_name2+"/*draw*");
if(drawsfx.length()!=0 and wepdrawsound==1) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapon_name+"/"+weapon_name2+"/"+drawsfx[random(0,drawsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
}
void reload_weapon()
{
if(ammo<=0)
{
string[] emptysfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*empty*");
if(emptysfx.length()!=0 and wepemptysound==1) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+emptysfx[random(0,emptysfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
speak("No ammo.");
}
else
{
int am;
if(ammo<maxammo)
{
am=ammo;
}
if(ammo>=maxammo)
{
am=maxammo;
if(loadedammo<maxammo and loadedammo>0)
{
am=maxammo-loadedammo;
}
}
loadedammo+=am;
ammo-=am; 
string[] reloadsfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*reload*");
if(reloadsfx.length()!=0 and wepreloadsound==1) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+reloadsfx[random(0,reloadsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
}
}
void auto_fire_weapon()
{
if(weapontype2==""==false and wephold==1 and weapontimer.elapsed>=weapontime and fireable==true and useitems==false)
{
weapontimer.restart();
if(loadedammo==0 and melee==false)
{
string[] emptysfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*empty*");
if(emptysfx.length()!=0) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+emptysfx[random(0,emptysfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
}
else
{
string[] firesfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*fire*");
if(firesfx.length()!=0 and wepfiresound==1) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
spawn_bullet(me.x, me.y, weprange, weprange2, wepdamage*attack, wepspeed, facing, weapontype, weapontype2, bouncing, charhit, scadder);
if(melee==false)
{
loadedammo-=1;
}
}
}
}
void manule_fire_weapon()
{
if(weapontype2==""==false and wephold==0 and weapontimer2.elapsed>=weapontime2 and fireable==true and useitems==false)
{
weapontimer2.restart();
if(loadedammo==0 and melee==false)
{
string[] emptysfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*empty*");
if(emptysfx.length()!=0) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+emptysfx[random(0,emptysfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
}
else
{
string[] firesfx=find_files("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/*fire*");
if(firesfx.length()!=0 and wepfiresound==1) weaponslot=p.play_stationary_extended("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/"+firesfx[random(0,firesfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
spawn_bullet(me.x, me.y, weprange, weprange2, wepdamage*attack, wepspeed, facing, weapontype, weapontype2, bouncing, charhit, scadder);
if(melee==false)
{
loadedammo-=1;
}
}
}
}
